<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2018.1 (Build 184U)" ts="2019-03-12 21:53:59">
<Class name="App.Action">
<Description>
Выводить необходимые действия</Description>
<ClassType/>
<IncludeCode>App.LogMacro</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>65071,53636.684807</TimeChanged>
<TimeCreated>64746,75062.988786</TimeCreated>

<Method name="OnPage">
<Description>
Главный метод формирования содержимого страницы</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s $zt="Err"
 	#dim %request as %CSP.Request
 	set appNsp=%request.Get("appNsp")
	set appMethod=%request.Get("appMethod")
	set appClass=%request.Get("appClass")
	set appPar=%request.Get("appPar")
	set appJson=%request.Get("appJson")
	s i=""
	for { set i=$o(%request.Data(i)) quit:i=""
			if i["appNsp" s appNsp=$g(%request.Data(i,$o(%request.Data(i,""),-1)))
			if i["appMethod" s appMethod=$g(%request.Data(i,$o(%request.Data(i,""),-1)))
			if i["appClass" s appClass=$g(%request.Data(i,$o(%request.Data(i,""),-1)))
			if i["appPar" s appPar=$g(%request.Data(i,$o(%request.Data(i,""),-1)))
			if i["appJson" s appJson=$g(%request.Data(i,$o(%request.Data(i,""),-1)))
	}
	if appNsp'="" try {zn appNsp set NSpace=appNsp } catch e {}
	set NSpace=$zu(5)

 	;s $$$AppL("MSW","req")=$$$AppObJs(%request)
 	i $isobject(%request.Content) { //POST
	 	s stream=%request.Content
		s sc=##class(App.files).Stream2String(%request.Content,.str)
		i 'sc q sc
	 	i $g(stt)["{" d ..ParseJson(.str,.appClass,.appMethod,.appPar) ;m appPar("%request.Content")=str  m appPar("%request")=$$$AppObJs(%request)
	 	m $$$AppL("MSW","Content")=str
 	}
  	i $g(appJson)["{" d ..ParseJson(.appJson,.appClass,.appMethod,.appPar) ;m appPar("%request")=$$$AppObJs(%request)
 	
 	;m $$$AppL("MSW","%request.Data")=%request.Data
	;s $$$AppL("MSW","%request.AppData")=%request.AppData

	if appMethod="" {
		$$$jsstart
 		w "alert('Параметр appMethod пустой');"
 		;w "console.log('Параметр appMethod пустой');"
 		$$$jsstop
		q $$$OK
	}
	
	if appMethod="ShowJson" {
		set gn=appPar
		try {
			write "<h3>"_gn_"</h3>"
			write "<pre>" write $g(@gn) write "</pre>" 
		} catch e { w $ze }
	}
	elseif appMethod="ShowXML" {
		set gn=appPar
		try {
			write $zconvert($g(@gn),"O","HTML")
		} catch e { w $ze }
	}
	else {
		set:appClass="" appClass="App.Action"
		;s $$$AppL("MSW","OnPage")=$lb(appPar,appClass,appMethod)
		if $e(appPar,1)="{" {
			;Разбор json TODO
		}
		elseif appPar["~" {
			d ##class(App.type).ParseURL(appPar,.appPar,"~")  ;разбор в массив 
		}
		Do $CLASSMETHOD(appClass,appMethod,.appPar)
	}
	
	quit $$$OK
Err 
	write $zconvert($ze,"O","HTML")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Test">
<Description>
Разобрать стоку в Json</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>appPar</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "ClassMethod Test."
	zw appPar
	q $$$OK
]]></Implementation>
</Method>

<Method name="ParseJson">
<Description>
Разобрать стоку в Json</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>jsonStr,appClass,appMethod,appPar</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 try {
	set appClass={}.$$$jsonFromJSON(jsonStr).appClass
	set appMethod={}.$$$jsonFromJSON(jsonStr).appMethod
	set appPar={}.$$$jsonFromJSON(jsonStr).appPar
	}
 catch e { 
 	write $zconvert($ze,"O","HTML")
 }
 quit $$$OK
]]></Implementation>
</Method>

<Method name="getActionJs">
<Description>
Получить js функцию</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>jsonStr,appClass,appMethod,appPar</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$jsstart
	w "function ActionJs(FormId,ResultId,appClass,appMethod,appPar,appNs){"
		w "var $data ={};"
		w "if (FormId) {$data = $('#'+FormId).serializeArray();}"
		w "$data.push({name:""appClass"",value:appClass});"
		w "$data.push({name:""appMethod"",value:appMethod});"
		w "$data.push({name:""appNs"",value:appNs});"
		w "$data.push({name:""appPar"",value:appPar});"
	    w "$.ajax({"
	    w "  url: 'App.Action.cls',"
	    w "  type: 'post',"
	    w "  data: $data,"
	    w "  success: function(result) {"
	    w "   if (ResultId) {$('#'+ResultId).html(result);}"
	    w "  }"
	    w "});"
	w "}"
	$$$jsstop
]]></Implementation>
</Method>
</Class>


<Class name="App.AutoPage">
<Description>
Updated at 12/08/2017 16:19:10</Description>
<Super>%CSP.Util.AutoPage</Super>
<TimeChanged>64726,30466</TimeChanged>
<TimeCreated>64621,43886.94639</TimeCreated>

<Parameter name="DOMAIN">
<Description>
Default Localization Domain</Description>
<Default>portalutils</Default>
</Parameter>

<Parameter name="ERRORPAGE">
<Description>
Specify a custom error page to call if there are any problems with generating this page.
If this is not specified it will use the default error page specified for this CSP
application, and if this is not specified it will use the system default error page.
For example this could be set to '/csp/samples/error.csp' to display the sample error
page.</Description>
<Default>App.errorpage.cls</Default>
</Parameter>

<Parameter name="STYLESHEET">
<Description>
Name of the external style sheet file</Description>
<Default>intersystems.css</Default>
</Parameter>

<Method name="OnCompile">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	s tSC=$$$OK
	// Пропускаем проверку, если компилируется класс-шаблон
	s isTemplate=%class="App.AutoPage"
	q:isTemplate $$$OK
	
	s cspurl=%class_".cls"
	s pvalue=$$$comMemberKeyGet(%class,$$$cCLASSparameter,"CSPURL",$$$cPARAMdefault)
	i (pvalue'=cspurl) {
		$$$defMemberKeySet(%class,$$$cCLASSparameter,"CSPURL",$$$cPARAMdefault,cspurl)
		s updateClass=##class("%Dictionary.ClassDefinition").%OpenId(%class)
		s updateClass.Modified=0
		d updateClass.%Save()
		d updateClass.%Close()
 	}

	f param="PAGENAME","PARENTPAGE" {
		s pvalue=$$$comMemberKeyGet(%class,$$$cCLASSparameter,param,$$$cPARAMdefault)
		i (pvalue="") {
			$$$defMemberKeySet(%class,$$$cCLASSparameter,param,$$$cPARAMdefault," ")
			s updateClass=##class("%Dictionary.ClassDefinition").%OpenId(%class)
			s updateClass.Modified=0
			d updateClass.%Save()
			d updateClass.%Close()
	 	}
	}
	q tSC
]]></Implementation>
</Method>

<Method name="GetTitlePane">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%CSP.Util.Pane</ReturnType>
<Implementation><![CDATA[
	Do %code.WriteLine(" Set tPane = ##class(%CSP.Util.SMTitlePane).%New()")
	Do %code.WriteLine(" Set tPane.Text =  $$$Text("""_$G(%parameter("PAGENAME"),"N/A")_""")")
	Do %code.WriteLine(" Quit tPane")
	q $$$OK
]]></Implementation>
</Method>

<Method name="GetDetailPane">
<Description>
Get the detail pane info object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%CSP.Util.Pane</ReturnType>
<Implementation><![CDATA[
	Set tDetailPane = ""
	Quit tDetailPane
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..DrawHTML()
]]></Implementation>
</Method>
</Class>


<Class name="App.Chart">
<Super>App.AutoPage</Super>
<TimeChanged>64985,34590.862384</TimeChanged>
<TimeCreated>64985,34590.862384</TimeCreated>

<Parameter name="CSPURL">
<Default>App.Chart.cls</Default>
</Parameter>

<Parameter name="PAGENAME">
<Expression>$s($mvv(58)="ru":"График",1:"Chart")</Expression>
</Parameter>

<Parameter name="PARENTPAGE">
<Default>App.AutoPage.cls</Default>
</Parameter>

<Method name="GetDetailPane">
<Description>
Get the detail pane info object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%CSP.Util.Pane</ReturnType>
<Implementation><![CDATA[	quit ##class(App.ChartPanel).%New()
]]></Implementation>
</Method>
</Class>


<Class name="App.ChartPanel">
<IncludeCode>App.LogMacro</IncludeCode>
<Super>App.LogInfoPane</Super>
<TimeChanged>65076,33301.717579</TimeChanged>
<TimeCreated>64985,34799.861897</TimeCreated>

<Method name="DrawBODY">
<Description>
Отрисовка графиков</Description>
<FormalSpec>pInstance:PageInstance</FormalSpec>
<PublicList>nsp,what,field,value,type,typeclass,caption</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	do ##class(App.LogInfoPane).AddJsScripts("chart")
	set $ZT="errors"
	set nsp=%request.Get("NSP")
	if nsp'="" try {zn nsp set NSpace=nsp } catch e {}
	set NSpace=$zu(5)

	s arg("header")="Ошибка вывода графика"
	s arg("labels")="[""Тест""]"
	s arg("type")="bar" ;line
	s arg("datasets")="{   label: ""Ошибка вывода графика"", borderColor: 'rgb(255, 199, 132)',  data: [30],  }"

	s days=1000
	i %request.Get("days") S days=%request.Get("days")
	
	// 
	if %request.Get("panel")'="" {
		s class=$p($p(%request.Get("panel"),"(",2),")"),method=$p($p(%request.Get("panel"),")",2),".",2)
		s st=$classmethod(class,method,.arg,days)
	}
	&html< <canvas id="Chart"></canvas>
	>
	$$$jsstart
 	w "var ctx = document.getElementById('Chart').getContext('2d');"
 	w "var chart = new Chart(ctx, {   type: '"_$g(arg("type"),"bar")_"',"
    // The data for our dataset
    w "data: {  labels: "_$g(arg("labels"))_","   // ["January", "February", "March", "April", "May", "June", "July"],
    w "   datasets: ["_$g(arg("datasets"))
      /*  {
            label: "Ретроспектива размеров баз данных",
            //backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: [0, 10, 5, 2, 20, 30, 45],
        },
        {
            label: "Ретроспектива размеров баз данных2222",
            //backgroundColor: 'rgb(255, 9, 132)',
            borderColor: 'rgb(255, 9, 132)',
            data: [10, 110, 5, 2, 20, 30, 55],
        }*/

    w " ] },  options: {    hover: { mode: 'index' }, tooltips: { mode: 'index' }	, title: { display: true, text: '"_$tr($g(arg("header")),"'""")_"'  }    } });"
	$$$jsstop
	quit $$$OK
errors
 	write !,$ze
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="ColorRGBa">
<Description>
d ##class(App.ChartPanel).ColorRGBa(32,0.2)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>num,alfa=1</FormalSpec>
<Implementation><![CDATA[
 
	s c=$e(+num,*)
	;i +num>9 
	;тот же свет alfa=1 потому как непрозрачность: 100% *
	i c=0 q "rgba(255, 0, 0, "_alfa_")" ;чистый красный
	i c=1 q "rgba(255, 99, 132, "_alfa_")" ;красный
    i c=2 q "rgba(255, 159, 64, "_alfa_")" ;оранжевый
    i c=3 q "rgba(255, 206, 86, "_alfa_")" ;желтый
    i c=4 q "rgba(0, 255, 0, "_alfa_")" ;чистый зеленый
    i c=5 q "rgba(75, 192, 192, "_alfa_")" ;зеленый
    i c=6 q "rgba(12, 164, 240, "_alfa_");" ;голубой
    i c=7 q "rgba(0, 0, 255, "_alfa_")" ;чистый синий
    i c=8 q "rgba(54, 162, 235, "_alfa_")" ;синий
    i c=9 q "rgba(153, 102, 255, "_alfa_")" ;фиолетовый
]]></Implementation>
</Method>

<Method name="FinishArg">
<Description>
Завершить объекты графика</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>res,data,labels,arg</FormalSpec>
<Implementation><![CDATA[
	s datasets=""
	s a="" f num=1:1 { s a=$o(res(a)) q:a=""
		s data(a)=$e(data(a),1,*-1)_"], }"
		s datasets=datasets_data(a)_","
	}
	s datasets=$e(datasets,1,*-1)
	s labels=$e(labels,1,*-1)_"]"
	s arg("datasets")=datasets
	s arg("labels")=labels
	q 1
]]></Implementation>
</Method>

<Method name="ChartLicUsed">
<Description>
Динамика расходования лицензий на основе регулярного задания  
с legacy методом: s st=##class(App.sys).SaveQuery("%SYSTEM.License:Counts")
d ##class(App.ChartPanel).ChartLicUsed(.arg,1200,.res)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arg,days,res,gn="^%App.Task"</FormalSpec>
<Implementation><![CDATA[
 s par=$p(days,",",2,999)
 s days=+days
 s ToDay=$zd($h,3),FromDay=$zd($h-days,3)
 s arg("header")="Динамика расходования лицензий на основе регулярного задания в диапазоне дат с "_FromDay_" по "_ToDay
 s arg("type")="line"
 s GN=$na(@gn@("%SYSTEM.License:Counts"))
 s dt=""
 f i=1:1:10 { s dt=$o(@GN@(dt),1) q:dt=""
 	w !,dt," ",$g(@GN@(dt,4,2))
 }
]]></Implementation>
</Method>

<Method name="ChartAlert">
<Description>
Поиск в протоколе cconsole.log важных событий
d ##class(App.ChartPanel).ChartAlert(.arg,1200,.res)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arg,days,res,list,mm</FormalSpec>
<Implementation><![CDATA[
 	s method="class(App.files).Alert" 
	d ##class(App.files).FindContextInLog(days,method,.res) ;разобрать протокол посчитать важные события
	s df=$p(res," ",1)
	s dt=$p(res," ",2)
	s arg("header")="Важные события системы в диапазоне дат с "_df_" по "_dt
	s arg("type")="line"
	s labels="["
	f yyyy=$p(df,".",3):1:$p(dt,".",3) {
		for m=1:1:12 {
			i yyyy=$p(df,".",3),m<$p(df,".",2)  continue
			i yyyy=$p(dt,".",3),m>$p(dt,".",2)  continue
			i m?1n s mm="0"_m
			e  s mm=m
			s labels=labels_""""_##class(App.type).GetTextMonth(mm)_"."_yyyy_""","
			s a="" f num=1:1 { s a=$o(res(a)) q:a=""
				i '$d(color(a)) s color(a)=num
				i '$d(data(a)) s data(a)="{  label: """_a_""", borderColor: '"_..ColorRGBa(color(a),1)_"',  data: ["
				s data(a)=data(a)_+$g(res(a,yyyy,mm))_","
			}

		}
	}
 d ..FinishArg(.res, .data, .labels, .arg)
 q 1
]]></Implementation>
</Method>

<Method name="ChartDbSize">
<Description>
Ретроспектива размеров баз данных
d ##class(App.ChartPanel).ChartDbSize(.arg,1200,.res,.list,.mm)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arg,days,res,list,mm</FormalSpec>
<Implementation><![CDATA[
	s method="class(App.files).ExpansionDB" 
	d ##class(App.files).FindContextInLog(days,method,.res) ;разобрать протокол посчитать месячный прирост баз в мегабайтах
	d ##class(App.RestMetrics).getDBsize("dbsize",.list) ;посчитать актуальный размер бд в гигабайтах
	;пройдем назад по времени отнимая месяный прирост
	s df=$p(res," ",1)
	s dt=$p(res," ",2)
	s arg("header")="Динамика роста баз данных в диапазоне дат с "_df_" по "_dt_" в Мегабайтах"
	s arg("type")="line"
	s labels="["
	s datasets="{  label: ""Ошибка вывода графика"", borderColor: '"_..ColorRGBa(0,1)_"',  data: [30],  }"
	s bd="",max=0	f num=1:1 { s bd=$o(list(bd)) q:bd=""  
		s list(bd)=list(bd)*1024
		i list(bd)>max s max=list(bd),free=list(bd,"free")*1024,maxbd=list(bd,"name")
		s order(list(bd))=bd ;ранжируем по размеру
		s color(bd)=num
	}
	s list("free","name")="Disk Free Size + "_maxbd
	s list("free")=max+free
	s order(max+free)="free"
	s color("free")=0
	;zw order	zw list
	//переведем в мегабайты
	s mm=$p(dt,".",2)
	f yyyy=$p(dt,".",3):-1:$p(df,".",3) {
		for {
			i mm?1n s mm="0"_mm
			;w !,yyyy,"-",mm
			s bd=""	f { s bd=$o(list(bd)) q:bd=""   continue:bd="total"
				s mm(yyyy,mm,bd)=list(bd) ;,1,2) ;текущий размер гиг
				i $d(res(bd,yyyy,mm)) {
					s list(bd)=list(bd)-($g(res(bd,yyyy,mm))) ;вычитаем месячный прирост переведя в гиги
					i list(bd)<0 s list(bd)=0
				}
			}
			s mm=mm-1
			i mm<1 s mm=12 q
			i yyyy=$p(df,".",3),mm<$p(df,".",2) q

		}
	}
	s yyyy="" f { s yyyy=$o(mm(yyyy)) q:yyyy=""
		f mon=1:1:12 { 
			s mm=mon i mm?1n s mm="0"_mm
			continue:'$d(mm(yyyy,mm))
			s labels=labels_""""_##class(App.type).GetTextMonth(mm)_"."_yyyy_""","
			s bd2="" f { s bd2=$o(order(bd2),-1,bd) q:bd2=""
				i '$d(data(bd)) s data(bd)="{  label: """_list(bd,"name")_""", borderColor: '"_..ColorRGBa(color(bd),1)_"',  data: ["
				s data(bd)=data(bd)_$g(mm(yyyy,mm,bd))_","
			}
		}
	}
	s datasets=""
	s bd2="" f { s bd2=$o(order(bd2),-1,bd) q:bd2=""
		s data(bd)=$e(data(bd),1,*-1)_"], }"
		s datasets=datasets_data(bd)_","
	}
	s datasets=$e(datasets,1,*-1)
	s labels=$e(labels,1,*-1)_"]"
	s arg("datasets")=datasets
	s arg("labels")=labels
	q 1
]]></Implementation>
</Method>

<Method name="ChartEnsUtilLog">
<Description>
Построить графики ошибок ансамбля по протоколу Ens_Util.Log where Type='2' </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arg,days,res,list</FormalSpec>
<Implementation><![CDATA[
 s ns=$p(days,",",2,999)
 s days=+days
 s ToDay=$zd($h,3),FromDay=$zd($h-days,3)
 s sql="select Convert(VarChar,TimeLogged, 103) as days,count(*) as erro from Ens_Util.Log where Type='2' and TimeLogged>'"_FromDay_"' and TimeLogged<'"_ToDay_"' and (Text not like '%ErrFTP%' and Text not like '%Не реализовано%' and text not like '%Ключ не определен однозначно%' and text not like '%Could not get%') group by Convert(VarChar,TimeLogged, 103)"
 f i=1:1:$l(ns,",") {
	 s nspace=$p(ns,",",i)
	 continue:nspace=""
	 $$$NspGoto(curNs,nspace)
	 i nspace=$zu(5) {
		s gn="^||tmpCount" ;_$tr(nspace,"-")
		;w "<br>"_gn
		s res(nspace)=""
		d ##class(App.sys).SaveSQL(sql,gn)
		f ii=1:1 {  q:'$d(@gn@(ii))
			s count=+$lg($g(@gn@(ii)),2)
			s dat=$lg($g(@gn@(ii)),1)
			s dd=$p(dat,"/",1),mm=$p(dat,"/",2)
			s res(nspace,$p(dat,"/",3)_"-"_mm_"-"_dd)=count
		}
	 }
	 $$$NspReturn(curNs)
 }
 ;set st=##class(App.LogInfoPane).DrawArray(GN,1000,$zu(5),"Вывод массива "_GN) ;посмотреть массив
 s arg("header")="Количество ошибок Ens_Util.Log в диапазоне дат с "_FromDay_" по "_ToDay
 s arg("type")="line"
 s labels="["
 for day=$h-days:1:+$h {
	s labels=labels_""""_$zd(day,3)_""","
	s a="" f num=1:1 { s a=$o(res(a)) q:a=""
		i '$d(color(a)) s color(a)=num
		i '$d(data(a)) s data(a)="{  label: """_a_""", borderColor: '"_..ColorRGBa(color(a),1)_"',  data: ["
		s data(a)=data(a)_+$g(res(a,$zd(day,3)))_","
	}
 }
 d ..FinishArg(.res, .data, .labels, .arg)
 q 1
]]></Implementation>
</Method>
</Class>


<Class name="App.DynaDoc">
<Description><![CDATA[
Шаблон генерирующий динамический контент по коментариям в формате DOxygen
/*! \brief any description
<br>\ingroup any_group
\example d ##class(App.LogInfoPane).GetClassDef("App.Log","",.out) */
Запускается через меню - Инструменты - Шаблоны. Горячая клавиша (Ctrl-T)]]></Description>
<IncludeCode>App.LogMacro</IncludeCode>
<Super>%ZEN.Template.studioTemplate</Super>
<System>4</System>
<TimeChanged>65063,33815.106034</TimeChanged>
<TimeCreated>65058,42988.636335</TimeCreated>

<Parameter name="TEMPLATENAME">
<Default>AppDynaDoc</Default>
</Parameter>

<Parameter name="TEMPLATETITLE">
<Default>Инструментарий разработчика</Default>
</Parameter>

<Parameter name="TEMPLATEDESCRIPTION">
<Default>Динамический поиск групп, функций и методов с возможность вставить найденное в текущую программу</Default>
</Parameter>

<Parameter name="TEMPLATETYPE">
<Default>cls,mac,inc,csp,int</Default>
</Parameter>

<Parameter name="TEMPLATEMODE">
<Description>
What type of template.</Description>
<Default>template</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>%ZEN</Default>
</Parameter>

<Parameter name="HELPID">
<Description>
DOCBOOK Topic Id that offers help for this template.</Description>
<Default>GZEN_style_wizard</Default>
</Parameter>

<Parameter name="GLOBALTEMPLATE">
<Description>
If this is true then even if this template is tied to a specific namespace it
will be available in any namespace and it will be up to the template to make sure
it looks for any specific data in the target namespace.</Description>
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<Property name="DevName">
<Description>
Developers Name</Description>
<Type>%String</Type>
</Property>

<Property name="FIK">
<Description>
Numer of update</Description>
<Type>%String</Type>
</Property>

<Property name="DESC">
<Description>
Description of update</Description>
<Type>%String</Type>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="templateBody">
<Description>
This XML block defines the contents of the body pane of this Studio Template.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" id="body">
<vgroup labelPosition="left" cellStyle="padding: 2px; padding-left: 5px; padding-right: 5px;">
<hgroup>
<text id="ctrlDevName"
	name="DevName"
	size="4"
	required="true"
	labelClass="zenRequired"
	title="Введите инициалы программиста" 
	onchange="zenPage.updateState();"
	value="#(%page.DevName)#"
/>
<text id="ctrlFIK"
	name="FIK"
	size="5"
	required="true"
	labelClass="zenRequired"
	title="Номер изменения системы в PDM" 
	onchange="zenPage.updateState();"
	value="#(%page.FIK)#"
/>
</hgroup>
<text label="Название доработки:" 
	id="ctrlDESC"
	name="DESC"
	size="120"
	required="true"
	labelClass="zenRequired"
	title="Введите краткое название доработки системы или исправления ошибки" 
	onchange="zenPage.updateState();"
	value="#(%page.DESC)#"
/>
<text label="Результат:" 
	hidden="true"
	id="ctrlResult"
	name="tResult"
	size="120"
	required="true"
	labelClass="zenRequired"
	title="текст возвращаемый в текщий проеет" 
	onchange="zenPage.updateState();"
	value="123"
/>

</vgroup>
<vgroup>
<html id="content" OnDrawContent="DrawContent" valign="top" />
</vgroup>
</pane>
]]></Data>
</XData>

<Method name="DrawGroups">
<Description>
Draw ...</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ns,Silence,RN</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 ;ПОДГОТОВКА ПУНКТОВ ПРИМЕРОВ
 I '$D(tGREEN) D VAR
 #; Выведем список историй ФИК
 w "История FIKs: <select NAME='fiksSelect' ONCHANGE='var a=this.options[this.selectedIndex].value;document.getElementById(""control_8"").value=a.split(""~"")[0]; document.getElementById(""control_9"").value=a.split(""~"")[1];document.getElementById(""control_10"").value=a.split(""~"")[2];' id='fiksSelect'><option value=''> </option>"
 s i="" f { s i=$o(^LetografStudio("HistoryFIK",i),-1,fik) q:i=""
 	w "<option value='"_$lg(fik,1)_"~"_i_"~"_$lg(fik,2)_"'> "_$lg(fik,1)_" "_i_" "_$lg(fik,2)_"</option>",!
 }
 w "</select>"
 s L=""
 #; Получение перечня программ для поиска участков кода для репозитория
 d GetRoutList(.lr,"MAC","+Letograf.DevRepoTemplate*")
 f i="MAC","INT" {
	 i $d(^LetografStudio("NewUpdate",i)) {
		 s mask="" f { s mask=$o(^LetografStudio("NewUpdate","SourceList",i,mask)) q:mask=""
		 	#; возможные форматы mask
		 	#; "+Letograf.DevRepoTemplate*" - все программы начинющиеся
		 	#; 
		 	d:mask'="" GetRoutList(.lr,i,mask) 
		 }
	  }
 }
 s i="" f  s i=$o(lr(i)) q:i=""  d rou($g(ns),i)
 ;если выводим в студио, то выделенный программный код можно будет запомнить в репозитории
 k @$na(@$$getTempGlName()@("GenDocRou","Error"))
 k @$na(@$$getTempGlName()@("GenDocRou","Rou"_$j)) 
 m @$zr=X i $g(Silence) q $zr
 w "<hr><h4>Разделы репозитория : <OL type=1>"
 ;s ii="" f  s ii=$o(ord(ii)) q:ii=""  s i=" "_$g(ord(ii)) i $d(X(i)) d WriteChapt s iii=$q(i) i iii
 s i="" f  s i=$o(X(i)) q:i=""  i i'["$",$e(i,2,999)'="",'$d(tmp($e(i,2,999))) d WriteChapt
 w "</OL>" w "</h4>"
 ;S I="" F  S I=$O(X(I)) Q:I=""  i I'["$" w $$key($e(I,2,999)) S I2="" F  S I2=$O(X(I,I2)) Q:I2=""  i I'["_$p($P(S" 	 W "<LI><A NAME='NewTop' href='#' onclick='NewTop7.value="""_I_"""; NewTop2.value=this.mark; document.getElementById(""F3"").submit();' mark='"_I_"="_I2_"="_$s($g(X(I,I2,0))["$$":1,1:"")_"'  TITLE='"_$ZCVT($$RES(I_"="_I2),"O","HTML")_"' ><span title='"_$ZCVT($$RES2(I_"="_I2_"="_$s($g(X(I,I2,0))["$$":1,1:"")),"O","HTML")_"' ><b>"_I2_"</b></span></a> "_$g(X(I,I2))_"</li>",!
 S I="" F {
	S I=$O(X(I)) Q:I=""  
	i I'["$" { w $$key($e(I,2,999)) 
	 	S I2="" F { S I2=$O(X(I,I2)) Q:I2=""
		   	continue:I["_$p($P(S" 
		   	W "<LI>"
		   	s onclick="document.getElementById(""control_11"").value="""_I_"="_I2_""";document.getElementById(""control_20"").click();"
		   	w "<A NAME='NewTop' href='#' onclick='"_$g(onclick)_"' mark='"_I_"="_I2_"="_$s($g(X(I,I2,0))["$$":1,1:"")_"' TITLE='"_$ZCVT($$RES(I_"="_I2),"O","HTML")_"' ><span title='"_$ZCVT($$RES2(I_"="_I2_"="_$s($g(X(I,I2,0))["$$":1,1:"")),"O","HTML")_"' ><b>"_I2_"</b></span></a> "
		   	w $g(X(I,I2))
		   	w "</li>",!
		}
	}
 }
 Q ""
rou(ns,rou) 
	i $g(ns)'="" {
	 if ns["|" {ZN $p(ns,$c(34),2) }
	 else { zn ns }
	}
 D routine(rou) s L=$g(L)_rou_"("_$g(L(rou))_"),"
 Q 
GetLenRou(r) ;возвратить размер программы в байтах
 i r="" q "???"
 ;n n,I,i 
 S r=$P(r,".")
 m n=^ROUTINE(r,0)
 S I=0  F i=1:1 Q:'$D(^ROUTINE(r,0,i))  S I=I+$L($G(^ROUTINE(r,0,i)))
 q r_" - имеет размер <font color=red>"_I_"</font> байт."
key(s) q "<a name='"_s_"' href='#TOP' onclick='jump(""TopUp"")' title='наверх'><hr size=7 color='Lightgrey'></a><h4>"_s_"</h4>" ; tMAROON_$s(s="word":"Слова",s="tip":"заготовки",s="fun":"модули и функции",1:"")_tEF_"<HR>"
routine(R)
 k @$na(@$$getTempGlName()@("GenDocRou","Error",R))
 ;n S,I,i,ii,r1,r2,r3,max
 s max=$g(^ROUTINE(R,0,0))
 f i=1:1:max s S(i)=$g(^ROUTINE(R,0,i))
 F i=1:1:max {
	 I S(i)[" ;@;",$tr($p(S(i)," ;",1)," ")'="" {
	 S r1=" "_$p($P(S(i)," ;@;",2),";"),r2=" "_$P(S(i)," ;@;",1),r3=$P(S(i),";",4,99),X(r1,r2)=r3,X(r1,r2,0)=R,L(R)=$g(L(R))+1 
	 i $g(S(i+1))[";@@;^" s X(r1,r2,0)=R_$s($g(S(i+1))[";@@;^f":"$$",1:"") ;только метку с программой ...^f функция
	 F ii=i+1:1:max { 
	 	i '$d(S(ii)) s @$na(@$$getTempGlName()@("GenDocRou","Error",R,1))="Не поставлен маркер ;@@;"
	 	q:'$d(S(ii))  q:S(ii)[";@@;"  
	 	S X(r1,r2,ii)=S(ii)  ;пример кода
	 }
		 F ii=ii+1:1:max {
			 i '$d(S(ii)) s @$na(@$$getTempGlName()@("GenDocRou","Error",R,2))="Не поставлен маркер ;"
			 q:'$d(S(ii))   q:S(ii)'[";"
			 S X(r1,r2,ii)=S(ii)  
		 }
	 S i=ii
	 }
 }
 Q
VAR ;СОЗДАНИЕ ПЕРЕМЕННЫХ Оформления HTML портала
 S t=$C(13,10),tEF="</span>",(tBBK,tBR)="<br>"_t,tB="<b>",tEB="</b>",tS="&nbsp;"
 q
 ;================================================
MASK(NAME,MASK) ;ЛОГИКА ВКЛЮЧЕНИЯ\ВЫКЛЮЧЕНИЯ ИМЕН
 ;N A,I,J,M,RET 
 S RET=0
 i MASK="*" q 1
 I '$D(MI) F I=1:1 Q:$P(MASK,",",I,I+1)=""  S A=$P(MASK,",",I),J=$E(A,1) S MI(J,$E($P(A,"*"),2,99))=A["*"
 S I="" 
 F  {S I=$O(MI("+",I)) Q:I=""  
	 if MI("+",I)=0,NAME=I {S RET=2}
	 elseif MI("+",I)=1,("@"_NAME)[("@"_I) { S RET=1}
	 Q:RET=2
	 }
 I RET=1 {
	 S I="" F  {
		 S I=$O(MI("-",I)) Q:I="" 
		 If MI("-",I)=1,("@"_NAME)[("@"_I) {S RET=0 }
		 elseif MI("-",I)=0,NAME=I { S RET=0 }
	 }
 }
 Q RET
  
GetRoutList(LIST,ext,MA) ;собрать все рутины расширения ext в локаль LIST по маске MA
 ;n MI,mas,i,v
	 s mas=$$GetMas(ext) ;w !,mas
	 S i="",v=0 F { S i=$O(@mas@(i)) Q:i=""
	   I $$MASK(i,MA) s LIST(i)=mas,v=v+1
	 }
	 s LIST=v
 q
GetMas(ext) ;это для Каши
 i $g(ns)'="",ns'["|" s ns="|"""_ns_"""|"
 q "^"_$g(ns)_$s(ext="INT":"ROUTINE",ext="MAC":"rMAC",ext="INC":"rINC",ext="OBJ":"rOBJ",1:"zerr0")
 
SetSelectTXT(T,R)  ;сохранить в истории выделений 
 i R'="" S @$na(@$$getTempGlName()@("GenDocRou","SetSelectTXT",R))=T ;^CacheTempGenDocRou("SetSelectTXT",R)=T 
 Q $J
GetSelectTXT(R) ;получить из истории выделений
 Q $G(@$na(@$$getTempGlName()@("GenDocRou","SetSelectTXT",R))," ;//?")
WriteChapt 
 i i'["$",$e(i,2,999)'="" w "<li><a title='"_$g(tmp($e(i,2,999)),"перейти")_"' href='#"_$e(i,2,999)_"'> "_$e(i,2,999)_"</a> " i ii'="" w tmp(ord(ii))
 	w "</li>"
 q
RES(R) ;n s
 s s=$p(R,"=",2)_" ;"_$g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2))))_$C(13,10)
 S i="" F  S i=$O(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),i))) q:i=""  i i'=0 s s=s_$g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),i)))_$C(13,10)
 Q s
RES2(R) ;n s,t
 s t=$C(13,10)
 i R=7 q $$GetSelectTXT(RN)_$$parseComma($$GetSelectTXT(RN))
 i $d(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),0))) {  
	 i $p(R,"=",2)["(" {s s=$s($p(R,"=",3):"s st=$$",1:"d ")_$e($p($p(R,"=",2),"("),2,99)_"^"_$p($g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),0))),"$$")_"("_$p($p(R,"=",2),"(",2)_" ;"_$g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2)))) }
	 else  {s s=$s($p(R,"=",3):"s st=$$",1:"d ")_$e($p(R,"=",2),2,99)_"^"_$p($g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),0))),"$$")_" ;"_$g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2)))) }
	 q " "_$e(s,1,32000)_$C(13,10)_" "_$$res3(R)
 }
 q $$res3(R)
res3(R) ;n s,i
 s s=""
 S i="" F  S i=$O(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),i))) q:i=""  i i'=0 s s=s_$g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),i)))_$C(13,10)
 Q $e(s,2,32000)
 ;

parseComma(s) ;разобрать запятые на переменные
 ;n a,i,r
  s a=$p($p(s,"(",2),")"),r=" ;"_"@"_";Глава; коментарий...в следующей строке если @@^ - процедура, @@^f - функция"_$c(13,10)_" ;"_"@@"_";^"_$c(13,10)
 i a="" q ""
 f i=1:1 q:$p(a,",",i,i+1)=""  s r=r_" ; "_$p(a,",",i)_" - "_$$default($p(a,",",i))_t
 q $g(r)
default(w) i w="idO" q "идентификатор объекта"
 i $zconvert(w,"L")["id" q "идентификатор"
 i $zconvert(w,"L")["par" q "родитель"
 i $zconvert(w,"L")["mode" q "режим" 
 i $zconvert(w,"L")["user" q "пользователь"
 i $zconvert(w,"L")["name" q "имя"
 i $zconvert(w,"L")["desc" q "описание объекта"
 i $zconvert(w,"L")["systype" q "системный тип"
 i $zconvert(w,"L")["type" q "тип"
 i $zconvert(w,"L")["err" q "ошибка"
 q ""
getTempGlName() ;ссылка на временный глобал
 q $na(^CacheTempCito($zu(5)))
]]></Implementation>
</Method>

<Method name="DrawContent">
<Description>
Draw main HTML content for this page.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<
	<a name="TopUp"></a>
	<hr>
	<div style='margin-bottom: 5px; margin-left: 5px; margin-right: 5px; margin-top: 5px;' >
	>
	w ..DrawGroups($zu(5),,$zn)
	&html<
	</div>
	<hr>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnTemplateAction">
<Description>
This method is called when the template is complete. Any
output to the principal device is returned to the Studio.
This is implemented by subclasses. </Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ..SetGLOBAL(..%GetValueByName("DevName"),..%GetValueByName("FIK"),..%GetValueByName("DESC"))
	write ..Action(..RES(..%GetValueByName("tResult")))
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RES">
<ClassMethod>1</ClassMethod>
<FormalSpec>R</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s s=$p(R,"=",2)_" ;"_$g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2))))_$C(13,10)
 S i="" F  S i=$O(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),i))) q:i=""  i i'=0 s s=s_$g(@$na(@$$getTempGlName()@("GenDocRou","Rou"_$j,$p(R,"="),$p(R,"=",2),i)))_$C(13,10)
 Q s
getTempGlName() ;ссылка на временный глобал!!!!!!
 q $na(^CacheTempCito($zu(5)))
]]></Implementation>
</Method>

<Method name="Action">
<ClassMethod>1</ClassMethod>
<FormalSpec>str,RN=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	 // RN - полное имя класса или программы
 s str=$p(str,$c(13,10),2,999)  ;Если мы в работаем для Летографа, то первую строку не выводим
 i str["**" s str=$replace(str,"**","mp") ;специально для того чтобы код закомиьтился в SVN
 i str["////" s str=$replace(str,"////","") ;специально для скобок и невалидного для комптлятора текста
 i str["{desc}" s str=$replace(str,"{desc}",$g(@##class(Letograf.TemplateDevRepo).#GLOBAL@("NewUpdate","DESC"))) 
 i str["{fio}" s str=$replace(str,"{fio}",$g(@##class(Letograf.TemplateDevRepo).#GLOBAL@("NewUpdate","FIO"))) 
 i str["{fik}" s str=$replace(str,"{fik}",$g(@##class(Letograf.TemplateDevRepo).#GLOBAL@("NewUpdate","FIK"))) ;чтобы было видно что присваивать
 i str["{date}" s str=$replace(str,"{date}",$zd($h,3)) 
 i str["{rout}" s str=$replace(str,"{rout}",RN) ;полное имя
 i str["{r.ext}" s str=$replace(str,"{r.ext}",$$ext(RN)) ;тип программы mac или int или cls
 i str["{pack.r}" s str=$replace(str,"{pack.r}",$$pack(RN)) ;пакет 
 i str["{r}" s str=$replace(str,"{r}",$$name(RN)) ;программа
 q str
 ;	d acc.getDocumentContent("","","","","notextended","ParamXML_Default,ParamXML_Disable","")
 ;	continue:$g(acc.DocumentContent(1,"ParamXML_Disable","value"))
ext(r) q $$name(r)_"."_$p(r,".",$l(r,"."))
pack(r) q $p(r,".",1,$l(r,".")-2)_"."_$$name(r)
name(r) q $p(r,".",$l(r,".")-2,$l(r,".")-1)
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br/>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ..DevName=$g(@$$$GNEnsConf@("DevUpdate","DevName"),"MSW")
	s ..FIK=$g(@$$$GNEnsConf@("DevUpdate","FIK")," #1")
	s ..DESC=$g(@$$$GNEnsConf@("DevUpdate","DESC"),"Описание")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SetGLOBAL">
<Description>
for controls.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DevName,fik,fikdesc</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 i $g(DevName)'="" s @$$$GNEnsConf@("DevUpdate","DevName")=DevName
 i $g(fikdesc)'="" s @$$$GNEnsConf@("DevUpdate","DESC")=fikdesc
 i $g(fik)'="" {
	 s @$$$GNEnsConf@("DevUpdate","FIK")=fik
	 ;История для будущего применения
	 s @$$$GNEnsConf@("DevUpdateHistory",fik)=$lb($g(@$$$GNEnsConf@("DevUpdate","DevName")),$g(@$$$GNEnsConf@("DevUpdate","DESC")),$g(@$$$GNEnsConf@("DevUpdate","FIK")))
 }
]]></Implementation>
</Method>
</Class>


<Class name="App.Form">
<Description>
Представление хранимых классов для просмотра и редактирования</Description>
<Abstract>1</Abstract>
<IncludeCode>App.LogMacro</IncludeCode>
<TimeChanged>65070,32912.768065</TimeChanged>
<TimeCreated>64751,31992.250217</TimeCreated>

<Parameter name="PREFIXFIELD">
<Description>
префикс у имени поля объекта</Description>
<Default>appfield</Default>
</Parameter>

<Method name="GetSubclassOf">
<Description>
Получить всех потомков для класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>super="App.Form"</FormalSpec>
<Implementation><![CDATA[
 set query=##class(%Library.ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")
 set st=query.Execute(super)
 Q query
]]></Implementation>
</Method>

<Method name="GetJsonProp">
<Description>
Получить расширенные свойства поля объекта</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj,propName,gn,out</FormalSpec>
<Implementation><![CDATA[
	set out("description")=..GetPropVal(obj,propName,.gn,"Description")
	set out("inputtype")=""
	if out("description")["{" {
		set json="{"_$p(out("description"),"{",2,*)
		try {
			;2017 set title={}.%FromJSON(json).title 
			;2016.1 set title={}.$fromJSON(json).title
			set out("title")={}.$$$jsonFromJSON(json).title
			set out("inputtype")={}.$$$jsonFromJSON(json).inputtype
			set out("displayname")={}.$$$jsonFromJSON(json).displayname
			set out("inputpattern")={}.$$$jsonFromJSON(json).inputpattern
			if $g(out("inputpattern"))="autocomplete" {
				s out("autocompleteMethod")={}.$$$jsonFromJSON(json).autocompleteMethod
			}
			elseif $g(out("inputpattern"))="files" {
				s out("filesMethod")={}.$$$jsonFromJSON(json).filesMethod
			}
			elseif $g(out("inputpattern"))["select" {
				s out("selectMethod")={}.$$$jsonFromJSON(json).selectMethod
			}
			set out("attr")={}.$$$jsonFromJSON(json).attr
			set out("onchange")={}.$$$jsonFromJSON(json).onchange
			set out("readOnly")={}.$$$jsonFromJSON(json).ReadOnly
			if out("displayname")'="" set out("description")=out("displayname")
			else  s out("description")=$p(out("description"),"{",1)
			// включим обработчик события
			if $g(out("onchange"))'="" {
				s out("attr")=out("attr")_" onchange='"_out("onchange")_"'" ;alert(this.value)'"
			}
			
		} catch e { w "Ошибка: "_$ze }
	}
	elseif out("description")="" {
		set out("description")=propName
	}
]]></Implementation>
</Method>

<Method name="GetPropVal">
<Description>
Получить все значения свойств</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj,propName,gn,nameAttr</FormalSpec>
<Implementation><![CDATA[
	q $g(gn("Properties",propName,nameAttr))
	;set col=$g(@gn@(-1,nameAttr))
	;quit:'col ""
	;quit $lg($g(@gn@(row)),col)
]]></Implementation>
</Method>

<Method name="ShowProp">
<Description>
Вывести строку свойств объекта</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj,propName,gn,PrefixIdDIV</FormalSpec>
<Implementation><![CDATA[
	set sysType=..GetPropVal(obj,propName,.gn,"Type")
	set Name=..GetPropVal(obj,propName,.gn,"Name")
	i Name="" q $$$ERROR($$$GeneralError,"No Exsist Property "_propName) 
	set Required=..GetPropVal(obj,propName,.gn,"Required")
	set ReadOnly=..GetPropVal(obj,propName,.gn,"ReadOnly")
	set Parameters=..GetPropVal(obj,propName,.gn,"Parameters")
	set Value=$property(obj,Name)
	set redstar="" i Required s redstar="<font color=red title='Обязательное поле'>*</font>"
	
	d ..GetJsonProp(obj, propName, .gn, .pr)
	i 'ReadOnly s ReadOnly=$g(pr("readOnly"))

	write "<tr title='"_$g(pr("title"))_"'>"
	set label=pr("description")_redstar
	if $g(pr("inputpattern"))="hidden" set label=""
	write "<td style='text-align: right;'><label>"_label_"</label></td>"
	write "<td style='text-align: left;'>"
	s pr("attr")=$g(pr("attr"))_" "_$s(Required:"Required",1:"")_$s(ReadOnly:"Disabled",1:"")
	s %id=$g(PrefixIdDIV)_..#PREFIXFIELD_Name
	s %val=$g(Value)
	s size=" size=50 " if pr("attr")["size" set size=""
	if sysType="%Boolean" {
		d ##class(App.Form).SelectFieldYesNo(%id,%val)
	}
	elseif sysType="%Date" {
	 	write $$$appText(%id," size=10 "_pr("attr"),%val)
	}
	else {  //%String
		if $g(pr("inputpattern"))="textarea" {
			if pr("attr")'["cols" s pr("attr")=pr("attr")_" cols=77 "
			if pr("attr")'["rows" s pr("attr")=pr("attr")_" rows=3 "
			w $$$appTextarea(%id,pr("attr"),%val)
		}
		elseif $g(pr("inputpattern"))="hidden" {
			w "<input type='hidden' id='"_%id_"' name='"_%id_"' "_$g(pr("attr"))_" value='"_%val_"'>"
		}
		elseif $g(pr("inputpattern"))="autocomplete" {
			s met=$g(pr("autocompleteMethod"))
			if met'=""  x "do "_met
			w $$$appAutocomplete(%id," "_pr("attr"),%val)
		}
		elseif $g(pr("inputpattern"))="files" {
			s met=$g(pr("filesMethod"))
			if met'="" 	s %obj=obj  x "do "_met
			w $$$appText(%id,size_pr("attr"),%val)
		}
		elseif $g(pr("inputpattern"))="select" {
			s met=$g(pr("selectMethod"))
			if met'="" {
				;;w met
				if (met["{") { //список из json
					;TODO
				}
				else { //список из функции
					x "do "_met
				}
			}
			;w $$$appInputHidden(.%id," "_attr,%val)
		}
		elseif $g(pr("inputpattern"))="selectize" {
			s met=$g(pr("selectMethod"))
			w "<input type='text' id='"_%id_"' name='"_%id_"' class='input-tags demo-default ui-corner-all ui-widget ui-widget-content' value='"_%val_"'>"
			if met'="" {
				x "do "_met
			}
		}
		elseif pr("inputtype")'="" {
			write $$$appInput(%id," type='"_pr("inputtype")_"' "_size_pr("attr"),%val)
		}
		elseif Parameters["{" {
			if {}.$$$jsonFromJSON(Parameters).VALUELIST'="" {
			  s vl={}.$$$jsonFromJSON(Parameters).VALUELIST
			  s dl={}.$$$jsonFromJSON(Parameters).DISPLAYLIST
			  ;	s ^tmpMSW(1,$i(^tmpMSW),"Parameters")=$lb(propName,vl,dl)
			  set:dl="" dl=vl
			  do ..SelectField($lfs(vl),,$lfs(dl),.gn2,,%id,%val,600)
			} else {
				w $$$appText(%id,size_pr("attr"),%val)
			}
		}
		else {w $$$appText(%id,size_pr("attr"),%val)
		}
	}
	write "</td></span>"
	write "</tr>"
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ObjectDelete">
<Description>
Сохранить обхект по умолчанию</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Param="",Ref=0</FormalSpec>
<Implementation><![CDATA[
	#dim obj As %Persistent
	set id=$p(Param,",")
	set Class=$p(Param,",",2)
	;m $$$AppL("MSW","req")=%request.Data
	if id="" w $$$appError("Неопределен идентификатор объекта")_"<br>" d:'Ref ..ButtonRef() q
	set obj=$classmethod(Class,"%OpenId",id)
	if '$isobject(obj) w $$$appError("Неопределен объект")_"<br>" d:'Ref ..ButtonRef() q
	set st=obj.%DeleteId(obj.%Id())
	if 'st w $$$appError($System.Status.GetErrorText(st)) w "<br>" d:'Ref ..ButtonRef() q
	write $$$appMsg("Объект удален")
	write "<br>" d:'Ref ..ButtonRef() 
	q
]]></Implementation>
</Method>

<Method name="ObjectSaveAsNew">
<Description>
Создать объект как новый</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Param=""</FormalSpec>
<Implementation><![CDATA[ d ..ObjectSave(","_$p(Param,",",2))
]]></Implementation>
</Method>

<Method name="ObjectNew">
<Description>
Создать новый объект по умолчанию</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Param=""</FormalSpec>
<Implementation><![CDATA[
 s obj=..GetObj(Param)
 d ..Show(obj,$p(Param,",",3,99))
 q $$$OK
]]></Implementation>
</Method>

<Method name="GetObj">
<Description>
Получить объект из параметра</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $p(Par,",",1) = "" s obj=$classmethod($p(Par,",",2),"%New")
	else  s obj=$classmethod($p(Par,",",2),"%OpenId",$p(Par,",",1))
	q obj
]]></Implementation>
</Method>

<Method name="ObjectSave">
<Description>
Сохранить объект по умолчанию</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Param="",Ref=0</FormalSpec>
<Implementation><![CDATA[
	set id=$p(Param,",")
	set Class=$p(Param,",",2)
	s PrefixIdDIV=$p(Param,",",3)
	if id="" s obj=$classmethod(Class,"%New")
	else  s obj=$classmethod(Class,"%OpenId",id)
	if '$isobject(obj) w $$$appError("Неопределен объект")_"<br>" d:'Ref ..ButtonRef() q ""
	;set gn="%prop"
	set st=..GetPropertyDefinition(obj,.gn)
	if 'st w $$$appError($System.Status.GetErrorText(st))_"<br>" d:'Ref ..ButtonRef() q ""
	set prefix=$g(PrefixIdDIV)_..#PREFIXFIELD
	set i=prefix
	;m $$$AppL("SPZ",".gn")=gn
	;m m=%request.Data	zw m
	for { set i=$o(%request.Data(i)) quit:i=""  quit:i'[prefix
			set nameProp=$p(i,prefix,2)
			s Value=$g(%request.Data(i,1))
			if ..GetPropVal(obj,nameProp,.gn,"Required"),Value="" {
				;получить свойство - описание pr("description")
				d ..GetJsonProp(obj, nameProp, .gn, .pr)
				s err=$g(err)_"<li>"_nameProp_" Обязательное поле пусто ("_$g(pr("description"))_")</li>" continue
			}
			;write "<li>"_nameProp_" "_$g(%request.Data(i,1))
			s $property(obj,nameProp)=Value
	}
	if $d(err) w "<br><br>"_$$$appError("Ошибки проверки свойств<hr>"_$g(err)) d:'Ref ..ButtonRef() q ""
	set st=obj.%Save(1)
	if 'st w "<br><br>"_$$$appError($System.Status.GetErrorText(st))_"<br>" d:'Ref ..ButtonRef() q ""
	write "<br><br>"_$$$appMsg("Сохранено")_"<br>" d:'Ref ..ButtonRef()
	quit obj
]]></Implementation>
</Method>

<Method name="GetPropertyDefinition">
<Description>
Получить список свойств класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj,gn</FormalSpec>
<Implementation><![CDATA[
	; Получим все свойства объекта
	;s sql="SELECT cls.Name, prop.Name, prop.Type, prop.Description FROM ""%Dictionary"".ClassDefinition cls  JOIN ""%Dictionary"".PropertyDefinition prop ON cls.Name = prop.parent WHERE cls.Name = '"_obj.%ClassName(1)_"'"
	set sql="SELECT * from ""%Dictionary"".PropertyDefinition where parent like '"_obj.%ClassName(1)_"'"
	;set st=##class(App.sys).SaveSQL(sql,gn,1)
	d ##class(App.LogInfoPane).GetClassDef(obj.%ClassName(1),"",.gn,0)
	;zw gn("Properties")
	quit 1
]]></Implementation>
</Method>

<Method name="SelectFieldYesNo">
<Description>
Вывод поля типа селект Да или нет
do ##class(App.Form).SelectFieldYesNo("test","0")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>idSelect="selectmenu",dfltKey=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..SelectField($lb(0,1),,$lb("Нет","Да"),.gn,,idSelect,dfltKey,100)
	q $$$OK
]]></Implementation>
</Method>

<Method name="SelectField">
<Description>
Вывод поля типа селект
do ##class(App.Form).SelectField($lb("",0,1),"alert(1);",$lb("","Нет","Да"),.gn,,"test","0",50) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>KeyList="",ONCHANGE="",ValueList="",gnRet,order=1,idSelect="selectmenu",dfltKey="",width=500,NoWrite=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill gnRet
	set selectNS="<SELECT id='"_idSelect_"' name='"_idSelect_"' "_$s(NoWrite:"ONCHANGE='"_ONCHANGE_"'",1:"")_">"
	;set selectNS=selectNS_" <OPTION  VALUE=''></OPTION>"
	set gnRet($i(gnRet))=selectNS
	for i=1:1:$ll(KeyList) { 
		;continue:$lg(KeyList,i)=""
		set selected=""
		if dfltKey'="",dfltKey=$lg(KeyList,i) s selected="selected"
		set select=" <OPTION "_$g(selected)_" VALUE="""_$lg(KeyList,i)_""">"_$lg(ValueList,i)_"</OPTION>"
  		set gnRet($i(gnRet))=select
	}
	set gnRet($i(gnRet))="</SELECT>"
	if NoWrite q $$$OK
	for i=1:1 {q:'$DATA(gnRet(i))  write gnRet(i)}
	$$$jsstart
		w "$( '#"_idSelect_"' ).selectmenu({ change: function( event, data ) { "_ONCHANGE_" }, width:"_width_" }).selectmenu('menuWidget');" ;;.selectmenu('refresh') .addClass('overflow');"
		w "$( '#"_idSelect_"-menu' ).css( 'max-height','500px');"
	$$$jsstop
	q $$$OK
]]></Implementation>
</Method>

<Method name="SelectObj">
<Description><![CDATA[
Получить объектов в селекторе для небольших выборок 
Возврат в одной строке или в глобале
sql - запрос
ONCHANGE = js функция на событие в селесторе ONCHANGE
ValueList = список полей для выводе в Value
gnRet - возвращаемый массив по ссылке
do ##class(App.Form).SelectObj("select * from Spgz_model.Packets","$('#MainContent').load('App.Action.cls','appClass=AsuPriz.MVK.ExportPackets&appMethod=ShowObj&appNsp="_$zu(5)_"&appPar='+this.options[this.selectedIndex].value);","segment1,segment1,Description,",.gn) ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql,ONCHANGE="",ValueList="",gnRet,idSelect="selectmenu"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill gnRet
	set gn="^||TempPack"
	set selectNS="<SELECT id='"_idSelect_"' > "
	set selectNS=selectNS_" <OPTION  VALUE=''></OPTION>"
	set gnRet($i(gnRet))=selectNS
	set st=##class(App.sys).SaveSQL(sql,gn)
	if 'st quit st
	if ValueList="" set ValueList=$lg(@gn@(0),1)_","_$lg(@gn@(0),1) ///Первое поле из запроса - должно быть идентификаторм
	set NameFieldVALUE=$p(ValueList,",",1)
	s ns=""
	for { s ns=$o(@gn@(ns)) Q:ns=""
		continue:ns<1
		set VALUE=$lg(##class(App.sys).GetValueGN(gn,ns,NameFieldVALUE),1)
		set OPTION=$e($lts(##class(App.sys).GetValueGN(gn,ns,$p(ValueList,",",2,*))," "),1,100)
		s select=" <OPTION "_$g(selected)_" VALUE="""_VALUE_""">"_OPTION_"</OPTION>"
  		set gnRet($i(gnRet))=select
	}
	set gnRet($i(gnRet))="</SELECT>"
	for i=1:1 {q:'$DATA(gnRet(i))  write gnRet(i)}
	$$$jsstart
		w "$( '#"_idSelect_"' ).selectmenu({ change: function( event, data ) { "_ONCHANGE_" }, width:1000 }).selectmenu('menuWidget');" ;;.selectmenu('refresh', true).addClass('overflow');"
		w "$( '#"_idSelect_"-menu' ).css( 'max-height','500px');"
	$$$jsstop
	quit $$$OK
]]></Implementation>
</Method>

<Method name="BlockUI">
<Description>
Блокировать или деблокировать экран
do ##class(App.Form).BlockUI(1,"Загрузка формы")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mode=1,msg="Загрузка"</FormalSpec>
<Implementation><![CDATA[
 $$$jsstart 
  w:mode $$$blockui(msg)
  w:'mode "$.unblockUI();"
 $$$jsstop
 q $$$OK
]]></Implementation>
</Method>

<Method name="Show">
<Description>
Показать объект 
Obj - экземпляр класса
Mode = 0 режим просмотра
Mode = 1 режим редактирования со всеми кнопками
Mode = "1,WithoutSave,WithoutDel,WithCreate" режим редактирования без кнопок</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj,Mode=0,PrefixIdDIV=""</FormalSpec>
<Implementation><![CDATA[
	if '$isobject(obj) w "Нет объекта" quit
	set st=..GetPropertyDefinition(obj,.gn)
	if 'st w $System.Status.GetErrorText(st) quit  ;##class(%Library.Global).Quote(
	set orderProp=obj.#AppORDERPROPERTY
	write "<table>"
	// Упорядоченный вывод полей
	if orderProp'="" {
		for i=1:1:$l(orderProp,",") { s nameProp=$ZStrip($p(orderProp,",",i),"<>WCP")
		 	continue:nameProp=""
			do ..ShowProp(obj,nameProp,.gn,PrefixIdDIV) ;gn("Properties")
		}
	} //вывод полей по умочанию
	else {
		set p=""
		for  { s p=$o(gn("Properties",p)) q:p=""  ;q:'$d(@gn@(p))  
			do ..ShowProp(obj,p,.gn,PrefixIdDIV)
		}
	}
	write "<tr><td style='text-align: right;'>"
		set onclick="$('#"_PrefixIdDIV_"MainContent').load('App.Action.cls',$('#"_PrefixIdDIV_"MainForm').serializeArray());"
		if Mode {
			;write "<input type=hidden name="_PrefixIdDIV_"appNsp id="_PrefixIdDIV_"appNsp value='"_$zu(5)_"'>"
			;write "<input type=hidden name="_PrefixIdDIV_"appClass id="_PrefixIdDIV_"appClass value='App.Form'>"
			;write "<input type=hidden name="_PrefixIdDIV_"appMethod id="_PrefixIdDIV_"appMethod value=''>"
			;write "<input type=hidden name="_PrefixIdDIV_"appPar id="_PrefixIdDIV_"appPar value='"_obj.%Id()_","_obj.%ClassName(1)_","_PrefixIdDIV_",~objId="_obj.%Id()_"~ClassName="_obj.%ClassName(1)_"~pref="_PrefixIdDIV_"'>"
			w $$$appInputHidden(""_PrefixIdDIV_"appNsp","",$zu(5))
			w $$$appInputHidden(""_PrefixIdDIV_"appClass","","App.Form")
			w $$$appInputHidden(""_PrefixIdDIV_"appMethod","","")
			w $$$appInputHidden(""_PrefixIdDIV_"appPar","",obj.%Id()_","_obj.%ClassName(1)_","_PrefixIdDIV_",~objId="_obj.%Id()_"~ClassName="_obj.%ClassName(1)_"~pref="_PrefixIdDIV)
			if Mode'["WithoutSave" {
				set buttval=$s(obj.%Id()'="":"Сохранить",1:"Создать")
				do ..ButtonMake(buttval,"$('#"_PrefixIdDIV_"appMethod').attr('value','ObjectSave');"_onclick,"appButtonSave")
			}
			if Mode'["WithoutDel" {
				if obj.%Id() w "&nbsp; " d ..ButtonMake("Удалить","if (confirm('Удалить, вы уверены ?')) {$('#"_PrefixIdDIV_"appMethod').attr('value','ObjectDelete');"_onclick_"}","appButtonDelete")
			}
			if obj.%Id(),Mode["WithCreate" {
			  w "&nbsp; " do ..ButtonMake("Сохранить как новый","$('#"_PrefixIdDIV_"appMethod').attr('value','ObjectSaveAsNew');"_onclick,"appButtonSaveAsNew")
			}
		}
		if Mode'["WithoutCancel" {
			write "</td><td style='text-align: left;'>"
				do ..ButtonMake("Отмена","","appButtonCancel")
			write "</td><tr>"
		}
	write "</table>"
	;do ##class(App.Form).BlockUI(0)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ButtonRef">
<Description>
Вывеcти кнопку сначало</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value="Сначала",onclick="top.document.location.reload();",id="appButtonRef"</FormalSpec>
<Implementation><![CDATA[
	do ..ButtonMake(value,onclick,id)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ButtonBack">
<Description>
Вывеcти кнопку назад</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value="Назад",onclick="window.history.back();",id="appButtonBack"</FormalSpec>
<Implementation><![CDATA[
	do ..ButtonMake(value,onclick,id)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ButtonMake">
<Description>
Вывеcти кнопку</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value="",onclick="",id</FormalSpec>
<Implementation><![CDATA[
  	write $$$appButton(id,"onclick="""_$g(onclick)_"""",value)
  	;w " <input id='appButtonSave' class='ui-button ui-corner-all ui-widget' type=button onclick='"_$g(onclick)_"' value='"_value_"'>"
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="App.FormExp">
<Modified>0</Modified>
<Super>App.AutoPage</Super>
<TimeChanged>64985,34433.5266</TimeChanged>
<TimeCreated>64760,78939.721801</TimeCreated>

<Parameter name="CSPURL">
<Default>App.FormExp.cls</Default>
</Parameter>

<Parameter name="PAGENAME">
<Expression>$s($mvv(58)="ru":"Навигатор",1:"Explorer")</Expression>
</Parameter>

<Parameter name="PARENTPAGE">
<Default>App.AutoPage.cls</Default>
</Parameter>

<Method name="GetDetailPane">
<Description>
Get the detail pane info object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%CSP.Util.Pane</ReturnType>
<Implementation><![CDATA[	quit ##class(App.FormExplorer).%New()
]]></Implementation>
</Method>
</Class>


<Class name="App.FormExplorer">
<Description>
</Description>
<IncludeCode>App.LogMacro</IncludeCode>
<Super>App.LogInfoPane</Super>
<TimeChanged>65084,29017</TimeChanged>
<TimeCreated>64760,79525.802682</TimeCreated>

<Method name="DrawBODY">
<Description>
Отрисовка формы для ввода информации</Description>
<FormalSpec>pInstance:PageInstance</FormalSpec>
<PublicList>nsp,what,field,value,type,typeclass,caption</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	do ##class(App.LogInfoPane).AddJsScripts("grid")
	set $ZT="errors"
	set nsp=%request.Get("NSP")
	if nsp'="" try {zn nsp set NSpace=nsp } catch e {}
	set NSpace=$zu(5)
	set SelClass=$tr(%request.Get("SelClass"),"_",".")
	// Навигатор по системе
	if %request.Get("panel")="AccordionExp" {
	&html<
	 <div id="accordion" style='width: 100%; height: 100%'>
		<h3 id=aNSPh>Namespace: <span id=aNSPhead></span></h3>
		<div id=aNSP></div>
		
		<h3 id=aCLSh >Classes: <span id=aCLShead></span></h3>
		<div id=aCLS></div>
		
		<h3 id=aOBJh>Objects: <span id=aOBJhead></span></h3>
		<div id=aOBJ></div>
		
		<h3 id=aPROh>Propertis: <span id=aPROhead></span></h3>
		<div id=aPRO></div>
	 </div>
	>
	$$$jsstart	// Загрузить список областей
		w "$( '#accordion' ).accordion({"
	 	w " collapsible: true, icons: { header: ""ui-icon-zoomin"",  headerSelected: ""ui-icon-zoomout"" }"
		w "});"
	    w " var Namespace = ["
    	s ns=##class(App.sys).ListNS(.info)
    	f i=1:1:$l(ns,",") {
    		continue:$p(ns,",",i)="%All"
    		continue:$p(ns,",",i)=""
    		w "{ ""Namespace"": """_$p(ns,",",i)_""" }"_$s($p(ns,",",i+1)="":"",1:",")
    	}
   		w "];"
    
    $$$jsstop
 	&js< <script>
    $("#aNSP").jsGrid({
        width: "*",
        height: "auto",
 
        inserting: false,
        editing: false,
        sorting: true,
        paging: true,
  		rowClick: function(args) {
            console.log(args.item);
            $("#aNSPhead").html(args.item.Namespace);
            $("#aCLS").empty();
            $("#aCLShead").html("");
			$.blockUI( { message: 'Идет загрузка' , css: { border: 'none', padding: '15px', backgroundColor: '#000', '-webkit-border-radius': '10px','-moz-border-radius': '10px', opacity: .5, color: '#fff' }} );
            $("#aCLS").load("App.Action.cls","appClass=App.FormExplorer&appMethod=Class2Grid&appNsp="+args.item.Namespace+"&appPar="+args.item.Namespace);
        },
        data: Namespace,
        fields: [
            { name: "Namespace", type: "text", width: 150, validate: "required" }
            
        ]
    });
	</script>>
	}
	/// Навигатор из ниспадающих списков
	else {
	&html<
		<!-- ui-dialog -->
	<div id="dialog" title="Dialog Title">
		<div id=dialogContent></div>
	</div>
		<form name="loginfo" id="loginfo">
		<table width="90%" style="border-radius: 10px; border: 1px solid #72a7cf" cellpadding="2" cellspacing="0" class="DetailTable" bgcolor="#c4d6d6" >
		<tr>
		  <td>#(##class(App.LogInfo).GetInfoImg("search"))# 
			 <DIV id=MainNamespaces></div>
			 <DIV id=MainClasses></div>
			 <DIV id=MainObjects></div>
			</td>
		 </tr>
		 <tr>
		   <td>
	 		<div id="MainContent">
	 		</div>
		   </td>
		 </tr>
		</table>
		>
		 $$$jsstart	// Загрузить список областей
		 	write "$('#MainNamespaces').load('App.Action.cls','appClass=App.FormExplorer&appMethod=SelectNsp&appNsp="_$zu(5)_"');"
		 	write "$('#MainClasses').load('App.Action.cls','appClass=App.FormExplorer&appMethod=SelectClasses&appNsp="_$zu(5)_"&appPar="_$g(SelClass)_"');"
		 $$$jsstop
		write "<br><br><form>"
	}
	quit $$$OK

errors
 	write !,$ze
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="Class2Grid">
<Description>
Cписок классов в виде таблицы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<Implementation><![CDATA[
	s ListClasses=""
	d ..SelectClasses("",.ListClasses)
	$$$jsstart	// Загрузить список классов
    w " var classes = ["
    	s i=""
    	f { s i=$o(ListClasses(i)) q:i=""
    		w "{ ""ClassNames"": """_i_""",""SuperClass"": """_$lg(ListClasses(i),3)_""" }"_$s($o(ListClasses(i))="":"",1:",")
    	}
   		 w "];"
    
    $$$jsstop
 	&js< <script>
 	 console.log(classes);
    $("#aCLS").jsGrid({
        width: "*",
        height: "auto",
        inserting: false,
        editing: false,
        sorting: true,
        paging: true,
  		rowClick: function(args) {
            console.log(args.item);
            $("#aCLShead").html(args.item.ClassNames);
            $("#aOBJ").empty();
            $("#aOBJhead").html("");
			$.blockUI( { message: 'Идет загрузка' , css: { border: 'none', padding: '15px', backgroundColor: '#000', '-webkit-border-radius': '10px','-moz-border-radius': '10px', opacity: .5, color: '#fff' }} );
            $("#aOBJ").load("App.Action.cls","appClass=App.FormExplorer&appMethod=Obj2Grid&appNsp="+$("#aNSPhead").html()+"&appPar="+args.item.ClassNames);
        },
        data: classes,
         fields: [
            { "name": "ClassNames", "type": "text", "width": "50%", "validate": "required" ,autosearch: true},
            { "name": "SuperClass", "type": "text", "width": "*", "validate": "required" }
                   
        ]
    });
      $("#aCLSh").click();
      $.unblockUI();
	</script>
	>
]]></Implementation>
</Method>

<Method name="Obj2Grid">
<Description>
Cписок экземпляров классов в виде таблицы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<Implementation><![CDATA[
	#define tra(%s) $zconvert(%s,"O","JS")
	s count=..GetCountTab(Par,.tab)
	s sql="select * from "_tab
	s gn="^Obj2Grid"
	d ##class(App.sys).SaveSQL(sql,gn)
	s nl=$c(13,10)
	$$$jsstart
   // Загрузить список полей запроса
      s field = "["
    	f f=1:1:$ll(@gn@(0)) { 
    		s field=field_"{ name: """_$$$tra($lg(@gn@(0),f))_""", type: ""text"", validate: ""required"" }"_$s($ll(@gn@(0))'=f:",",1:"")
    	}
   		 s field=field_"]"
   	w !,nl,"var field = "_field_";",!,nl
   	;w "var field2=JSON.parse(field);",!,nl
    // Загрузить список классов
    s max=$$$MAXSHOW
    w " var objects = [",!
    	s i="0"
    	f { s i=$o(@gn@(i)) q:i=""  q:i>max  ;ограничим
    		w "{ "
    		f f=1:1:$ll(@gn@(0)) {
	    		s val=$lg(@gn@(i),f)
	    		s:$l(val)>80 val=$e(val,1,50)_"..."
    			w """"_$$$tra($lg(@gn@(0),f))_""": """_$$$tra(val)_""" "_$s($ll(@gn@(0))'=f:",",1:"")
    		}
    		w "}"_$s($o(@gn@(i))'="":",",1:""),!
    	}
   		 w "];",!,nl
    	w "$('#aOBJhead').html('Total: "_+count_"');",!,nl
    $$$jsstop
 	&js< <script>
 	   $("#aPROhead").html("");
 	   console.log(objects);
    $("#aOBJ").jsGrid({
        width: "*",
        height: "auto",
        inserting: false,
        sorting: true,
        paging: true,
  		rowClick: function(args) {
            console.log(args.item);
            var pro='';
            for (var item in args.item) { // "foreach"
     		   console.log(args.item[ item ]);
     		   pro=pro+' '+args.item[ item ]
    		}
            $("#aPROhead").html(pro);
            $("#aPRO").load("App.Action.cls","appClass=App.FormExplorer&appMethod=PRO2Grid&appNsp="+$("#aNSPhead").html()+"&appPar="+args.item.ID+","+$("#aCLShead").html());
            $("#aPRO").click();
        },
        fields: field,
        data: objects
          
    });
 	$("#aOBJh").click();
  	$.unblockUI();
	$("#aPROhead").html("Создать новый");
	$("#aPRO").load("App.Action.cls","appClass=App.FormExplorer&appMethod=PRO2Grid&appNsp="+$("#aNSPhead").html()+"&appPar=,"+$("#aCLShead").html());
	</script>
	>
]]></Implementation>
</Method>

<Method name="PRO2Grid">
<Description>
Открыть экземпляр класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<Implementation><![CDATA[
	w "<form id='MainForm'><div id='MainContent'>"
	s class=$p(Par,",",2)
	s id=$p(Par,",",1)
	s obj=##class(App.Form).GetObj(Par)
	if '$isobject(obj) { 
		w $$$appError("Не удалось открыть объект")
	}
	else {
		;s mode="1,WithoutSave,WithoutDel,WithoutCancel"
		;if $g(%session.Data("debug")) 
		s mode=($roles["%All")_",WithoutCancel,WithCreate"
		d ##class(App.Form).Show(obj,mode)
	}
	$$$jsstart
	w "$('#aPRO').height('80%');"
	w:id'="" "$('#aPROh').click();"
 	$$$jsstop
	w "</div></form>"
	q $$$OK
]]></Implementation>
</Method>

<Method name="SelectNsp">
<Description>
Получить список областей в виде селекта</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<Implementation><![CDATA[
	set NSpace=$zu(5)
	// Получить список областей
	set listNs=##class(App.sys).ListNS(.info)
	s onc="$('#MainClasses').empty();$('#MainObjects').empty();$('#MainClasses').load('App.Action.cls','appClass=App.FormExplorer&appMethod=SelectClasses&appNsp='+this.options[this.selectedIndex].value+'&appPar='+this.options[this.selectedIndex].value);"
	set selectNS="<SELECT title=""Область"" name=""NSP"" id=""NSP""  > "
	for ns=1:1:$l(listNs,",") { continue:$p(listNs,",",ns)=""
		continue:$p(listNs,",",ns)["%ALL"
  		set selected=$select(NSpace=$p(listNs,",",ns):"selected",1:"")
  		set selectNS=selectNS_" <OPTION "_selected_" VALUE="""_$p(listNs,",",ns)_""">"_$p(listNs,",",ns)_"</OPTION>"
	}
	set selectNS=selectNS_"</SELECT>"
	write selectNS
	$$$jsstart
		w "$( '#NSP' ).selectmenu({ change: function( event, data ) { "_onc_" }, width:1000 }).selectmenu('menuWidget');" ;;.selectmenu('refresh', true).addClass('overflow');"
		w "$( '#NSP-menu' ).css( 'max-height','500px');"
	$$$jsstop
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SelectClasses">
<Description>
Получить список классов в виде селекта</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SelectClass="",ListClasses</FormalSpec>
<Implementation><![CDATA[
	set query=##class(%Library.ResultSet).%New("%Dictionary.ClassDefinition:Summary")
 	set st=query.Execute() ;"%Persistent")
	s onc="$('#MainObjects').load('App.Action.cls','appClass=App.FormExplorer&appMethod=SelectObjects&appNsp="_$zu(5)_"&appPar='+this.options[this.selectedIndex].value);"
 	set selectNS="<SELECT title=""Классы"" name=""SelClass"" id=""SelClass"" > "
 	while query.Next() { 
 		i 'query.Get("Persistent") continue
		s class=query.Get("Name"),f1=""
		i $zu(5)'="%SYS" continue:$e(class,1)="%"  
		i $e($zu(5),1,3)'="ENS" continue:$e(class,1,3)="Ens"
		set selected=""
		if class=SelectClass s selected="selected",forceONC=1
		if query.Get("Super")["App.Form" s f1="style='color:red;' title='Наследник App.Form'"
		set selectNS=selectNS_" <OPTION "_$g(selected)_" "_f1_" VALUE="""_class_""">"_class_"</OPTION>"
		i $D(ListClasses) s ListClasses(class)=$lb($g(selected),f1,query.Get("Super"),query.Get("System"),query.Get("TimeChanged"),,query.Get("SqlTableName"))
	}
	q:$D(ListClasses) $$$OK
	
	set selectNS=selectNS_"</SELECT>"
	write selectNS
	$$$jsstart
		w "$( '#SelClass' ).selectmenu({ change: function( event, data ) { "_onc_" }, width:1000 }).selectmenu('menuWidget');" ;;.selectmenu('refresh', true).addClass('overflow');"
		w "$( '#SelClass-menu' ).css( 'max-height','500px');"
	$$$jsstop
	if $g(forceONC) {
		$$$jsstart
			write "$('#MainObjects').load('App.Action.cls','appClass=App.FormExplorer&appMethod=SelectObjects&appNsp="_$zu(5)_"&appPar="_SelectClass_"');"
		$$$jsstop
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCountTab">
<Description>
Получить Количество записей таблицы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[SelectClass,&tab]]></FormalSpec>
<Implementation><![CDATA[
	s (tab,table)=$p(SelectClass,".",*)
	//Если имя таблицы - ключевое слов, обрамим в кавычки
	s:$SYSTEM.SQL.IsReservedWord(table) table = """"_table_""""
	s tab=$tr($p(SelectClass,"."_tab,1),".","_")_"."_table
	s sql="select * from "_tab
	s gn="^||tmpCount"
	d ##class(App.sys).SaveSQL("select count(*) from "_tab,gn)
	s count=+$lg($g(@gn@(1)),1)
	q count
]]></Implementation>
</Method>

<Method name="SelectObjects">
<Description>
Получить список экземпляров класса в виде таблицы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SelectClass</FormalSpec>
<Implementation><![CDATA[

	s count=..GetCountTab(SelectClass,.tab)
	s sql="select * from "_tab
	s add=" <span style='"_$$$styleurl_"' onclick=""$('#MainObjEdit').load('App.Action.cls','appClass=App.FormExplorer&appMethod=PRO2Grid&appNsp="_$zu(5)_"&appPar=,"_SelectClass_"');"" title='Создать объект' >Создать</span><DIV id=MainObjEdit></div>"
	$$$jsstart
		write "$('#MainObjEdit').empty();"
	$$$jsstop
	s %SelectClass=SelectClass
	set exec="##class(App.FormExplorer).EditObj(.%AppLogInfoVal, %AppLogInfoCol, %AppLogInfoHead, .%AppLogInfoTemp,"""_$zu(5)_""")"
	set st=##class(App.LogInfoPane).DrawSQL(sql,$$$MAXSHOW,$zu(5),sql_" <a target=SelectQ href='App.LogInfo.cls?NSP="_$zu(5)_"&WHAT="_sql_"' title='Перейти на панель запросов'>Запрос</a> count(*)="_count_" "_add,exec)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="EditObj">
<Description>
Формировать активные ссылки для редактирования</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Val,Col,Head,Temp,nspace,DSN</FormalSpec>
<Implementation><![CDATA[
	s res=Val
	if $g(Head) {
		i $g(Val)="ID" s Temp("ID",Col)=""
	}
	else {
		i $D(Temp("ID",Col)) {
			s res=$replace(Val,Val,"<span style='"_$$$styleurl_"' onclick=""$('#MainObjEdit').load('App.Action.cls','appClass=App.FormExplorer&appMethod=PRO2Grid&appNsp="_nspace_"&appPar="_Val_","_%SelectClass_"');"" >"_Val_"</span>")
		}
	}
	q res
]]></Implementation>
</Method>
</Class>


<Class name="App.Installer">
<Description>
Importing this class will install App Tools properly.
fork from </Description>
<IncludeCode>App.LogMacro</IncludeCode>
<Super>%Projection.AbstractProjection</Super>
<TimeChanged>65084,30157.530543</TimeChanged>
<TimeCreated>63890,71053.144208</TimeCreated>

<Parameter name="DispatchClass">
<Default>App.RestMetrics</Default>
</Parameter>

<Parameter name="ResourceName">
<Default>%AppTools</Default>
</Parameter>

<Parameter name="Repository">
<Default>cache-iris-app-tools</Default>
</Parameter>

<Parameter name="RoleName">
<Default>AppTools</Default>
</Parameter>

<Parameter name="AppRest">
<Default>apptoolsrest</Default>
</Parameter>

<Parameter name="AppCSP">
<Default>apptools</Default>
</Parameter>

<Parameter name="AppName">
<Default>AppTools</Default>
</Parameter>

<Projection name="Reference">
<Type>Installer</Type>
</Projection>

<Parameter name="VERSION">
<Default>1.0</Default>
</Parameter>

<Method name="CreateProjection">
<Description>
This method is invoked when a class is compiled.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	m $$$AppL("MSW","cls")=cls
	m $$$AppL("MSW","params")=params
	s $$$AppL("MSW","cls")=$$LOG^%ETN
	new $Namespace
	set ns = $Namespace // ought to be package home namespace!
	if $g(@$$$GNEnsConf@("HomeNamespace"))'="",$g(@$$$GNEnsConf@("HomeNamespace"))'=ns {
		 QUIT $$$OK
	}
	if $g(@$$$GNEnsConf@("HomeNamespace"))="" {
	;Заполнение глобала значениями по умолчанию
	 set @$$$GNEnsConf@("DBCACHESizeMon")="CACHESYS,CACHEAUDIT"
	 set @$$$GNEnsConf@("EMAILAUTH")="mail@server.com"
	 set @$$$GNEnsConf@("EMAILAUTHPASS")=12345
	 set @$$$GNEnsConf@("EMAILSERVERIP")="127.0.0.1"
	 set @$$$GNEnsConf@("EMAILSERVERPORT")=25
	 set @$$$GNEnsConf@("EMAILSUPPORT")="admin@server.com"
	 set @$$$GNEnsConf@("EMAILXLSPATH")="c:\temp\"
	 set @$$$GNEnsConf@("EXPORDPROJPATH")="c:\temp\source\"
	 set @$$$GNEnsConf@("Language")="en"
	}
    set @$$$GNEnsConf@("HomeNamespace") = ns
    write !, "Installing "_..#AppName_" application to " _ ns
    set dbdir = $$$defdir
    try {
        set $Namespace = "%SYS"
    } catch (e) {
        set mes = "<PROTECT> The user " _ $Username _ " has no privileges"
            _ " to enter the %SYS namespace. Please, log in as a privileged user"
            _ " to set up the "_..#AppName_" application."
        set err = $$$ERROR($$$GeneralError, mes)
        write !, mes
        return err
    }
    
   	s result=##CLASS(%ResultSet).%New("%DynamicQuery:SQL")
	s tSC=result.Prepare("select * FROM Security.Applications where Name=?")
	s:tSC tSC=result.Execute("/csp/"_ns)
	i '$$$ISOK(tSC) {
		s text="Ошибка настройки приложений :"_$SYSTEM.Status.GetErrorText(tSC)  w !,text QUIT $$$ERROR(text)
	}
	else {
		while result.Next() {
			set cspProperties("Path")=result.Data("Path")
		}
	}
    ;zw cspProperties
    set cspProperties("AutheEnabled") = $$$AutheCache
    set cspProperties("NameSpace") = ns
    set cspProperties("Description") = "A WEB application for "_..#AppName_"."
    set cspProperties("IsNameSpaceDefault") = $$$NO
    set st = ..RegisterWebApplication("/"_..#AppCSP, .cspProperties)
    return:$$$ISERR(st) st
    
    d ##class(App.net).ImportCSPFromGitHub("https://codeload.github.com/SergeyMi37/"_..#Repository_"/zip/master",..#Repository,cspProperties("Path"))
    
	s @$$$GNEnsConf@("CSP-Path")=cspProperties("Path")
	KILL cspProperties("Path")
	
    set cspProperties("AutheEnabled") = $$$AutheCache
    set cspProperties("NameSpace") = ns
    set cspProperties("Description") = "A WEB application for "_..#AppName_"."
    set cspProperties("IsNameSpaceDefault") = $$$NO
    set cspProperties("DispatchClass") = ..#DispatchClass
    set st = ..RegisterWebApplication("/"_..#AppRest, .cspProperties)
    return:$$$ISERR(st) st
 
    do ..CreateAllNamespace()
    
    write !, "Mapping "_..#AppName_" package into all namespaces:"
    set st = ..Map(ns)
    if ($$$ISERR(st)) {
        do $System.Status.DisplayError(st)
    } else {
	    write !, ""_..#AppName_" package successfully mapped into all namespaces."
    }

    if (##class(Security.Resources).Exists(..#ResourceName) = 0) {
        set st = ##class(Security.Resources).Create(..#ResourceName,
            "Grants access to "_..#AppName_" if set up.", "")
    }

    if (##class(Security.Roles).Exists(..#RoleName) = 0) {
        set st = ##class(Security.Roles).Create(..#RoleName,
            "AppTools user role which may grant access to /"_..#AppCSP_" application if set up.",
            ..#ResourceName_":RWU")
    }
    
    return st
]]></Implementation>
</Method>

<Method name="RegisterWebApplication">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,spec</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    new $Namespace
    set $Namespace = "%SYS"
    set st = $$$OK
    if ('##class(Security.Applications).Exists(name)) {
        write !,"Creating WEB application """_name_"""..."
        set st = ##class(Security.Applications).Create(name, .spec)
        write !, "WEB application """_name_""" is created."
    } else { // ensure configuration matches in case of updating from old terminal versions
        write !, "Updating web application """_name_"""..."
        set st = ##class(Security.Applications).Modify(name, .spec)
        write !, "WEB application """_name_""" is updated."
    }
    return st
]]></Implementation>
</Method>

<Method name="RemoveWebApplication">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<Implementation><![CDATA[
    new $Namespace
    set $Namespace = "%SYS"
    set st = $$$OK
    if (##class(Security.Applications).Exists(name)) {
        do ##class(Security.Applications).Get(name, .props)
        if (props("DispatchClass") '= ..#DispatchClass) && (name = "/"_..#AppCSP) {
            write !, "Won't delete WEB-application """_name_""" because it does not refer to dispatch class anymore."
        } else {
            write !, "Deleting WEB application """_name_"""..."
            set st = ##class(Security.Applications).Delete(name)
            write !, "WEB application """_name_""" was successfully deleted."
        }
    }
    return st
]]></Implementation>
</Method>

<Method name="RemoveProjection">
<Description>
This method is invoked when a class is 'uncompiled'.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params,recompile:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new $Namespace

	write:(recompile) !, "Recompiling "_..#AppName_", skipping the deletion..."
    return:(recompile) $$$OK

	set ns = $get(@$$$GNEnsConf@("HomeNamespace"), $Namespace)
    write !, "Uninstalling "_..#AppName_" application from ", ns
    zn "%SYS"
    set st = ..RemoveWebApplication("/"_..#AppCSP)
    return:($$$ISERR(st)) st
    
    set st = ..RemoveWebApplication("/"_..#AppRest)
    return:($$$ISERR(st)) st
    
    if (##class(Security.Resources).Exists(..#ResourceName) = 1) {
        set st = ##class(Security.Resources).Delete(..#ResourceName)
        return:($$$ISERR(st)) st
    }
    if (##class(Security.Roles).Exists(..#RoleName) = 1) {
        set st = ##class(Security.Roles).Delete(..#RoleName)
        return:($$$ISERR(st)) st
    }

    kill:st @$$$GNEnsConf
    write !, "Global "_$$$GNEnsConf_" removed."

    write !, "Unmapping App package from all namespaces:"
	set st = ..UnMap(ns)
    if ($$$ISERR(st)) {
        do $System.Status.DisplayError(st)
       
    } else {
	    write !, "Unmapping complete."
    }

    return st
]]></Implementation>
</Method>

<Method name="CreateAllNamespace">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new $Namespace
    set $Namespace = "%SYS"
	set ns = "%All"
	set st = $$$OK
	if ('##Class(Config.Namespaces).Exists(ns)) {

        if ($system.Version.GetISCProduct() >= 4) {
            set Properties("Globals") = "IRISTEMP"
            set Properties("Library") = "IRISLIB"
            set Properties("Routines") = "IRISTEMP"
            set Properties("SysGlobals") = "IRISSYS"
            set Properties("SysRoutines") = "IRISSYS"
            set Properties("TempGlobals") = "IRISTEMP"
        } else {
            set Properties("Globals") = "CACHETEMP"
            set Properties("Library") = "CACHELIB"
            set Properties("Routines") = "CACHETEMP"
            set Properties("SysGlobals") = "CACHESYS"
            set Properties("SysRoutines") = "CACHESYS"
            set Properties("TempGlobals") = "CACHETEMP"
        }
		
		set st = ##Class(Config.Namespaces).Create(ns, .Properties)
		if ($$$ISERR(st)) {
        	do $System.Status.DisplayError(st)
    	} else {
        	write !, "%All namespace is created."
    	}
	}
	return st
]]></Implementation>
</Method>

<Method name="Map">
<ClassMethod>1</ClassMethod>
<FormalSpec>fromNS=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new $Namespace
    set $Namespace = "%SYS"
    set st = $$$OK

    set mapTo = $LISTBUILD("%All", "SAMPLES", "DOCBOOK")
    do ##Class(Config.Namespaces).Get(fromNS, .InstallNSProps)
    set Properties("Database") = $get(InstallNSProps("Routines"))
    set ptr = 0
    while $LISTNEXT(mapTo, ptr, namespace) {
        continue:(fromNS = namespace)
        continue:('##Class(Config.Namespaces).Exists(namespace))
        write " ", namespace
        if ('##Class(Config.MapPackages).Exists(namespace, "App")) {
        	set st1 = ##Class(Config.MapPackages).Create(namespace, "App", .Properties)
        }
        if ('##Class(Config.MapGlobals).Exists(namespace, "App")) {
	        set st2 = ##Class(Config.MapGlobals).Create(namespace, "App", .Properties)
        }
        set st = $$$ADDSC(st,$$$ADDSC($get(st1,$$$OK),$get(st2,$$$OK)))
    }
    return st
]]></Implementation>
</Method>

<Method name="UnMap">
<ClassMethod>1</ClassMethod>
<FormalSpec>fromNS:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new $Namespace
    set $Namespace = "%SYS"
    set st = $$$OK
    
	set mapTo = $LISTBUILD("%All", "SAMPLES", "DOCBOOK")
    set ptr = 0
    while $LISTNEXT(mapTo, ptr, namespace) {
	    continue:(fromNS = namespace)
	    continue:('##Class(Config.Namespaces).Exists(namespace))
        write " ", namespace
        if (##Class(Config.MapPackages).Exists(namespace, "App")) {
        	set st1 = ##Class(Config.MapPackages).Delete(namespace, "App", .Properties)
        }
        if (##Class(Config.MapGlobals).Exists(namespace, "App")) {
	        set st2 = ##Class(Config.MapGlobals).Delete(namespace, "App", .Properties)
        }
        set st = $$$ADDSC(st,$$$ADDSC($get(st1,$$$OK),$get(st2,$$$OK)))
    }
    return st
]]></Implementation>
</Method>
</Class>


<Routine name="App.JsonUtils" type="INC" timestamp="65073,42352.807516"><![CDATA[
#include %occReference
#if $$$comClassDefined("%Library.Object")
    #define jsonClassIsLatestVersion $classIsLatestVersion 	
    						//usage: obj.$$$jsonClassIsLatestVersion()
    #define jsonExtends $extends							
    						//usage: {}.$$$jsonExtends(classname) 
    #define jsonFromJSON $fromJSON							
    						//usage: {}.$$$jsonFromJSON(string) 
    #define jsonGetIterator $getIterator 					
    						//usage: obj.$$$jsonGetIterator()
    #define jsonGetNext $getNext 					
    						//usage: iterator.$$$jsonGetNext(.key, .value)
    #define jsonIsA $isA									
    						//usage: obj.$$$jsonIsA(classname)
    #define jsonToJSON $toJSON								
    						//usage: obj.$$$jsonToJSON()
    #define jsonGet $get									
    						//usage: obj.$$$jsonGet(key)
    #define jsonIsDefined $isDefined						
    						//usage: obj.$$$jsonIsDefined(key) 
    #define jsonRemove $remove								
    						//usage: obj.$$$jsonRemove(key)
    #define jsonSet $set									
    						//usage: obj.$$$jsonSet(key, val)
    #define jsonSize $size									
    						// usage: obj.$$$jsonSize()
    #define jsonPop $pop									
    						//usage: obj.$$$jsonPop()
    #define jsonPush $push									
    						//usage: obj.$$$jsonPush(val) 
 	#define jsonAbstractClass %Library.AbstractObject
	#define jsonObjectClass %Library.Object
	#define jsonArrayClass %Library.Array

	#define jsonInitialArrayIndex 0
#else
    #define jsonClassIsLatestVersion %ClassIsLatestVersion 	
    						//usage: obj.$$$jsonClassIsLatestVersion()
    #define jsonExtends %Extends							
    						//usage: {}.$$$jsonExtends(classname) 
    #define jsonFromJSON %FromJSON							
    						//usage: {}.$$$jsonFromJSON(string) 
    #define jsonGetIterator %GetIterator 					
    						//usage: obj.$$$jsonGetIterator()
	#define jsonGetNext %GetNext 					
    						//usage: iterator.$$$jsonGetNext(.key, .value)
	#define jsonIsA %IsA									
    						//usage: obj.$$$jsonIsA(className)
    #define jsonToJSON %ToJSON								
    						//usage: obj.$$$jsonToJSON()
    #define jsonGet %Get									
    						//usage: obj.$$$jsonGet(key)
    #define jsonIsDefined %IsDefined						
    						//usage: obj.$$$jsonIsDefined(key) 
    #define jsonRemove %Delete								
    						//usage: obj.$$$jsonRemove(key)
    #define jsonSet %Set									
    						//usage: obj.$$$jsonSet(key, val)
    #define jsonSize %Size									
    						//usage: obj.$$$jsonSize()
    #define jsonPop %Pop									
    						//usage: obj.$$$jsonPop()
    #define jsonPush %Push									
    						//usage: obj.$$$jsonPush(val) 
	#define jsonAbstractClass %Library.AbstractDynamicObject
	#define jsonObjectClass %Library.DynamicObject
	#define jsonArrayClass %Library.DynamicArray
	
	#define jsonInitialArrayIndex 1
#endif

#def1arg jsonIsAbstract %IsA(##Quote($$$jsonAbstractClass))
							//usage: obj.$$$jsonIsAbstract
#def1arg jsonIsObject %IsA(##Quote($$$jsonObjectClass))
							//usage: obj.$$$jsonIsObject
#def1arg jsonIsArray %IsA(##Quote($$$jsonArrayClass))
							//usage: obj.$$$jsonIsArray
]]></Routine>


<Class name="App.Log">
<Description>
Updated at 12/08/2017 16:09:03</Description>
<Super>%Persistent</Super>
<TimeChanged>65084,77072.112909</TimeChanged>
<TimeCreated>63685,63064.148177</TimeCreated>

<Parameter name="Null">
<Description>
Replacement for missing values</Description>
<Default>Null</Default>
</Parameter>

<Property name="EventType">
<Description>
Type of event</Description>
<Type>%String</Type>
<InitialExpression>"INFO"</InitialExpression>
<Parameter name="MAXLEN" value="10"/>
<Parameter name="VALUELIST" value=",NONE,FATAL,ERROR,WARN,INFO,STAT,DEBUG,RAW"/>
</Property>

<Property name="ClassName">
<Description>
Name of class, where event happened</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MethodName">
<Description>
Name of method, where event happened</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Source">
<Description>
Line of int code</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="UserName">
<Description>
Cache user</Description>
<Type>%String</Type>
<InitialExpression>$username</InitialExpression>
<Parameter name="MAXLEN" value="128"/>
</Property>

<Property name="Arguments">
<Description>
Arguments' values passed to method</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TimeStamp">
<Description>
Date and time</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h, 3, 1)</InitialExpression>
</Property>

<Property name="Job">
<Description>
Identifies the job from which this event was logged.</Description>
<Type>%String</Type>
<InitialExpression>$job</InitialExpression>
</Property>

<Property name="Message">
<Description>
User message</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ClientIPAddress">
<Description>
User IP address</Description>
<Type>%String</Type>
<InitialExpression>..GetClientAddress()</InitialExpression>
<Parameter name="MAXLEN" value="32"/>
</Property>

<Index name="idxEventType">
<Type>bitmap</Type>
<Properties>EventType</Properties>
</Index>

<Index name="idxUserName">
<Type>bitmap</Type>
<Properties>UserName</Properties>
</Index>

<Index name="idxClassName">
<Type>bitmap</Type>
<Properties>ClassName</Properties>
</Index>

<Index name="idxTimeStamp">
<Type>bitslice</Type>
<Properties>TimeStamp</Properties>
</Index>

<Index name="idxClientIPAddress">
<Properties>ClientIPAddress</Properties>
</Index>

<Method name="GetClientAddress">
<Description>
Determine user IP address</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// %CSP.Session source is preferable
	#dim %request As %CSP.Request
	If ($d(%request)) {
		Return %request.CgiEnvs("REMOTE_ADDR")
	}
	Return $system.Process.ClientIPAddress()
]]></Implementation>
</Method>

<Method name="AddRecord">
<Description>
Add new log event
Use via $$$LogEventTYPE().
Return ID log</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String="",MethodName:%String="",Source:%String="",EventType:%String="",Arguments:%String="",Message:%String=""</FormalSpec>
<Implementation><![CDATA[
	try {
		Set record = ..%New()
		Set record.Arguments = Arguments
		Set record.ClassName = ClassName
		Set record.EventType = EventType
		Set record.Message = Message
		Set record.MethodName = MethodName
		Set record.Source = Source
		set sc=record.%Save()
		set:sc id=record.%Id()
	} catch err {
		set id=""
	}
	
	quit $g(id)
]]></Implementation>
</Method>

<Method name="GetMethodArguments">
<Description>
Entry point to get method arguments string </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String,MethodName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set list = ..GetMethodArgumentsList(ClassName,MethodName)
	Set string = ..ArgumentsListToString(list)
	Return string
]]></Implementation>
</Method>

<Method name="GetMethodArgumentsList">
<Description>
Get a list of method arguments</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String,MethodName:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set result = ""
	Set def = ##class(%Dictionary.CompiledMethod).%OpenId(ClassName _ "||" _ MethodName)
	If ($IsObject(def)) {
		Set result = def.FormalSpecParsed
	}
	Return result
]]></Implementation>
</Method>

<Method name="ArgumentsListToString">
<Description>
Convert list of method arguments to string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>List:%List</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result = ""
	For i=1:1:$ll(List) {
		Set result = result _ $$$quote($s(i>1=0:"",1:"; ") _ $lg($lg(List,i))_"=") 
		_ ..GetArgumentValue($lg($lg(List,i)),$lg($lg(List,i),2))
		_$S(i=$ll(List)=0:"",1:$$$quote(";"))
	}
	Return result
]]></Implementation>
</Method>

<Method name="GetArgumentValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String,ClassName:%Dictionary.CacheClassname</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $ClassMethod(ClassName, "%Extends", "%RegisteredObject") {
		// it's an object
		Return "_##class(App.Log).SerializeObject("_Name _ ")_"
	} Else {
		// it's a datatype
		Return "_$g(" _ Name _ ","_$$$quote(..#Null)_")_"
	}
]]></Implementation>
</Method>

<Method name="SerializeObject">
<Description>
Сериализация объекта в json
obj - объект
gn - глобальная ссылка для сохранения потока
mode - режима сохранения объекта см: /csp/log/App.LogInfo.cls?WHAT=?
w ##class(App.Log).SerializeObject(obj,"^gn","sveta")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Object,gn="",mode=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Return:'$IsObject(Object) Object
	if $ClassMethod(Object.%ClassName(1), "%Extends", "%Stream.Object") {
		d Object.Rewind() while '(Object.AtEnd) { 
			set:gn'="" @gn@($i(inc))=$zconvert(Object.Read(32000),"I","UTF8")
		}
		Return Object.%ClassName(1)_" %Extends %Stream.Object"
	} 
	Return ..WriteJSONFromObject(Object)
]]></Implementation>
</Method>

<Method name="WriteJSONFromObject">
<Description>
w ##class(App.Log).WriteJSONFromObject(b)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Object</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    // Create a string that we will redirect to
    Set zsStr = ""

    Use $io::("^"_$ZNAME)

    // Enable redirection
    Do ##class(%Device).ReDirectIO(1)
 
    // Any write statements here will be redirected to the labels defined below
    Do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(Object)
 
    // Disable redirection
    Do ##class(%Device).ReDirectIO(0)
    
    Return zsStr
 
    // Labels that allow for IO redirection
    // Read Character - we don't care about reading
rchr(c)      Quit
    // Read a string - we don't care about reading
rstr(sz,to)  Quit
    // Write a character - call the output label
wchr(s)      Do output($char(s))  Quit
    // Write a form feed - call the output label
wff()        Do output($char(12))  Quit
    // Write a newline - call the output label
wnl()        Do output($char(13,10))  Quit
    // Write a string - call the output label
wstr(s)      Do output(s)  Quit
    // Write a tab - call the output label
wtab(s)      Do output($char(9))  Quit
    // Output label - this is where you would handle what you actually want to do.
    // in our case, we want to write to Str
output(s)    Set zsStr = zsStr_s Quit
]]></Implementation>
</Method>

<Method name="Load">
<Description>
Загрузить контекст из протокольного глобала
Пример: d ##class(App.Log).Load("^logMSWstack(3)")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gn</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:gn'["^"||('$d(@gn)) $$$OK
	set key = ""
	if gn'["varList" {
		set GN=$na(@gn@("varList"))
		For { set key=$order(@GN@(key)) quit:key=""
			continue:key["%%%$$LOG^%ETN"||(key["%AppLogId")
			if key="%zlog" {
				set keyzlog="" 
				for { set keyzlog=$order(@GN@(key,keyzlog)) 
					quit:keyzlog=""
					do LoadNode($na(@GN@(key,keyzlog)),keyzlog)
				}
			} else {
				do LoadNode($na(@GN@(key)),key)
			}
		}
	} else {
		do LoadNode(gn,$qs(gn,$ql(gn)))
	}
	Kill key,gn,GN
	Return $$$OK
LoadNode(GNkey,key)
	try {
		// Если в json есть _class
		if $Get(@GNkey)["_class"":" {
			set @key = ..DeserializeObject($Get(@GNkey),$p($p($Get(@GNkey),"_class"":",2),$c(34),2))
		}
		else {
			set @key=$Get(@GNkey)
		}
	} catch e { set LastErrorLoad=$ze}
	q
]]></Implementation>
</Method>

<Method name="LoadContext">
<Description>
Загрузить контекст из таблицы протокола</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Id</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:'..%ExistsId(Id) $$$OK
	Set Obj = ..%OpenId(Id)
	Set Arguments = Obj.Arguments
	Set List = ..GetMethodArgumentsList(Obj.ClassName,Obj.MethodName)
	For i=1:1:$Length(Arguments,";")-1 {
		Set Argument = $Piece(Arguments,";",i)
		Set @$lg($lg(List,i)) = ..DeserializeObject($Piece(Argument,"=",2,*),$lg($lg(List,i),2))
	}
	Kill Obj,Arguments,Argument,i,Id,List
]]></Implementation>
</Method>

<Method name="DeserializeObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>String,ClassName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $ClassMethod(ClassName, "%Extends", "%RegisteredObject") {
		// it's an object
		Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(String,,.obj)
		Return:$$$ISOK(st) obj
	}
	Return String
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^App.LogD</DataLocation>
<DefaultData>LogDefaultData</DefaultData>
<IdLocation>^App.LogD</IdLocation>
<IndexLocation>^App.LogI</IndexLocation>
<StreamLocation>^App.LogS</StreamLocation>
<Data name="LogDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EventType</Value>
</Value>
<Value name="3">
<Value>ClassName</Value>
</Value>
<Value name="4">
<Value>UserName</Value>
</Value>
<Value name="5">
<Value>MethodName</Value>
</Value>
<Value name="6">
<Value>Arguments</Value>
</Value>
<Value name="7">
<Value>TimeStamp</Value>
</Value>
<Value name="8">
<Value>Message</Value>
</Value>
<Value name="9">
<Value>ClientIPAddress</Value>
</Value>
<Value name="10">
<Value>Source</Value>
</Value>
<Value name="11">
<Value>Job</Value>
</Value>
</Data>
</Storage>

<Query name="FindLog">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT %ID,ClassName,ClientIPAddress,EventType,Message,MethodName,Source,TimeStamp,UserName FROM Log</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>
</Class>


<Class name="App.LogInfo">
<IncludeCode>App.LogMacro</IncludeCode>
<Modified>0</Modified>
<Super>App.AutoPage</Super>
<TimeChanged>65072,59253.865314</TimeChanged>
<TimeCreated>64621,44286.491046</TimeCreated>

<Parameter name="CSPURL">
<Default>App.LogInfo.cls</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>App.Tools</Default>
</Parameter>

<Parameter name="PARENTPAGE">
<Default>App.AutoPage.cls</Default>
</Parameter>

<Method name="GetDetailPane">
<Description>
Get the detail pane info object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%CSP.Util.Pane</ReturnType>
<Implementation><![CDATA[	quit ##class(App.LogInfoPane).%New()
]]></Implementation>
</Method>

<Method name="ClearFields">
<Description>
Получить INPUT кнопку для очистки полей формы
fields - имена полей через запятую
w ##class(App.LogInfo).ClearFields("a,b")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fields=""</FormalSpec>
<Implementation><![CDATA[
	;set res="<input type=button name='clearFields' id='clearFields' onclick=""#"" value=X title='Очистить поля'>"
	set res="<span class='ui-icon ui-icon-trash' name='clearFields' id='clearFields' onclick=""#"" title='Очистить поля'></span>"
	for f=1:1:$l(fields,",") {
		continue:$p(fields,",",f)=""
		s onclick=$g(onclick)_"try{document.getElementById('"_$p(fields,",",f)_"').value=''}catch(e){};"
	}
	quit $replace(res,"#",$g(onclick,"alert('Нет полей');"))
]]></Implementation>
</Method>

<Method name="MarkRed">
<Description>
Пометить красным контекст в исходной строки
Source - Исходная строка
Mark - контекст для пометки через запятую
w ##class(App.LogInfo).MarkRed("ssssazzzzbssss","a,b")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Source,Mark</FormalSpec>
<Implementation><![CDATA[
	set res=Source
	for f=1:1:$l(Mark,",") {
		continue:$p(Mark,",",f)=""
		s res=$replace(res,$p(Mark,",",f),"<font color=red>"_$p(Mark,",",f)_"</font>")
	}
	quit res
]]></Implementation>
</Method>

<Method name="IncludTags">
<Description>
Включить в строку обрамление тэга
Source - Исходная строка
Mark - контекст из фраз для вставки это список
TagBeg, TagEnd - обрамление тэга для каждой фразы должен быть свой, список
w ##class(App.LogInfo).IncludTags("ssssazzzzbssss","a,b",")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Source,Mark,TagBeg,TagEnd</FormalSpec>
<Implementation><![CDATA[
	set res=Source
	for f=1:1:$ll(Mark) {
		continue:$lg(Mark,f)=""
		s res=$replace(res,$lg(Mark,f),$lg(TagBeg,f)_$lg(Mark,f)_$lg(TagEnd,f))
	}
	quit res
]]></Implementation>
</Method>

<Method name="GetInputXLSTags">
<Description><![CDATA[
Получить набор инпут элементов для выгрузки потока в ексель и посылки по почте
w ##class(App.LogInfo).GetInputXLSTags()
Выгрузить в XLS <input type="checkbox" name="exportXLS" id="exportXLS" #($s($g(exportXLS):"checked",1:""))#>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>exportXLS,exportXLSfile,exportXLSfileEmail</FormalSpec>
<Implementation><![CDATA[
 &html<
 Выгрузить в XLS <input type="checkbox" name="exportXLS" id="exportXLS" >
 В файл <input type="text" size=30 name="exportXLSfile" id="exportXLSfile" value="#($g(exportXLSfile))#">
 и послать на <input placeholder="email@mail.com,email2@mail.com" type="text" size=30 name="exportXLSfileEmail" id="exportXLSfileEmail" value="#($g(exportXLSfileEmail))#">
 >
 quit ""
]]></Implementation>
</Method>

<Method name="GetInputXLSTagsVal">
<Description>
Получить значения инпут элементов для выгрузки потока в ексель и посылки по почте
d ##class(App.LogInfo).GetInputXLSTagsVal(.exportXLS, .exportXLSfile, .exportXLSfileEmail)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>exportXLS,exportXLSfile,exportXLSfileEmail,SDNum</FormalSpec>
<Implementation><![CDATA[
	set:$d(%request) exportXLSfile=%request.Get("exportXLSfile")
	if $g(exportXLSfile)="" s exportXLSfile=$$$EMAILXLSPATH_$zd($h,3)_"_"_$p($h,",",2)_".xls"
	set:$d(%request) exportXLS=%request.Get("exportXLS")["on"
	set:$d(%request) exportXLSfileEmail=%request.Get("exportXLSfileEmail")
	if $g(exportXLSfileEmail)="" s exportXLSfileEmail=$$$EMAILSUPPORT
	set:$d(%request) SDNum=%request.Get("SDNum")
	quit ""
]]></Implementation>
</Method>

<Method name="SendEmail">
<Description>
Послать пользователю файл с сообщением
w ##class(App.LogInfo).SendEmail("mihaylenko_sv@mosvodokanal.ru", "Тест", "Тестовое сообщ", "c:\temp\2019-01-16_32309.xls")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>supportemail="",subj="",msg="",file=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		set subj="Сервер : "_$zu(110)_", "_subj
		set text="<html><head></head><body color=greay><h4>Здравствуйте пользователь "_supportemail_"</h4>"_
		"<br><br>"_msg
		set text=text_"</body></html>"
		// support
		if supportemail="" set supportemail=$$$EMAILSUPPORT		
		; Определение адреса
		set email=supportemail //только 
		
		; Учетка для авторизации todo - ВЗЯТЬ из параметров
		set authFrom=$$$EMAILAUTH
		set authFromPass=$$$EMAILAUTHPASS
		if file'="" {
			s slash=##class(App.files).getSlash()
			s path=$p(file,slash,1,*-1)
			s file=$lb($p(file,slash,1,*-1)_slash,$p(file,slash,*))
		}
		set sc=##class(App.net).SendMail($$$EMAILSERVERIP,$$$EMAILSERVERPORT, 0, 0, "", authFrom, authFromPass, authFrom, email_","_supportemail, subj, text,file)
		if 'sc w !,"Ошибка "_$System.Status.GetErrorText(sc) $$$AppLogTab("ERROR","()",$System.Status.GetErrorText(sc))
		else  w !,"Направлено по адресу "_email $$$AppLogTab("INFO","()","Отправление на адрес "_email_" файла "_file)
		quit sc
]]></Implementation>
</Method>

<Method name="GetInfoImg">
<Description>
w ##class(App.LogInfo).GetInfoImg("tools")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code</FormalSpec>
<Implementation><![CDATA[	quit "<a title='to tools' target=tools href=""App.LogInfo.cls?NSP="_$zu(5)_"&WHAT="_$zconvert("?","O","URL")_""">"_##class(App.LogInfo).GetImg(code)_"</a>"
]]></Implementation>
</Method>

<Method name="GetImg">
<Description>
w ##class(App.LogInfo).GetImg("help")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code</FormalSpec>
<Implementation><![CDATA[
	quit:code="help" "<span class='ui-icon ui-icon-help'></span>"
	quit:code="search" "<span class='ui-icon ui-icon-search'></span>"
	;quit:code="apptools" "<img src="""_$$$PATHCSP_"jqueryui/img/apptools-ico-lofel.ico"" width=""1%""/>" 
	;quit:code="apptools" "<img src="""_$$$PATHCSP_"jqueryui/img/apptools-ico.ico"" width=""1%""/>" ;gear
	quit:code="tools" "<span class='ui-icon ui-icon-wrench'></span>" ;gear
	quit:code="trash" "<span class='ui-icon ui-icon-trash'></span>"
	quit:code="check" "<span class='ui-icon ui-icon-check'></span>"
	quit:code="closethick" "<span class='ui-icon ui-icon-closethick'></span>"
	quit ""
]]></Implementation>
</Method>

<Method name="ExportProjects">
<Description>
Export all projects to XML</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dir,files</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$NspGoto(curNs,"AAA")
	d ..ExportAppProj(Dir,"app",.files)
	$$$NspReturn(curNs)
	d ##class(App.net).SendFilesToEmail($zn,Dir,.files)
	q $$$OK
]]></Implementation>
</Method>

<Method name="ExportAppProj">
<Description>
Export all projects to XML
d ##class(App.LogInfo).ExportProj("/backup/source/","app")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dir,proj="",files</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s pFileName=Dir_$zu(110)_"-"_$zu(5)_"-"_proj_"-"_$tr(##class(App.type).GetDateTime($h),":T","-_")_".xml"
	w !,pFileName s files(pFileName)=""
	/*
The items to export.
Each of the items must have a type determined by an extension selected from the following list of basic types, additional types are supported under the abstract routine interface so this list is not exhaustive.

CLS - Classes
CSP - Cache Server Pages
CSR - Cache Rule files
MAC - Macro routines
INT - Non-macro routines
BAS - Basic routines
INC - Include files
GBL - Globals
PRJ - Studio projects
OBJ - Compiled object code
PKG - Package definitions
If exporting multiple items, separate them with commas, pass the items("item")="" as an array. You can also use ? or * wild cards and if you wish to exclude items pass ' before the item name which also supports wild card, e.g. "User.*.cls,'User.T*.cls".
	*/
	s list("App*.CLS")=""
	s list("App*.INC")=""
	Write $SYSTEM.OBJ.Export(.list, pFileName)
	k list
	s list("/apptools/*.*")=""
	s pFileName=Dir_$zu(110)_"-"_$zu(5)_"-"_proj_"-CSP-"_$tr(##class(App.type).GetDateTime($h),":T","-_")_".xml"
	w !,pFileName s files(pFileName)=""
]]></Implementation>
</Method>
</Class>


<Class name="App.LogInfoPane">
<IncludeCode>App.LogMacro</IncludeCode>
<Super>%CSP.Util.Pane</Super>
<TimeChanged>65084,29017</TimeChanged>
<TimeCreated>64621,44280.911124</TimeCreated>

<Method name="GetLink">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	s link="<link type=""text/css"" rel=""stylesheet"" href="""_$$$PATHCSP_"jqueryui/jsgrid/jsgrid.min.css"" />"_
	"<link type=""text/css"" rel=""stylesheet"" href="""_$$$PATHCSP_"jqueryui/jsgrid/jsgrid-theme.min.css"" />"
	s icon="<link rel=""icon"" href="""_$$$PATHCSP_"jqueryui/img/apptools-ico-lofel.ico"" type=""image/x-icon""/>"_
	"<link rel=""shortcut icon"" href="""_$$$PATHCSP_"jqueryui/img/apptools-ico-lofel.ico"" type=""image/x-icon""/>"
	q " <link href="""_$$$PATHCSP_"jqueryui/jquery-ui.css"" rel=""stylesheet"">"_link ;_icon
]]></Implementation>
</Method>

<Method name="AddJsScripts">
<Description>
Add libraries and functions js to the panel
d ##class(App.LogInfoPane).AddJsScripts()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mode</FormalSpec>
<Implementation><![CDATA[
	write "<script src="""_$$$PATHCSP_"jqueryui/external/jquery/jquery.js""></script>"
	write "<script src="""_$$$PATHCSP_"jqueryui/jquery-ui.js""></script>"
	write:$g(mode)="grid" "<script type=""text/javascript"" src="""_$$$PATHCSP_"jqueryui/jsgrid/jsgrid.min.js""></script>","<script type=""text/javascript"" src="""_$$$PATHCSP_"jqueryui/jquery.blockui.js""></script>"
	write:$g(mode)="chart" "<script type=""text/javascript"" src="""_$$$PATHCSP_"jqueryui/chart.js""></script>"
	q
]]></Implementation>
</Method>

<Method name="DrawHEAD">
<Description>
Add libraries and functions js to the panel</Description>
<FormalSpec>pInstance:PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write ##class(App.LogInfoPane).GetLink()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawBODY">
<Description>
Drawing the form to enter information</Description>
<FormalSpec>pInstance:PageInstance</FormalSpec>
<PublicList>nsp,what,field,value,type,typeclass,caption</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ##class(App.LogInfoPane).AddJsScripts() 
	set $ZT="errors"
	set color="red"
	if $zu(110)=$$$TESTSERVER s color="blue" 
	set lang=%request.Get("AppLang")
	if lang'="",lang'=$g(@$$$GNEnsConf@("Language")) {
		do ##class(%MessageDictionary).SetSessionLanguage(lang) 
		set $$$SessionLanguageNode=lang 
		set @$$$GNEnsConf@("Language")=lang ;^||%Language=lang
	}
	set nsp=%request.Get("NSP")
	set what=$zstrip(%request.Get("WHAT"),"<>WC")
	if nsp'="" try {zn nsp set NSpace=nsp } catch e {}
	set NSpace=$zu(5)
	set Next=%request.Get("Next"),Filtr=%request.Get("Filtr")
	set:Next="" Next=1
	set MaxNode=%request.Get("MaxNode") 
	if 'MaxNode set MaxNode=$$$MAXSHOW
	if what=($$$HISTORYGN_"-") KILL @$$$HISTORYGN
	set:$e(what,*)="-" what=$e(what,1,*-1),exp="-"
	set:$e(what,*)="+" what=$e(what,1,*-1),Next="-1"
	if $p(what,"-p",2)?1n.n set exp=$p(what,"-p",2),what=$p(what,"-p")
	s DSN=%request.Get("selectDSN")
	s SDNum=%request.Get("SDNum")

	//code to use when displaying tables
	s ExecuteDraw=%request.Get("ExecuteDraw") 
	s:$e(ExecuteDraw,1)="(" ExecuteDraw="##class"_ExecuteDraw_"(.%AppLogInfoVal,%AppLogInfoCol,%AppLogInfoHead,.%AppLogInfoTemp,"""_NSpace_""","""_DSN_""")"

	// Preparing variables for export to Excel
	d ##class(App.LogInfo).GetInputXLSTagsVal(.exportXLS, .exportXLSfile, .exportXLSfileEmail)
	d ..AddHistory(what,NSpace,DSN,MaxNode,Next,Filtr)
	if ($e(what,1)="^"),what'="^" {
		set gn=""
		if $e(what)="^" { set gn=what }
	}
	elseif what="?" {
		do ..GetHelp(.%help)
		// ExecuteArray = code for ison when outputting arrays
		set gn="%help",what="",Message=$$$aText("help command","Описание команд")
		set ExecuteDraw="##class(App.LogInfoPane).DrawHelp(.%AppLogInfoVal,%AppLogInfoCol,%AppLogInfoHead,.%AppLogInfoTemp,"""_NSpace_""","""_DSN_""")"
	}
	#; queries and query results
	elseif ",query,result,select,s,q,r,"[(","_$zconvert($p(what," ",1),"L")_",") {
			set sql=what
			i sql["p.party_id( )" s sql=$replace(sql,"p.party_id( )","p.party_id(+)")
	}
	#; SQL table query 
	elseif $e($zconvert($p(what," ",1),"L"),1,3)="log" {
		#; Delete the protocol table
		if $g(exp)="-" Do ##class(App.Log).%KillExtent() set msg=" "_$$$aText("Cleaned the protocol","Очистили протокол")_" App.Log"
		set (what,sql)="select * FROM App.Log order by id desc"
	}
	#; Run class methods
	elseif $p($zconvert(what,"L")," ",1)="xec" {
		s execute=$e(what,5,*)
	}
	#; Description of the class or instance of the class
	elseif $p($zconvert(what,"L")," ",1)="obj" { ;,$zconvert($e(what,1,2),"L")="##"||($zconvert($e(what,1,2),"L")="=#") {
		set classname=$p($p(what,"(",2),")",1)
		set id=$p($p(what,"%OpenId(",2),")",1) set:id[$c(34) id=$tr(id,$c(34))
		s Message=$$$aText("Class description","Описание класса ")_classname_"<br> Пример получения массива описания <br>"_$zu(5)_">do ##class(App.LogInfoPane).GetClassDef("""_classname_""",,.out)"
		try { if id="" set Obj=$classmethod(classname,"%New"),id=0 
			  else  set Obj=$classmethod(classname,"%OpenId",id)
			if $isobject(Obj) {
				do ##class(App.LogInfoPane).GetClassDef(classname,Obj,.out)
	 			if $e($p(what," ",2,99))'="=" {
		 			do ##class(App.LogInfoPane).GetValueObj(Obj,.out,.out) m %obj(id)=out
	 			}
	 			else {
		 			 do ##class(App.LogInfoPane).GetValueObj(Obj,.out,.res) m %obj(id)=res
	 			}
			} else { d ##class(App.LogInfoPane).GetClassDef(classname,"",.out)
				merge %obj=out
				set:id'="" %obj="<font color=red>"_$$$FormatText($$$aText("Object with id = %1 Does not exist","Объекта с ID: %1 Не существует"),id)_"</font>" 
			}
			set gn="%obj"
		} catch e {set gn="%err",%err=$zconvert($ze,"O","HTML")
		}
	}
	set title=$$$aText("Get help","Получить справку")_" ?"
	set ver=""
	// Get a list of namespaces
	s listNs=##class(App.sys).ListNS(.info)
	s selectNS="<SELECT title="""_$$$aText("Namespace","Область")_""" name=""NSP"" id=""NSP""  ONCHANGE=""document.forms['loginfo'].submit();""> "
	for ns=1:1:$l(listNs,",") { continue:$p(listNs,",",ns)=""
		continue:$p(listNs,",",ns)["%ALL"
  		s selected=$select(NSpace=$p(listNs,",",ns):"selected",1:"")
  		s selectNS=selectNS_" <OPTION "_selected_" VALUE="""_$p(listNs,",",ns)_""">"_$p(listNs,",",ns)_"</OPTION>"
	}
	set listDSN=##class(App.sys).getSQLConnection(.listDSN)
	s selectNS=selectNS_"</SELECT>"
	s selectDSN="<SELECT title="""_$$$aText("DSN ODBC/JDBC","DSN имя источника данных ODBC/JDBC")_""" name=""selectDSN"" id=""selectDSN"" ><OPTION></OPTION> "
	for ns=1:1:$l(listDSN,",") { continue:$p(listDSN,",",ns)=""
		continue:$p(listDSN,",",ns)["%"
  		s selected=$select(DSN=$p(listDSN,",",ns):"selected",1:"")
  		s selectDSN=selectDSN_" <OPTION "_$g(selected)_" VALUE="""_$p(listDSN,",",ns)_""">"_$p(listDSN,",",ns)_"</OPTION>"
	}
	s selectDSN=selectDSN_"</SELECT>"
	
	&html<
	<!-- ui-dialog -->
	<div id="dialog" title="Dialog Title">
		<div id=dialogContent></div>
	</div>
		<form name="loginfo" id="loginfo">
		<table width="90%" style="border-radius: 10px; border: 1px solid #72a7cf" cellpadding="2" cellspacing="0" class="DetailTable" bgcolor="#c4d6d6" >
		<tr>
			<td>
				#(##class(App.LogInfo).GetImg("tools"))#
				 #(##class(App.LogInfoPane).GetSysinfo(color))#
			</td>
		</tr>
		<tr>
			<td>
				#(selectNS)# #(selectDSN)#
				 | <a name='Hist' href='#("App.LogInfo.cls?NSP="_$zu(5)_"&Next=-1&WHAT="_$zconvert($$$HISTORYGN,"O","URL")_"")#' title='#($$$aText("Show command input history","Показать историю ввода команд"))#' id='Hist'>#($$$aText("History","История"))#</a>
				 | <a target='Explore' name='Explore' href='#("App.FormExp.cls?NSP="_$zu(5))#' id='Explorer'>#($$$aText("Selection Classes","Селектор Классов"))#</a>
				 | <a target='ExploreTab' name='ExploreTab' href='#("App.FormExp.cls?panel=AccordionExp&NSP="_$zu(5))#'  id='ExplorerTab'>#($$$aText("Explorer tables","Табличный Навигатор"))#</a>
				 | <a target='Param' name='Param' href='#("App.FormExp.cls?NSP="_$zu(5)_"&SelClass=App.Parameter")#' title='#($$$aText("Go to the options table","Перейти в таблицу параметров"))#' id='Param'>#($$$aText("Options","Параметры"))#</a>
				 | <a target='Chart' name='Chart'  id='Chart' href='#("App.Chart.cls?panel=class(App.ChartPanel).ChartDbSize&NSP="_$zu(5))#'>#($$$aText("ChartDbSize","Размеры БазДанных"))#</a>
				 | <a target='ChartAlert' name='ChartAlert'  id='ChartAlert' href='#("App.Chart.cls?panel=class(App.ChartPanel).ChartAlert&NSP="_$zu(5))#'>#($$$aText("ChartAlert","Важные события"))#</a>
 			 | 
 			</td>
		</tr>
		<tr> 
			<td>
				#($$AddExp(title,what,$g(Next),$g(Filtr),$g(MaxNode)))#
			</td>
		</tr>
			#(##class(App.LogInfoPane).AddProdQuery($g(SDNum)))#
		<tr>
			<td>
				<span class='ui-icon ui-icon-play' name="show" id="show" onclick="document.forms['loginfo'].submit();" >#($$$aText("Execute","Выполнить"))#</span>
				<input type="submit" name="show2" id="show2" value='#($$$aText("Execute","Выполнить"))#'>
				#(##class(App.LogInfo).GetInfoImg("help"))# 
	 			#(##class(App.LogInfo).ClearFields("NSP,MaxNode,Filtr,Next,WHAT,tWHAT,exportXLS,exportXLSfile,exportXLSfileEmail,selectDSN,SDNum"))# 
		 		#($$$aText("Upload to file Excel","Выгрузить в файл Excel"))#  
		 		<input type="checkbox" name="exportXLS" id="exportXLS" #($s($g(exportXLS22222):"checked",1:""))#>
				<input type="text" size=30 name="exportXLSfile" id="exportXLSfile" value="#($g(exportXLSfile))#">
				#($$$aText("and send to","и послать на"))# 
				<input placeholder="email@mail.com,email2@mail.com" type="text" size=30 name="exportXLSfileEmail" id="exportXLSfileEmail" value="#($g(exportXLSfileEmail))#">
			</td>
		</tr>
		<tr> 
			<td>
				#($$$DRAWAllApp)#
			</td>
		</tr>	
		</table>
		</form>
	>
	d ##class(App.LogInfoPane).AddJS("tWHAT") 
	if $g(execute)'="" {
		write "<H3>"_$$$aText("Executing the command","Выполнение команды")_" "_execute_"</H3>"
		x execute
		q $$$OK
	}
	if what="trm" {
		write !,"<iframe style='width:95%; height:70%' id='terminal"_NSpace_"' src='/terminal/?ns="_NSpace_"&clean=1' ></iframe>"
		quit $$$OK
	}
	#; Post request
	if $p($zconvert(what,"L")," ",1)="post" {
		set posturl=$p($p(what," ",2,*),$C(13,10),1)
		set server=$p(posturl,"/",3)
		if $p(server,"@")'="" set user=$p($p(server,"@"),":"),pass=$p($p(server,"@"),":",2),server=$p(server,"@",2)
		set postbody=$p($p(what," ",2,*),$C(13,10),2,*)
		s st=##class(App.net).PostHttp(server, $p($p(posturl,"/",4,*),"?"),user ,pass ,postbody,.out)
		w st w "<pre>" zw out("Data") w "</pre>" q $$$OK
	}
	if $g(SDNum)'="",$d(@$$$PROJGN) {
		write "<br>"_##class(App.MVK.docbook).FindSDRef(SDNum)
	}
	set obj=""
	#; arbitrary query
	if $g(sql)'="" {
		if DSN'="" {
			set gnTemp=$na(@$$$TEMPORYGN@($username))
			KILL @gnTemp
			if $G(listDSN(DSN))'="" set st=##class(App.sys).SaveGateway(sql,$G(listDSN(DSN)),%request.Get("User"),%request.Get("Password"),gnTemp,MaxNode) 
			else  set st=##class(App.sys).SqlToDSN(sql,DSN,gnTemp,MaxNode)
			if $d(@gnTemp) {
				set st=..DrawSQL("result "_gnTemp,MaxNode,NSpace,"В DSN: "_DSN_" Запрос "_$g(sql),$g(ExecuteDraw),$lb(exportXLS,exportXLSfile,exportXLSfileEmail))
			}
			
		}
		else {
			if exportXLS=1 { ;Running in the background
				job ..DrawSQL(sql,MaxNode,NSpace,"В области "_NSpace_" "_$g(msg),$g(ExecuteDraw),$lb(exportXLS,exportXLSfile,exportXLSfileEmail))::1
				if $T W $$$aText("The request will be executed in the background","Запрос выполнится в фоновом режиме") s st=1
			} else {
				set st=..DrawSQL(sql,MaxNode,NSpace,$$$aText("In Namespace","В области")_" "_NSpace_" "_$g(msg),$g(ExecuteDraw),$lb(exportXLS,exportXLSfile,exportXLSfileEmail))
			}
		}
		if $$$ISERR(st) write "<br>Ошибка запроса :"_##class(%CSP.Page).EscapeHTML(sql_"; "_$SYSTEM.OBJ.DisplayError(st))_"<br>"
	}
	#; If the output of Global
	elseif $G(gn)'="" {
		s a=$lb(gn,MaxNode,NSpace,Next,$g(Message),$g(exp),Filtr,$g(ExecuteDraw),exportXLS,exportXLSfile,exportXLSfileEmail)
		s $$$AppL("MSS","job")=a
		;d ##class(App.LogInfoPane).DrawGN(a) ;debug 
		if exportXLS=1 { ;Running in the background
			job ..DrawGN(a)::1
			i $T W $$$aText("The request will be executed in the background","Запрос выполнится в фоновом режиме") s st=1
		} else {
			set st=..DrawGN(a)
		}
	}
	elseif (nsp'="")!(what'="") {
		&html<<center><b>#($$$aText("Commands not defined","Команды не определены"))#</b></center>>
	}
	write "<br><br>"
	quit $$$OK
  	///Extra options
AddExp(title,gn,Next="",Filtr="",MaxNode) 
	write "<textarea rows=3 cols=130 onblur=""document.getElementById('WHAT').value=document.getElementById('tWHAT').value;"" name='tWHAT' title='"_title_"' placeholder='? "_$$$aText("enter the command and","введите команду и")_" Ctrl-Enter' id='tWHAT'>"_($zconvert(gn,"O","HTML"))_"</textarea>"
	write "<br><input size=80 type='hidden' name='WHAT' title='"_title_"' id='WHAT' value="""_($zconvert(gn,"O","HTML"))_""" placeholder='?'>"
	write " <input title="""_$$$aText("Number of nodes","Количество узлов")_""" type=""text"" name=""MaxNode"" id=""MaxNode"" value='"_MaxNode_"' size=""10px"" > "_
	" <input type=""hidden"" name=""Next"" id=""Next"" value='"_Next_"' size=""0px"" > "
	quit:$e(gn,1)'="^" ""
	if Next<1 set ButtNext=$$$aText("Reverse Lookup","Обратный просмотр"),NewVal=1
	else  set ButtNext=$$$aText("Direct View","Прямой просмотр"),NewVal=-1
	quit " <input type=""button"" name=""ButtNext"" id=""ButtNext"" onclick=""document.getElementById('Next').value="_NewVal_";document.forms['loginfo'].submit();"" value='"_$g(ButtNext)_"' size=""50px"" > "_
	"<input size='30px' type='text' placeholder='"_$$$aText("Filter: command argument if","Фильтр: аргумент команды if")_"' name='Filtr' title='%gn - "_$$$aText("current reference global. For example:","текущая ссылка глобала. Например:")_" %gn[""3)""||(@%gn[""123"")' id='Filtr' value='"_Filtr_"' >"
errors
 	write !,$ze
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawGN">
<Description>
d ##class(App.LogInfoPane).DrawGN(a)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>a</FormalSpec>
<Implementation><![CDATA[
	s $lb(gn, MaxNode, NSpace, Next, Message ,exp, Filtr, ExecuteDraw, exportXLS, exportXLSfile, exportXLSfileEmail)=a
		if gn["*" {
			set mask=$e(gn,2,*)
			set ExecuteDraw="##class(App.LogInfoPane).AddRefViewEditGlob(.%AppLogInfoVal, %AppLogInfoCol, %AppLogInfoHead, .%AppLogInfoTemp,"""_$zu(5)_""")"
		 	s sql="%SYS.GlobalQuery:NameSpaceList "_NSpace_" "_$s(mask="*":"",1:mask)
		 	s GN="^||tmpGList" k @GN
		 	d ##class(App.sys).SaveQuery(sql,GN,0)
		 	for i=1:1 { q:'$d(@GN@(sql,0,i))
		 		s nameGL=$g(@GN@(sql,0,i,1))
		 		s dir=$g(@GN@(sql,0,i,2))
		 		continue:nameGL[":"
		 		s order(nameGL)=i ;sorted
		 		s dir(dir)=$g(dir(dir))+1
		 		s dir(dir,nameGL)=i ;stored
		 	}
		 	if gn["**" {
			 	s dir="" ,query="%SYS.GlobalQuery:Size "_dir_" "_$s(mask="*":"",1:mask)
			 	s FastFlag=gn'["***"
			 	for { s dir=$o(dir(dir)) q:dir=""
			 		set s = ##class(%SQL.Statement).%New()
	 				do s.%PrepareClassQuery("%SYS.GlobalQuery","Size")
					set r = s.%Execute(dir,,mask,0,,FastFlag )
					s @GN@(sql,0,0,14)="Allocated MB"
					s:gn["***" @GN@(sql,0,0,15)="Used MB"
	 				while r.%Next() { 
						if $d(dir(dir,r.%Get("Name"))) { 
							s row=dir(dir,r.%Get("Name"))
							s @GN@(sql,0,row,14)=r.%Get("Allocated MB")
							s:gn["***" @GN@(sql,0,row,15)=r.%Get("Used MB")
							
						}
					}
			 	}
		 	}
		 	set st=..DrawSQL("result "_$na(@GN@(sql,0)),MaxNode,NSpace,"Список глобалов области "_NSpace_" по маске "_mask,$g(ExecuteDraw),$lb(exportXLS,exportXLSfile,exportXLSfileEmail))
		}
		else {
			set st=..DrawArray(gn,MaxNode,NSpace,Next,$g(Message),$g(exp),Filtr,$g(ExecuteDraw),$lb(exportXLS,exportXLSfile,exportXLSfileEmail))
		}
		q $$$OK
]]></Implementation>
</Method>

<Method name="DrawHelp">
<Description>
code for ison when outputting arrays</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Val,Col,Head,Temp,nspace,DSN</FormalSpec>
<Implementation><![CDATA[
	set res=Val
	if Head {
		 q:Col=1 ""  
		 if Col=2 {
			set res=$$$aText("Command","Команда")
		 }
		 if Col=3 {
			set res=$$$aText("Discription","Описание")
		 }
	}
	else {
		if Col=1 {
			set res=""
		}
		if Col=2 {
			set res=$p(Temp,"---",1)
		}
		if Col=3 {
			set res=$p(Temp,"---",2)
		}
	}
	quit res
]]></Implementation>
</Method>

<Method name="AddRefViewEditGlob">
<Description>
Generate active links for viewing and editing globals</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Val,Col,Head,Temp,nspace,DSN</FormalSpec>
<Implementation><![CDATA[
	set res=Val
	if $g(Head) {
		if $g(Val)="Name" s Temp("Name",Col)=""
		if $g(Val)="Permission" s Temp("Permission",Col)=""
	}
	else {
		if $D(Temp("Name",Col)) {
			set %globalName=$s($e(Val,1)="%":"%25"_$e(Val,2,*),1:Val)
			if $g(%globalName)[":" q res
			set href="App.LogInfo.cls?NSP="_nspace_"&selectDSN=&WHAT=^"_Val
			set res=$replace(Val,Val,"<a title='viewGlob' target='viewGlob' href='"_href_"'>"_Val_"</a>")
		}
		if $D(Temp("Permission",Col)) {
			if $g(%globalName)[":" q res
			set:Val["R" href2="<a title='View' target='View' href=""/csp/sys/exp/UtilExpGlobalView.csp?$ID2="_%globalName_"&$NAMESPACE="_nspace_""">R</a>"
			set:Val["W" href3="<a title='Edit' target='Edit' href=""/csp/sys/exp/UtilExpGlobalDrill.csp?$ID2="_%globalName_"&$NAMESPACE="_nspace_""">W</a>"
			set res=$g(href2)_$g(href3)
		}
	}
	quit res
]]></Implementation>
</Method>

<Method name="DrawArray">
<Description>
Output a list of array elements
set st=##class(App.LogInfoPane).DrawArray(res,100,$zu(5),"Output a list 1111")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gn:%String="",MaxNode=$$$MAXSHOW,NSpace="",Next="1",msg="",exp="",Filtr="",Execute="",fileXLS=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		; Check if there is a record of the stack
		if $e(gn,1,4)=($$$logdevGN)||($e(gn,1,6)=("^mtemp")) {
			set:gn[$$$logdevGN stackGN=($$$logdevGN)_$e(gn,5,7)_"stack"
			set:gn["mtemp" stackGN=("^mtemp")_$e(gn,7,9)_"stack"	
			if $e($g(exp))="-" {
				set jo=$g(@gn@(0)) KILL @gn,exp,@stackGN set:jo @gn@(0)=jo  
			}
			#; Clean and initialize the debug isolation node
			if $g(exp)?1n.n set job=exp KILL @gn@(1) if job,$d(^$j(+job)) set @gn@(0)=+job
			if gn["stack(",$qs(gn,1)?1n.n,$g(@gn)'="",$lv(@gn) {
				;$ze,$h,$tl,$io,$j,$zu(110),stack,ipRemote
				set stack=$lfs($lg(@gn,7),"|")
				set href="href='App.LogInfo.cls?NSP="_NSpace_"&WHAT="_$na(@$replace($qs(gn,0),"stack","")@(1,$qs(gn,1)))_"'"
				set anc="<a  title='"_$$$aText("Go to the protocol node","Перейти к узлу протокола")_"' "_href_" >"_gn_"</a>"
				&html<
				<h1>View stack : #(anc)# <font color=red>$ze:</font> #($lg(@gn,1))#<font color=red> $h: </font>#($$$LoggedDT($lg(@gn,2)))#<font color=red> $tl: </font>#($lg(@gn,3))#<font color=red> $io: </font>#($lg(@gn,4))#<font color=red> $j: </font>#($lg(@gn,5))#<font color=red>  $zu(110):</font> #($lg(@gn,6))# <font color=red> IP-Adress: </font> #($lg(@gn,8))#</h1>
				<table style="border-radius: 10px; border: 1px solid #72a7cf"  cellpadding="2" cellspacing="0" class="DetailTable" bgcolor="#c4d6d6" ><tbody>
				<tr>
					<th align="left" width="5px">#</th>
					<th align="left" width="50px">Ссылка на код</th>
					<th align="left" width="50px">Строка кода</th>
				</tr>
				>
				for line2=2:1:$ll(stack) {
					set line=$lg(stack,line2)
					try {	set code=$t(@$p(line," ")) }
					catch {	set code=""	}
					quit:code["s zsr=$zr,zsG=" ;не выводим саму ловушку
					&html<
					<tr>
						<td>#(line2)#</td>
						<td>#(line)#</td>
						<td>#(code)#</td>
					</tr>
					>
				}
				&html<</table>>
				set gn=$q(@gn)
			}
		} 
		if fileXLS'="",$lg(fileXLS,1) {
			d ..OpenXLSfile(fileXLS, .exportXLSfileEmail, .exportXLSfile, .io)
		}
		s num="#"
		s ref=$$$aText("reference","Ссылка")
		s data=$$$aText("Data","Данные")
		if Execute'="" {
			s %AppLogInfoHead=1
			s %AppLogInfoTemp=data
			s num=..AddExecute(Execute,num, 1, NSpace = "",.countEx) 
			s ref=..AddExecute(Execute,ref, 2, NSpace = "",.countEx) 
			s data=..AddExecute(Execute,data, 3, NSpace = "",.countEx) 
		}
			&html<
			<h1>#($s(msg="":$$$aText("View array","Просмотр массива")_" : "_gn_" "_$$$aText("in namespace","в области")_" "_$zu(5),1:msg))#</h1>
			<table width="90%" style="border-radius: 10px; border: 1px solid #72a7cf" cellpadding="2" cellspacing="0" class="DetailTable" bgcolor="#c4d6d6" ><tbody>
			<tr>
				<th align="left" width="1%">#(num)#</th>
				<th align="left" width="9%">#(ref)#</th>
				<th align="left" width="*">#(data)#</th>
			</tr>
			>
			set (igg,ig)=gn
			set count=0,test=0
			#; Первая строчка
			if ig'="",$g(@ig)'="",Execute="" d ..DrawNodeGN(ig,@ig,.count,,ig,$g(NSpace))
  			// Для локальных процентных массивов просмотр - прямой
  			set next=$s($e(gn,1)="%":1,Next["-1":-1,1:1)
  			if MaxNode<$$$MAXSHOW set MaxNode=$$$MAXSHOW
  			if $g(next)=-1 {	
  				for count2=1:1 { set ig=$q(@ig) quit:ig=""||(ig'[$e(igg,1,*-1))  set iglast=ig 
  					Quit:count2>(MaxNode*2) ##; Удвоенное ограничение
  				}
  				if $g(iglast)'="" set ig=iglast
  			}
  			if ig'="" {
	  			if next=-1 { set NoDraw=0
		  			i $g(Filtr)'="" set NoDraw=$$ExpTestFiltr(ig,Filtr) 
		  			do:'NoDraw ..DrawNodeGN(ig,$g(@ig),.count,,ig,$g(NSpace),Execute)
	  			}
	  			for { set ig=$q(@ig,$g(next)) quit:ig=""||(ig'[$e(igg,1,*-1))
	  				if $g(Filtr)'="" continue:$$ExpTestFiltr(ig,Filtr)
	  				set node=$e($p(ig,$e(igg,1,*-1),2),2,*)
					do ..DrawNodeGN(node,@ig,.count,$g(job),ig,$g(NSpace),Execute)
					Quit:count>MaxNode
	  			}
  			}
  			&html<</table>>
	if $g(exportXLSfile)'="" { 
		d ..CloseXLSfile(fileXLS, .exportXLSfileEmail, .exportXLSfile,.io, .count, .msg, .gn)
	}  	
	i '$d(%DrawArray) {
		$$$jsstart
		w "$('.trs').hover(function(){ " // set the function when you hover the cursor over the element and during its lead	ui-state-hover
		w "  $(this).toggleClass( 'ui-widget-content' )" 
		w " });"
		$$$jsstop
	 s %DrawArray=1
	}
  	quit $$$OK
	##; Условия фильтра по узлу и значениям
ExpTestFiltr(%gn,Filtr) set %test=0
	xecute "i '("_Filtr_") set %test=$t"   
 	quit %test
]]></Implementation>
</Method>

<Method name="AddHistory">
<Description>
Add command history</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>what,NSpace,DSN,MaxNode,Next,Filtr</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $$$HISTORYGN_",?,trm,log"'[what {
		s val=$o(@$$$HISTORYGN@(""),-1),lastcmd=""
		i val'="",$lv($g(@$$$HISTORYGN@(val))) s lastcmd=$lg($g(@$$$HISTORYGN@(val)),1)
			i $g(lastcmd)'=what { // If the commands are not repeated
			s dt=$$$AppDT($h)
			set @$$$HISTORYGN@(dt)=$lb(what,NSpace,DSN,MaxNode,Next,Filtr)
		}
	}
]]></Implementation>
</Method>

<Method name="getNode">
<Description>
Get global node</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&node,gn,NSpace=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $e(gn,1,4)=($$$logdevGN),$e(node,1)="(",$e(gn,*-4,*)'="stack" {	
		set gnSt=$$$logdevGN_$e(gn,5,7)_"stack"
		set lev2=$qs("a"_node,2)
		try {
			if lev2'="",$d(@gnSt@(lev2)) {
					set href="href='App.LogInfo.cls?NSP="_NSpace_"&WHAT="_$na(@gnSt@(lev2))_"'"
					set title=$$$aText("Show call stack","Показать стэк вызовов")
					try {
						set lv=@gnSt@(lev2)
						set title=title_$c(13,10)_$$$LoggedDT($lg(lv,2))
					} catch e {}
					set node=$replace(node,","_lev2_",","<a title='"_title_"' "_href_" >,"_lev2_",</a>")
			}
		} catch e {}
	}
]]></Implementation>
</Method>

<Method name="DrawNodeGN">
<Description>
Drawing the global node</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[node:%String="",val:%String="",&count,job="",gn,NSpace="",Execute=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set count=count+1
	do ..getNode(.node, gn, NSpace)
	set node=..ShowCell(node,NSpace)
	if $e(gn,1,4)=($$$logdevGN) {
		if $qs(gn,3)["%%%$$LOG^%ETN" {	
			try { set d=$zd($lg(@gn,1),1),inc=$lg(@gn,2)
			} catch e { set d="",inc=""}
			set href="href='/csp/sys/op/UtilSysAppError.csp?$ID1="_$namespace_"&$ID2="_d_"&$ID3="_inc_"'"
			set title=$$$aText("Show stack and variables","Показать стэк и переменные")_$c(13,10)_d_" # "_inc
			set node=$replace(node,"%%%$$LOG^%ETN","<a  title='"_title_"' "_href_" >"_"%%%$$LOG^%ETN"_"</a>")
		} 
		// If there is a serialized object, then open the browse window.
		elseif $e(val,1)="{"&&($e(val,*)="}")||($e(val,1,4)="""\""{") {
			set href="style='"_$$$styleurl_"' onclick=""WinOpen('"_NSpace_"','ShowJson','"_$zconvert(gn,"O","URL")_"');"""
			set title=$$$aText("Show formatted json","Показать форматированный json")
			set node="<a title='"_title_"' "_href_" >"_node_"</a> "
		}
		elseif $e(val,1)="<"&&($e(val,*)=">") {
			set href="style='"_$$$styleurl_"' onclick=""WinOpen('"_NSpace_"','ShowXML','"_$zconvert(gn,"O","URL")_"');"""
			set title=$$$aText("Show","Показать")_" XML"
			set node="<a title='"_title_"' "_href_" >"_node_"</a> "
			set val=$zconvert(val,"O","HTML")
		}
		elseif $e(val,1)="<" {
			set val=$zconvert(val,"O","HTML")
		}
	}
	#; for process detail and dashboard systems
	i job'="",val=job,node="(0)" {
		set url=$p($g(%request.CgiEnvs("HTTP_REFERER")),"/",1,3)_"/"
		set title=$$$aText("Process control","Управление процессом")
		set val=$replace(val,val,"<a title='"_title_"' target='process' href='"_url_"csp/sys/op/%25CSP.UI.Portal.ProcessDetails.cls?PID="_val_"&DISPLAYID=&$ID1="_val_"'>"_val_"</a>")
		set title=$$$aText("DBMS panel","Панель СУБД")
		set val=val_" <a title='"_title_"Д' target='system' href='"_url_"csp/sys/op/UtilDashboard.csp?$NAMESPACE='>"_$zu(110)_"</a>"
	}
	elseif node["%AppLogId",$D(%request) {
		set url=$p($g(%request.CgiEnvs("HTTP_REFERER")),"/",1,3)_"/"
		set href="href='App.LogInfo.cls?NSP="_NSpace_"&WHAT="_$zconvert("select * from App.Log where id="_val,"O","URL")_"'"
		set node=$replace(node,"%AppLogId","<a title='Загрузить строку таблицы' "_href_">%AppLogId</a>")
	}
	else {	
		set val=..ShowCell(val,NSpace)	
	}
	set bgcolor="#c4d6d6"
	if node[",""="")" set bgcolor="white" 
	
	/// Parsing and coloring history
	if $p(gn,"(",1)=$$$HISTORYGN {
		set node=$replace(node,node,"<a href=""App.LogInfo.cls?NSP="_$lg(@gn,2)_"&Filtr="_$zconvert($lg(@gn,6),"O","URL")_"&Next="_$lg(@gn,5)_"&MaxNode="_$lg(@gn,4)_"&selectDSN="_$lg(@gn,3)_"&WHAT="_$zconvert($lg(@gn,1),"O","URL")_""" title='"_$$$aText("Load and run command","Загрузить и выполнить команду")_"'>"_node_"</a>")
		set val=$replace(val,"$lb(","$lb(<font color=red>")
		set val=$replace(val,$c(34)_","_$c(34),"</font>"_$c(34)_","_$c(34))
	}
	if Execute'="" {
		s %AppLogInfoHead=0
		s %AppLogInfoTemp=val
		s count=..AddExecute(Execute,count, 1, NSpace = "",.countEx) 
		s node=..AddExecute(Execute,node, 2, NSpace = "",.countEx) 
		s val=..AddExecute(Execute,val, 3, NSpace = "",.countEx) 
	}
	&html<
	<tr class=trs >
		<td align="left" >#(count)#</td>
		<td align="left" >#(node)#</td>
		<td align="left" >#(val)#</td>
	</tr>
	>
]]></Implementation>
</Method>

<Method name="AddExecute">
<Description>
Add an active link for the terminal</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Execute,data,col,NSpace="",&countEx]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set %AppLogInfoVal=data
	set %AppLogInfoCol=col
	try {
		xecute "set %AppLogInfoVal2="_Execute
		if %AppLogInfoVal'=%AppLogInfoVal2 set countEx=$g(countEx)+1
		set %AppLogInfoVal=%AppLogInfoVal2
	}
	catch e { w $ze}
	quit %AppLogInfoVal
]]></Implementation>
</Method>

<Method name="AddWebTerm">
<Description>
Add an active link for the terminal</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[count,&node,Load,NSpace=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set href="style=""text-decoration: underline; color: blue;"" d onclick=""copyToClipboard('p"_count_"');"""
	set title=$$$aText("Put a link to the context restore in the terminal in the clipboard","Поместить в буфер обмена ссылку на восстановление контекста в терминале")
	set node="<div id='p"_count_"' style='display:none' >d ##class(App.Log).Load("""_$replace(Load,$c(34),$c(34,34))_""")</div><a title='"_title_"' "_href_" >"_node_"</a> "
]]></Implementation>
</Method>

<Method name="AddClassRef">
<Description>
Add an active link to view the class description.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class,&str,NSpace=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	q:'$d(%request)
	if ##class(%Dictionary.ClassDefinition).%ExistsId(class) { 
		set url=$p($g(%request.CgiEnvs("HTTP_REFERER")),"/",1,3)_"/"
		set str=$replace(str,class,"<a title='"_$$$aText("Download class description","Загрузить описание класса")_"' href='"_url_"csp/documatic/%25CSP.Documatic.cls?LIBRARY="_NSpace_"&CLASSNAME="_class_"'>"_class_"</a>")
	}
]]></Implementation>
</Method>

<Method name="AddClassId">
<Description>
Add an active link to view a class instance.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[classname,id,&str,NSpace=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ##class(%Dictionary.ClassDefinition).%ExistsId(classname) { 
		try {set Obj=$classmethod(classname,"%OpenId",id)
			if $isobject(Obj) {
				set what="obj =##class("_classname_").%OpenId("_id_")"
			}
		} catch e {	}
		quit:$g(what)=""
		set href="href='App.LogInfo.cls?NSP="_NSpace_"&WHAT="_$zconvert(what,"O","URL")_"'"
		set str=$replace(str,"_id"":"_id,"<a title='"_$$$aText("Download a class instance","Загрузить экземпляр класса")_"' "_href_">"_"_id"":"_id_"</a>")
	}
]]></Implementation>
</Method>

<Method name="ShowCell">
<Description>
Cell drawing</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str,NSpace=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set:$lv(str) str=##class(%Global).Quote(str)
	
	if $l(str,".")>2 {
		; TODO cycle through the line if there are a lot of classes
		if $p($p(str,"(",2),")",1)["." {
			set class=$p($p(str,"(",2),")",1)
			if class'="" d ..AddClassRef(class, .str, NSpace)
		}
	}
	if str["_class"":" {
			set class=$p($p(str,"_class"":",2),$c(34),2)
			set id=$p($p(str,"_id"":",2),",",1)
			if class'="" {
				if id'="" do ..AddClassId(class, id, .str, NSpace)
				else  d ..AddClassRef(class, .str, NSpace)
			}
	}
	;Add a link to go to the view stack
	elseif str["(",$e(str,1,4)=$$$logdevGN,str'["<a title" {
		set node="("_$p(str,"(",2,*)
		do ..getNode(.node, str, NSpace)
		quit $p(str,"(",1)_node
	}
	else {
		quit str
	}
	quit str
]]></Implementation>
</Method>

<Method name="OpenXLSfile">
<Description>
Open file XLS</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[fileXLS,&exportXLSfileEmail,&exportXLSfile,io]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s exportXLSfileEmail=$lg(fileXLS,3)
	s exportXLSfile=$lg(fileXLS,2)
	set io=$i
	if '##class(App.files).OpenFile(exportXLSfile,1) use io write !,$$$aText("Do not open file","Не открыть файл")_" "_exportXLSfile quit
	use exportXLSfile	
	&html<
	<html xmlns:v="urn:schemas-microsoft-com:vml"
	xmlns:o="urn:schemas-microsoft-com:office:office"
	xmlns:x="urn:schemas-microsoft-com:office:excel"
	xmlns="http://www.w3.org/TR/REC-html40">
	<head>
	<meta http-equiv=Content-Type content="text/html; charset=utf-8">
	<meta name=ProgId content=Excel.Sheet>
	<meta name=Generator content="Microsoft Excel 15">
	</head>
	<body>
	>
	quit
]]></Implementation>
</Method>

<Method name="CloseXLSfile">
<Description>
Close file XLS</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[fileXLS,&exportXLSfileEmail,&exportXLSfile,io,count,msg,SQL]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<	
	</body>
	</html>>
	use io close exportXLSfile
	s slash=##class(App.files).getSlash()
	s path=$p(exportXLSfile,slash,1,*-1)
	s sc=##class(App.files).zipFile(path,$p(exportXLSfile,slash,*),$p(exportXLSfile,slash,*)_".zip",path)
	if sc s exportXLSfile=exportXLSfile_".zip"
	i 'sc s $$$AppL("APP","CloseXLSfile-zipFile")=$System.Status.GetErrorText(sc) 
	// Send file to e-mail
	i exportXLSfileEmail'="" {
		s sc=##class(App.LogInfo).SendEmail(exportXLSfileEmail, $$$aText("Send file","Отправление файла")_" "_exportXLSfile, $g(msg)_"<br> "_$$$aText("Namespace","Область")_" :"_$zu(5)_"<br> "_$$$aText("Query","Запрос")_": "_SQL, exportXLSfile)
		i 'sc s $$$AppL("APP","CloseXLSfile-SendEmail")=$System.Status.GetErrorText(sc) 
		}
	write !,"<br><h3>"_$$$aText("Query result","Результ запроса")_" ("_(+count)_" "_$$$aText("lines) uploaded to file","строк) выгружен в файл")_" "_exportXLSfile_"</h3>"
	quit
]]></Implementation>
</Method>

<Method name="DrawSQL">
<Description>
Query table output
fileXLS - list of parameters for uploading to Excel and sending by mail
	$lg(fileXLS,1) =1 флаг 
	s exportXLSfileEmail=$lg(fileXLS,3) - parcel addresses separated by commas, to which to send the file
	s exportXLSfile=$lg(fileXLS,2) - full path to the file where to write the table</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SQL:%String="",MaxNode=$$$MAXSHOW,NSpace="",msg="",Execute="",fileXLS=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ($zconvert($e(SQL,1),"L")="q") {
		try { set st=1
			if $e($p(SQL," ",2,99),1,2)="##" {
				x "set %q2="_$p(SQL," ",2)
				set query=%q2
			}
			else {
				set query=##class(%Library.ResultSet).%New($p(SQL," ",2))
			}
			if $p(SQL," ",4)'="" {set st=query.Execute($p(SQL," ",3),$p(SQL," ",4))}
			elseif $p(SQL," ",3)'="" {set st=query.Execute($p(SQL," ",3))}
			else {set st=query.Execute()}
			set msg=SQL
		} catch e { 
			set errmsg=SQL_" "_$$$aText("Error","Ошибка")_" "_$ze q ;$$$ERROR($$$GeneralError,msg) 
		}
		quit:'st st
		quit:$g(errmsg)'="" errmsg
	}
	elseif ($zconvert($e(SQL,1),"L")="r") {
		set resGN=$p(SQL," ",2,99)
		if '$d(@resGN) {
			set msg=SQL_" "_$$$aText("Link does not exist","Ссылка не существует"),ColCount=0
		}
		else {
			i $g(@resGN@(0))'="" {
				s ColCount=$ll(@resGN@(0)) //for local sql
			}
			else {
				 s ColCount=$o(@resGN@(0,""),-1)  //for sql via DSN
			}
		}
	}
	else {
		set query=##class(%ResultSet).%New()
		set st=query.Prepare(SQL)
		if 'st quit st
		set st=query.Execute()
		if 'st quit st
	}
	set (count)=0
	if $g(resGN)="" set ColCount=query.GetColumnCount()
	
	if fileXLS'="",$lg(fileXLS,1) {
		d ..OpenXLSfile(fileXLS, .exportXLSfileEmail, .exportXLSfile, .io)
	}

	&html<
	<h1>#($s(msg'="":msg,1:"Запрос: "_SQL))#</h1>
	<table style="border-radius: 10px; border: 1px solid #72a7cf" cellpadding="2" cellspacing="0" class="DetailTable" bgcolor="#c4d6d6" width="90%"><tbody>
	<tr><th align="left" width="1%">#</th>
	>
	s %AppLogInfoHead=1 //Processing title
	For i=1:1:ColCount {
		&html<	<th align="left" width="5%">>
		set %AppLogInfoCol=i
		if $g(resGN)'="" {
			if $d(@resGN@(0,i)) {set %AppLogInfoVal=$g(@resGN@(0,i))	if $lv(%AppLogInfoVal) set %AppLogInfoVal=$lg(%AppLogInfoVal,1)
			}
			else { set %AppLogInfoVal=$lg($g(@resGN@(0)),i)
			}
		}
		else {
			set %AppLogInfoVal=query.GetColumnName(i)
		}
			if Execute'="" {
				try {
					xecute "set %AppLogInfoVal2="_Execute
					if %AppLogInfoVal'=%AppLogInfoVal2 set countEx=$g(countEx)+1
					set %AppLogInfoVal=%AppLogInfoVal2
				}
				catch e {}
			}
			else {set %AppLogInfoVal=..ShowCell(%AppLogInfoVal,NSpace)	
			}
			write %AppLogInfoVal
		&html<</th>>	
	}
	&html<	</tr>	>
	s %AppLogInfoHead=0 //We process lines
	if $g(resGN)'="" { set i=0
		for { set i=$order(@resGN@(i))   quit:i=""
			for ii=1:1:ColCount set GetData(ii)=$s($lv($GET(@resGN@(i),"?")):$lg(@resGN@(i),ii),1:$GET(@resGN@(i,ii)))
			d qNext(.GetData) q:$g(stopWrite)
		}
	}
	else {
		while query.Next() { 
			for ii=1:1:ColCount set GetData(ii)=query.GetData(ii)
			d qNext(.GetData) q:$g(stopWrite)
		}
	}
	&html<</table>>
	Write !,$$$aText("Number of records found","Количество записей найдено")_" :"_+$g(count)
	if Execute'="" {
		Write !,$$$aText("Contextual changes or allotments","Контекстных изменений или выделений")_" :"_+$g(countEx)
	}
	if $g(exportXLSfile)'="" { 
		d ..CloseXLSfile(fileXLS, .exportXLSfileEmail, .exportXLSfile,.io, .count, .msg, .SQL)
	}
	;Set the hover for table rows
	i '$d(%DrawSQL) {
	$$$jsstart
		w "$('.trs').hover(function(){ " // set the function when you hover the cursor over the element and during its lead	ui-state-hover
		w "  $(this).toggleClass( 'ui-widget-content' )" 
		w " });"
	$$$jsstop
	 s %DrawSQL=1
	}
	quit $$$OK
 // Handling one query string
qNext(GetData)
		set count=count+1
		&html<<tr class=trs ><td>#(count)#</td>>
		if count>MaxNode w "<td style='color:red'>... "_$$$aText("More entries","Записей больше")_" "_MaxNode_"</td></tr>" s stopWrite=1 QUIT
		for ii=1:1:ColCount {	
			set %AppLogInfoVal=$g(GetData(ii))
			set %AppLogInfoCol=ii
			if Execute'="" {
				try {
					xecute "set %AppLogInfoVal2="_Execute
					if %AppLogInfoVal'=%AppLogInfoVal2 set countEx=$g(countEx)+1
					set %AppLogInfoVal=%AppLogInfoVal2
				}
				catch e {}
			}
			else {
				set %AppLogInfoVal=..ShowCell(%AppLogInfoVal,NSpace)	
			}
			if $g(exportXLSfile)'="",%AppLogInfoVal?1.N s %AppLogInfoVal="&nbsp;"_%AppLogInfoVal
			&html<<td>#(%AppLogInfoVal)#</td>>	
		}
			&html<</tr> >
	quit
]]></Implementation>
</Method>

<Method name="GetPathStack">
<Description>
Get call stack</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set $ECODE=""
	set Path=""
	for loop=0:1:$STACK	{
		if Path'="" set Path=Path_"~"
		set Path=Path_$case(Path,"":"",:"|")_$STACK(loop,"PLACE")
		if $l(Path)>32000 quit
	}
	set Path=$tr(Path,$c(9),"")
	quit Path
]]></Implementation>
</Method>

<Method name="GetValueObj">
<Description><![CDATA[
/*! \brief The method implements getting values
<br>\defgroup class_definition Class definition
<br>\ingroup class_definition
<br>\param in - class property description
<br>\param out - result of values 
<br>\example 	d ##class(App.LogInfoPane).GetClassDef(classname,Obj,.out)
<br>	 				d ##class(App.LogInfoPane).GetValueObj(Obj,.out,.res) */]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj,in,out</FormalSpec>
<Implementation><![CDATA[
	set p="" for  { set p=$o(in(p)) quit:p=""
		set n="" for { set n=$o(in(p,n)) quit:n=""
			try {
				set val=$c(1,2,3)
				if p="Methods" { i n'="getname" continue:$e(n,*-2,*)'="Get"
					set val=$METHOD(obj,n)
				}
				elseif p="Parameters" { 
					set val=$PARAMETER(obj,n)
				}
				elseif p="Properties" { 
					set val=$PROPERTY(obj, n)
				}
				set:val'=$c(1,2,3) out(p,n,"=")=val
			}
			catch (e) {
			}
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetClassDef">
<Description><![CDATA[
/*! \brief Parse class description into methods and properties
<br>\ingroup class_definition
\example d ##class(App.LogInfoPane).GetClassDef("mvk.utils.Log","",.out) */]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[aClassName:%String="",doc,&out,inSuper=1]]></FormalSpec>
<Implementation><![CDATA[
	if $g(doc)'="", $isobject(doc) set aClassName=doc.%ClassName(1)
	set classDefinition=##class(%Dictionary.ClassDefinition).%OpenId(aClassName)
	if ('$isobject(classDefinition)) {
		quit
	}

	// class description
	set classDescription=$zstrip(classDefinition.Description,"<>W")
	set out("ClassName",aClassName)=classDescription
	if classDefinition.Super'="" {
		set out("ClassName",aClassName,"super")=classDefinition.Super
		if inSuper {
			for sup=1:1:$l(classDefinition.Super,",") {  continue:$p(classDefinition.Super,",",sup)=""
				do ..GetClassDef($p(classDefinition.Super,",",sup),,.out)
			}
		}
	}
	// description of methods
	if (classDefinition.Methods.Count()>0) {
		set key=""
		while(1) {
			set methodDefinition=classDefinition.Methods.GetNext(.key)
			quit:(key="")
			set out("Methods",methodDefinition.Name,"Description")=methodDefinition.Description
		} 
	}
	// Property descriptions
	if (classDefinition.Properties.Count()>0) {
		set key=""
		while(1) {
			set propertyDefinition=classDefinition.Properties.GetNext(.key)
			quit:(key="")
			set out("Properties",propertyDefinition.Name,"Description")=propertyDefinition.Description
			set out("Properties",propertyDefinition.Name,"Name")=propertyDefinition.Name
			set out("Properties",propertyDefinition.Name,"Type")=propertyDefinition.Type
			set out("Properties",propertyDefinition.Name,"ReadOnly")=propertyDefinition.ReadOnly
			set out("Properties",propertyDefinition.Name,"Required")=propertyDefinition.Required
			set out("Properties",propertyDefinition.Name,"Parameters")=$$$AppObJs(propertyDefinition.Parameters)
		}
	}
	// Parameter Descriptions
	if (classDefinition.Parameters.Count()>0) {
		set key=""
		while(1) {
			set parameterDefinition=classDefinition.Parameters.GetNext(.key)
			quit:(key="")
			set out("Parameters",parameterDefinition.Name,"Description")=parameterDefinition.Description
		}
	}
]]></Implementation>
</Method>

<Method name="AddJS">
<Description>
Copy to clipboard
/// /*! \example d ##class(App.LogInfoPane).AddJS("MSW")*/</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>textareaId</FormalSpec>
<Implementation><![CDATA[
 &html<	
 <script language="javascript">
  function copyToClipboard(elementId) {
  // Create a "hidden" input
  var aux = document.createElement("input");
  // Assign it the value of the specified element
  aux.setAttribute("value", document.getElementById(elementId).innerHTML);
  // Append it to the body
  document.body.appendChild(aux);
  // Highlight its content
  aux.select();
  // Copy the highlighted text
  document.execCommand("copy");
  // Remove it from the body
  document.body.removeChild(aux);
}

$('##(textareaId)#').keydown(function (e) {
  if (e.ctrlKey && e.keyCode == 13) {
    // Ctrl-Enter pressed
    document.getElementById('WHAT').value=document.getElementById('#(textareaId)#').value;
    document.forms['loginfo'].submit();
  }
});

// The function of opening the dialog box
function WinOpen(ns,met,el) {
	$("#dialogContent").load("App.Action.cls","appMethod="+met+"&appNsp="+ns+"&appPar="+el);
	//$( "#dialog" ).dialog( "open" );
	// position: { my: 'top', at: 'top+150' },
	$( "#dialog" ).dialog({
		modal: true, 
        title: "Method "+met+" parameter "+decodeURIComponent(el), 
        autoOpen: true, 
        width:800, 
        height:600,
		position: { my: 'top', at: 'top+150' },
		buttons: [
		{
			text: "Cancel",
			click: function() {
				$( this ).dialog( "close" );
			}
		}
		]
		});
	
	event.preventDefault();
}
</script>
>
]]></Implementation>
</Method>

<Method name="Init">
<Description>
The method initializes the developer in the system
/// /*! \example d ##class(App.LogInfoPane).Init(,"MSW")*/</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>username=$username,fio="DEV"</FormalSpec>
<Implementation><![CDATA[	set @$$$MgtPortalSettings@($Username,"DeveloperName")=$g(fio,"DEV")
]]></Implementation>
</Method>

<Method name="GetSysinfo">
<Description>
 d ##class(App.LogInfoPane).GetSysinfo()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>color</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sys=" <a target='license' href=""/csp/sys/op/UtilDashboard.csp?$NAMESPACE=%25SYS""> "_$$$aText("System Dashboard","Системная информация")_"</a>"
	set sysinfo=" "_$$$aText("Server","Сервер")_": <font color="_color_">"_$zu(110)_"</font> "_$$$aText("NameSpace","Область")_": <font color="_color_">"_$zu(5)_"</font> $JOB: <font color="_color_">"_$j_"</font> "_$g(sys)
	set lang=$g(@$$$GNEnsConf@("Language"))
	if lang="" s lang=##class(%MessageDictionary).GetSessionLanguage()
	set list=##class(%MessageDictionary).GetLanguages()
	set key=$lb(""),gGN=""
	for i=1:1:list.Count() {
		s key=key_$lb(list.GetAt(i))
	}
	if 'list.Count() s key=$lb($mvv(58))
	do ##class(App.Form).SelectField(key,"document.getElementById(""AppLang"").value=this.options[this.selectedIndex].value;document.forms[""loginfo""].submit();",key,.gGN,,"ChangeLang",lang,50,1)
	set key="" for i=1:1 {q:'$DATA(gGN(i))  s key=key_gGN(i)}
	q sysinfo_" <input type='hidden' id='AppLang' name='AppLang'>"_key
]]></Implementation>
</Method>

<Method name="AddAction">
<Description>
/*! \example d ##class(App.LogInfoPane)AddAction()*/</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>nameElem="NSP,MaxNode,Filtr,Next,WHAT,tWHAT,exportXLS,exportXLSfile,exportXLSfileEmail,selectDSN,SDNum"</FormalSpec>
<Implementation><![CDATA[
	&html<
	<table>
	 <tr style='vertical-align: middle;' >
	   <td>
		<span class='ui-icon ui-icon-play' name="show" id="show" onclick="document.forms['loginfo'].submit();" title='#($$$aText("Execute and Show","Выполнить и Показать"))#'></span>
		<input type="submit" name="show" id="show" value='#($$$aText("Execute","Выполнить"))#'>
		<span class='ui-icon ui-icon-arrowreturnthick-1-w' onclick='window.history.back(); return false' title='#($$$aText("Go back","Назад"))#'></span>
		#(##class(App.LogInfo).ClearFields(nameElem))# 
	  </td>
	  <td>
	  	#(##class(App.LogInfo).GetInfoImg("tools"))# 
	 </td>
    </tr>
   </table>
	>
	q ""
]]></Implementation>
</Method>

<Method name="AddProdQuery">
<Description>

/*! \example ##class(App.LogInfoPane).AddProdQuery() */</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SDNum,csp="csp"</FormalSpec>
<Implementation><![CDATA[
	&html< <tr style='vertical-align: middle;' >
	<td> | <a target="ensprod" href='#("/"_csp_"/"_$zconvert($zu(5),"L")_"/EnsPortal.ProductionConfig.zen?$NAMESPACE="_$zu(5))#' > #($$$aText("Production","Продукция"))#</a> 
	 | <a target="ensproderr" href='#("/"_csp_"/"_$zconvert($zu(5),"L")_"/EnsPortal.EventLog.zen?$NAMESPACE="_$zu(5))#' > #($$$aText("ProductionErrors","ОшибкиПродукция"))#</a> 
	 | <a target="query" href='#("/csp/sys/exp/%25CSP.UI.Portal.SQL.Home.zen?$NAMESPACE="_$zu(5))#' > #($$$aText("Query","Запросы"))# </a> 
	 | <a target="globals" href='#("/csp/sys/exp/%25CSP.UI.Portal.GlobalList.zen?$NAMESPACE="_$zu(5))#' > #($$$aText("Globals","Глобалы"))# </a> 
	 | #($$$addAppLog($$$aText("WebTerminal","ВебТерминал"),$$$aText("Load WebTerminal","Загрузить Веб Терминал"),"trm",""))#
	 | 
	</td></tr>>
	q ""
]]></Implementation>
</Method>

<Method name="ExportProjects">
<ClassMethod>1</ClassMethod>
<FormalSpec>Dir,files</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	q $$$OK
]]></Implementation>
</Method>

<Method name="GetHelp">
<ClassMethod>1</ClassMethod>
<FormalSpec>help</FormalSpec>
<Implementation><![CDATA[
	#define sH(%msg) set help($i(help))=%msg
	$$$sH("Примеры вызова:")
	$$$sH(" "_$$$addAppLog("^%App.Setting"," Перейти","^%App.Setting","")_" --- Просмотр основных параметров панели")
	$$$sH("obj ##class(App.Log).%New() --- Получить информацию по классу")
	$$$sH("obj ##class(App.Log).%OpenId(15) --- Получить информацию по классу и объекту")
	$$$sH("obj =##class(App.Log).%OpenId(15) --- Получить информацию только по значениям объекта")
	$$$sH(" ")
	$$$sH("xec set obj=##class(App.Log).%OpenId(15)  write ""&lt;pre&gt;"" zw obj w ""&lt;/pre&gt;"" --- Выполнить команду : Показать dump объекта ")
	$$$sH("xec zn ""%SYS"" do ##class(App.sys).SaveQuery(""SYS.Database:FreeSpace"",""^GN"") --- Выполнить команду : Сохранить результат запроса в глобале ")
	$$$sH(" ")
	$$$sH("query ##class(%Library.ResultSet).%New(""%SYSTEM.License:Counts"") --- Выполнить запрос и показать")
	$$$sH("query %SYSTEM.License:Counts --- Выполнить запрос и показать использование лицензий")
	$$$sH("query %SYS.GlobalQuery:NameSpaceList USER --- показать список глобалов в области USER")
	$$$sH("query %SYS.GlobalQuery:Size /opt/isc/ensemble/mgr/USER/ --- посчитать размеры глобалов в базе USER")
	$$$sH(" ")
	$$$sH("select * FROM App.Log order by id desc --- Выполнить произвольный sql запрос")
	$$$sH(" ")
	$$$sH("result ^GN(""SYS.Database:FreeSpace"",""2018-03-27 22:35:20"") --- Вывести записанный в глобал результат запроса ##class(App.sys).SaveQuery")
	$$$sH("--- Если создать регуляное <a href='/csp/sys/op/%25CSP.UI.Portal.TaskSchedule.zen?$NAMESPACE=%25SYS'>задание</a> с legacy методом: s st=##class(App.sys).SaveQuery(""%SYSTEM.License:Counts"")")
	$$$sH("--- То можно будет смотреть динамику использования лицензий")
	
	$$$sH(" "_$$$addAppLog("Log","Перейти к протоколу","log","")_" --- Получить sql запрос по протоколу App.Log "_" "_$$$addAppLog("log-  ","Очистить таблицу протокола","log","")_" Удалить таблицу протокола")
	$$$sH(" ")
	set fio=$g(@$$$MgtPortalSettings@($Username,"DeveloperName"),"DEV")
	set gn=$$$logdevGN_fio
	$$$sH(" "_$$$addAppLog(gn," Перейти к глобалу протокола",gn,"")_" --- Вывести массив. Ограничение "_$$$MAXSHOW_" узлов. "_$$$addAppLog(gn_"-"," Удалить глобал протокола "_gn,gn_"-","")_" - Удалить глобал протокола "_gn)
	set input=$$$logdevGN_fio_"-p"_$j
	set title="Инициализировать отладочный глобал для исследования в процессе "_$j
	$$$sH(" "_$$$addAppLog(input,title,input,"")_" --- "_title_"")
	$$$sH(" "_$$$addAppLog("^*","Список всех глобалов","^*","")_" --- показать список всех глобалов в текущей области")
	$$$sH(" "_$$$addAppLog("^log*","Список глобалов по маске","^log*","")_" --- показать список глобалов по маске")
	$$$sH(" "_$$$addAppLog("^log**","Список глобалов по маске с Allocated MB ","^log**","")_" --- показать список глобалов с занимаемым размером Allocated MB")
	$$$sH(" "_$$$addAppLog("^log***","Список глобалов по маске с Allocated MB и Used MB","^log***","")_" --- показать список глобалов с занимаемым размером Allocated MB и Used MB")
	$$$sH(" ")
	$$$sH(" "_$$$addAppLog("trm"," Перейти к терминалу","trm","")_" --- Открыть встроенный Web Terminal ")
	$$$sH("--- Если этот макрос вставить в исследуемую программу $$$LogDebug(""Отладочная информация"") то в таблице App.Log появися новая запись")
	$$$sH("--- Макрос $$$AppL("""_fio_""",""node"")=$$$AppObJs(object) позволит записать в глобал "_gn_" объект в формате json")
	$$$sH("--- Можно исследовать файлы  <a href='/csp/sys/mgr/%25CSP.UI.Portal.Journal.zen?$NAMESPACE=%25SYS'>журналов</a>")
	$$$sH("--- Запустить в фоновом режиме сканирование журналов для сбора информации о модифицируемых глобалов за вчера")
	$$$sH("xec job ##class(App.files).OneDayJournalCount()::0 if $test write ""Запустили"" --- Внимание! Процесс может быть долгим. Информация о глабалах по умолчанию запишется в "_$$$TEMPJRNL)
	$$$sH("xec do ##class(App.files).Export2CSV() --- Вывести информацию о глобалах из "_$$$TEMPJRNL_" в "_$$$EMAILXLSPATH_"JrnCount*.csv")
	$$$sH(" ")
	$$$sH("post http://User:pass@localhost:57772/apptoolsrest/jsonrpc"_$c(13,10)_"{""jsonrpc"":""2.0"",""method"":""server.shutdown"",""params"":{""server"":""42""},""id"":1} ---  Выполнить http запрос методом POST с телом JSON")
	$$$sH(" ")
	
	;set $$$AppL("MSW","%session3")=$$$AppObJs(##class(%MessageDictionary).GetLanguages())
	quit
	$$$sH(" Максрос $$$AppLog("""_fio_""",""node"",$lb(var1,var2),mode) позволит записать значений переменных var1,var2 в глобал "_gn)
	$$$sH("	Где mode=""svetapdw"" строка симводов")
	$$$sH("	s - Стэк сохраним")
	$$$sH("	t - table App.Log")
	$$$sH("	v - variables")
	$$$sH("	e - записать стэк программой %ETN ") 
	$$$sH(" Если (v)ar, то объекты сериализуются в формате Json, иначе:")
	$$$sH(" a - перечень значений свойств и описание класса")
	$$$sH(" p - только значения")
	$$$sH(" d - zwrite obj вывести в терминале")
	$$$sH(" w - write вывести в терминале")
	
	##;1. MSW tools Исправить ошибку в %ZEN.Generator).%FindLocalizedText()
	;try { Set pTextList(tKey) = "" } catch e {}
	##;2. MSW tools Добавить ссылку в %CSP.Portal.Home).%DrawLinks()
	;Set tOptions($I(n)) = $LB($$$Text("<font color=red>Developers Tools</font>"),"",..Link("/apptools/App.LogInfo.cls?WHAT=%3F"),$$$Text("загрузить инструменты разработчика"))
	##;3. Запретить обновление страницы при завершении сессии   %CSP.Util.AutoPage).DrawAutoLogout() 
	;	If %request.URL '[ "UtilSqlQuery.csp" && ( %request.URL '[ "/App.") { ##; MSW
]]></Implementation>
</Method>
</Class>


<Routine name="App.LogMacro" type="INC" timestamp="65077,57360.393934"><![CDATA[
#include EnsSQLTypes
#Include %occMessages
#Include App.JsonUtils
#;Include %msql $$$MaxStringLength
#;		;2016.2<= set title={}.%FromJSON(json).title 
#;		;2016.1 set title={}.$fromJSON(json).title
#;		set title={}.$$$jsonFromJSON(json).title

#define R(%property) %request.Content.##Expression(%property)
#define RG(%property) %request.Get(%property)
#define StackPlace 		$st($st(-1),"PLACE")
#define CurrentClass 	##Expression($$$quote(%classname))
#define CurrentMethod 	##Expression($$$quote(%methodname))
#define slash $s($zversion(1)=3:"/",1:"\")

#define MethodArguments ##Expression(##class(App.Log).GetMethodArguments(%classname,%methodname))

#define LogEvent(%type, %message) Do ##class(App.Log).AddRecord($$$CurrentClass,$$$CurrentMethod,$$$StackPlace,%type,$$$MethodArguments,%message)
#define LogNone(%message) 		$$$LogEvent("NONE", %message)
#define LogError(%message) 		$$$LogEvent("ERROR", %message)
#define LogFatal(%message) 		$$$LogEvent("FATAL", %message)
#define LogWarn(%message) 		$$$LogEvent("WARN", %message)
#define LogInfo(%message) 		$$$LogEvent("INFO", %message)
#define LogStat(%message) 		$$$LogEvent("STAT", %message)
#define LogDebug(%message) 		$$$LogEvent("DEBUG", %message)
#define LogRaw(%message) 		$$$LogEvent("RAW", %message)

#; Получить дату и время из $h
#define LoggedDT(%h) $s(%h[",":$tr($zd(%h,4),"/",".")_" "_$zt(+$p(%h,",",2),1),1:"")

#; макрос сохраняет в узле глобала стэк вызовов и все локальные переменные 
#; Пример применения: /apptools/App.LogInfo.cls?WHAT=?
#; Если нужна ловушка для конкретного процесса, то присвоить s ^logFIO(0)=Номер процесса
#define LogEventAddGN(%debubGN, %message) s %AppLogId=##class(App.Log).AddRecord($$$CurrentClass,$$$CurrentMethod,$$$StackPlace,"DEBUG",%debubGN,%message)
#define logdevGN 	"^log"
#define MgtPortalSettings 	"^CacheTemp.MgtPortalSettings"
#define AppLogTab(%type,%message,%desc) Do ##class(App.Log).AddRecord($$$CurrentClass,$$$CurrentMethod,$$$StackPlace,%type,%desc,%message)
#define AppLog(%dev,%node,%list,%mode) s zsr=$zr,zsG=$$$logdevGN_%dev  if $g(@zsG@(0))=$j||($g(@zsG@(0))="") { s @zsG@(1,$i(@zsG),%node)=%list,zsGzr=$zr if %mode["t" { $$$LogEventAddGN(zsGzr,%list) } if %mode["s" {s zsG=$na(@($qs(zsGzr,0)_"stack")@($qs(zsGzr,2))),@zsG=$lb($ze,$h,$tl,$io,$j,$zu(110),##class(App.LogInfoPane).GetPathStack(),##class(App.Log).GetClientAddress()) S zs1="",zsG=$na(@zsG@("varList")),zsii=0 k @zsG s:%mode["e" @zsG@("%%%$$LOG^%ETN")=$$LOG^%ETN  if %mode["v" { f { s zs1=$O(@zs1) q:zs1=""  continue:$e(zs1,1,2)="zs"&&(zs1'="zs")  if $d(@zs1)'["0",$isobject(@zs1) { s @zsG@(zs1)=##class(App.Log).SerializeObject(@zs1,$na(@zsG@(zs1))),zsii=zsii+1 } elseif $d(@zs1)>9 {s:$d(@zs1)=11 @zsG@(zs1)=@zs1,zsii=zsii+1 MERGE @zsG@(zs1)=@zs1 if zs1="%zlog" {s zs2="" for {s zs2=$o(@zs1@(zs2)) q:zs2=""   s @zsG@(zs1,zs2)=##class(App.Log).SerializeObject($G(@zs1@(zs2)),$na(@zsG@(zs1,zs2)),%mode)   }}}	 elseif $d(@zs1)=1 {s @zsG@(zs1)=@zs1,zsii=zsii+1}} s @zsG=zsii KILL zsii,zsG,zs1,zs2}else{KILL zsii,zsG,zs1,zs2,zsGzr}} try{ if $d(@zsr) KILL zsr} catch e { KILL zsr}}
#; Добавить активную ссылку на панель
#define addAppLog(%text,%title,%input,%target) "<a title='"_%title_"' "_$g(%target)_" href=""App.LogInfo.cls?NSP="_$zu(5)_"&WHAT="_$zconvert(%input,"O","URL")_""">"_%text_"</a>"

#; Получить дату и время ГГГГ-ММ-ДД ЧЧ:ММ:СС
#define AppDT(%h) $zd(+%h,3)_" "_##class(App.type).GetValidZT(%h)
#define AppObJs(%ob)  $s($isobject(%ob):##class(App.Log).WriteJSONFromObject(%ob),1:%ob)
#define ApplogGN(%fio) ("^log"_$zconvert($e(%fio,1,3),"U"))
#;define AppL(%fio,%node) @$$$ApplogGN(%fio)@($i(@$$$ApplogGN(%fio)),$$$AppDT($h)_" "_%node)
#define AppL(%fio,%node) @$$$ApplogGN(%fio)@($i(@$$$ApplogGN(%fio)),$$$AppDT($h)_" ("_$classname()_")."_%node)

#define forAll(%in,%gn) s gn%in=$na(%gn) s %in="" f { s %in=$o(@gn%in@(%in)) q:%in=""
#define forAllk(%in,%kn,%gn) s gn%in=$na(%gn) s %in="" f %kn=1:1 { s %in=$o(@gn%in@(%in)) q:%in=""
#define endFor  }

#; сохранить имя текущей области
#define NspGoto(%cur,%ns)  s %cur=$zu(5) try {zn %ns} catch e {} 
#; возвратиться в текущую области
#define NspReturn(%cur)  zn %cur
#;---------- верстка
#;
#define appStyleInput " style='border: none;	background: none;	color: inherit;	padding: .222em 0;	margin: .2em 0;	vertical-align: middle;	margin-left: .4em;	margin-right: .4em;' "
#define appInputHidden(%id,%attr,%val) "<input type=hidden "_%attr_" id='"_%id_"' name='"_%id_"' value='"_%val_"'>"
#define appText(%id,%attr,%val) "<span class='ui-spinner ui-corner-all ui-widget ui-widget-content'><input autocomplete='off' "_$$$appStyleInput_" type=text "_%attr_" id='"_%id_"' name='"_%id_"' value='"_%val_"'></span>"
#define appAutocomplete(%id,%attr,%val) "<span class='ui-spinner ui-corner-all ui-widget ui-widget-content'><input id='"_%id_"' name='"_%id_"' "_%attr_" "_$$$appStyleInput_" autocomplete='off' value='"_%val_"'>"
#define appAutocomplete2(%id,%attr,%val) "<input id='"_%id_"' name='"_%id_"' "_%attr_" class='ui-autocomplete-input' autocomplete='off' value='"_%val_"'>"
#define appInput(%id,%attr,%val) "<span class='ui-spinner ui-corner-all ui-widget ui-widget-content'><input autocomplete='off' "_$$$appStyleInput_" "_%attr_" id='"_%id_"' name='"_%id_"' value='"_%val_"'></span>"
#define appButton(%id,%attr,%val) "<input class='ui-button ui-corner-all ui-widget' type=button id='"_%id_"' name='"_%id_"' "_%attr_" value='"_%val_"'>"
#define appTextarea(%id,%attr,%val) "<span class='ui-spinner ui-corner-all ui-widget ui-widget-content'><textarea autocomplete='off' "_$$$appStyleInput_" "_%attr_" id='"_%id_"' name='"_%id_"' >"_%val_"</textarea></span>"
#define appDate(%id,%attr,%val) ""
#define appCheck(%id,%attr,%val) "<input class='ui-button ui-corner-all ui-widget' type=checkbox id='"_%id_"' name='"_%id_"' "_%attr_" value='"_%val_"'>"
#define appSelect(%id,%attr,%val) ""
#define appError(%val) "<div class='ui-widget'><div class='ui-state-error ui-corner-all' style='margin-top: 20px; padding: 1em;'><p><span class='ui-icon ui-icon-alert' style='float: left; margin-right: 3em;'></span>"_%val_"</p></div></div>"
#define appMsg(%val) "<div class='ui-widget'><div class='ui-state-highlight ui-corner-all' style='margin-top: 20px; padding: 1em;'><p><span class='ui-icon ui-icon-info' style='float: left; margin-right: 3em;'></span>"_%val_"</p></div></div>"

#define jsstart w "<script language='javascript'>"
#define jsstop w "</script>"
#define styleurl "text-decoration:underline; color:blue; cursor:hand;"
#define blockui(%msg)  "$.blockUI( { message: '"_%msg_"' , css: { border: 'none', padding: '15px', backgroundColor: '#000', '-webkit-border-radius': '10px','-moz-border-radius': '10px', opacity: .5, color: '#fff' }} );"

#;	Localization
#define GNLangDOMAIN "AppLog"

#define GNEnsConf "^%App.Setting"
/// Global history of command
#define HISTORYGN "^%App.History"
/// Global tempory data
#define TEMPORYGN "^mtempAppData"
/// Global projects in the system
#define PROJGN "^%App.Proj"
/// Global tempory data for Journals
#define TEMPJRNL "^%App.JRNL"
/// Limiting the number of nodes in a global or query result for output
#define MAXSHOW 10000
/// The module display links to the administrative application panel
#define  DRAWAllApp ##class(App.MVK.docbook).GetAllApp(0)

#;;; Parameters dependent on the installation server
#define GNLang "^%AppCacheMsg"
#; Path to CSP apps "/apptools/"
#define  PATHCSP $GET(@$$$GNEnsConf@("PATHCSP")) 
#; Mail Server Settings
#define  EMAILSERVERIP $GET(@$$$GNEnsConf@("EMAILSERVERIP"))
#define  EMAILSERVERPORT $GET(@$$$GNEnsConf@("EMAILSERVERPORT"))
#; Authorization in the mail server
#define  EMAILAUTH $GET(@$$$GNEnsConf@("EMAILAUTH")) 
#define  EMAILAUTHPASS $GET(@$$$GNEnsConf@("EMAILAUTHPASS"))
#; Technical support admin address
#define  EMAILSUPPORT $G(@$$$GNEnsConf@("EMAILSUPPORT")) 
#; Path for temporary xls file before sending to mail
#define  EMAILXLSPATH $G(@$$$GNEnsConf@("EMAILXLSPATH"))
#; Path to storing project sources
#define  EXPORTPROJPATH $G(@$$$GNEnsConf@("EXPORTPROJPATH")) 
#; List of databases to monitor free space in App..Chart.cls?panel=class(App.ChartPanel).ChartDbSize
#define DBCACHESizeMon $G(@$$$GNEnsConf@("DBCACHESizeMon"))

#define aTextOld(%ru,%en) ##function($$AddLangMsg^App.util(%ru,%en))
#define aText(%en,%ru) ##Expression(##class(App.sys).AddLangMsg(%en,%ru))

#; --------------- Прикладной раздел
#define GNmessages "^%App.cconsolelog"
#define DubledQuote(%s)	$replace(%s,"'","''")
#define  TESTSERVER "cip-test.mvk.ru"

]]></Routine>


<Class name="App.Metrics">
<Description>
This class is an object-oriented implementation of ^mgstat routine.
Unlike the last the Caché version check is skipped.
If you want to monitor seizes you should set parameter ISSEIZEGATHERED = 1.
Unlike ^mgstat routine Seizes metrics show as diff (not as percentage).
Some of $zutil functions are unknown for me, but they are used in ^mgstat so they're leaved here.</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64939,47012.609038</TimeChanged>
<TimeCreated>64937,59061.949797</TimeCreated>

<Parameter name="PREFIX">
<Description>
Metrics prefix</Description>
<Default>isc_cache_mgstat_</Default>
</Parameter>

<Parameter name="NL">
<Description>
Metrics for Prometheus must be divided by 'new line'</Description>
<Type>COSEXPRESSION</Type>
<Default>$c(10)</Default>
</Parameter>

<Parameter name="MAXVALUE">
<Description>
Unknown parameter -). Used as in ^mgstat.int</Description>
<Default>1000000000</Default>
</Parameter>

<Parameter name="MAXVALGLO">
<Description>
2**64 - 10. Why minus 10? It's a question -) Used as in ^mgstat.int</Description>
<Default>18446744073709551610</Default>
</Parameter>

<Parameter name="SEIZENAMES">
<Description>
Resources that we are interested to monitor. You can change this list</Description>
<Default>Global,ObjClass,Per-BDB</Default>
</Parameter>

<Parameter name="ISSEIZEGATHERED">
<Description>
Default value - $zutil(69,74). You can start gather seize statistics it by setting "1"</Description>
<Default>0</Default>
</Parameter>

<Parameter name="MAXECPCONN">
<Type>COSEXPRESSION</Type>
<Default>$system.ECP.MaxClientConnections()</Default>
</Parameter>

<Parameter name="NUMBUFF">
<Description>
Number of global buffers types (8K, 16K etc.)</Description>
<Type>COSEXPRESSION</Type>
<Default>$zutil(190, 2)</Default>
</Parameter>

<Parameter name="WDWCHECK">
<Description>
Memory offset (for what? -))</Description>
<Type>COSEXPRESSION</Type>
<Default>$zutil(40, 2, 146)</Default>
</Parameter>

<Parameter name="WDPHASEOFFSET">
<Description>
Memory offset for write daemon phase</Description>
<Type>COSEXPRESSION</Type>
<Default>$zutil(40, 2, 145)</Default>
</Parameter>

<Parameter name="JOURNALBASE">
<Description>
Memory offset for journals</Description>
<Type>COSEXPRESSION</Type>
<Default>$zutil(40, 2, 94)</Default>
</Parameter>

<Method name="getSamples">
<ClassMethod>1</ClassMethod>
<FormalSpec>delay:%Integer=2</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	try {
		set sc = ..gather(.oldValues)
		hang delay
		set sc = ..gather(.newValues)
		set sc = ..diff(delay, .oldValues, .newValues, .displayValues)
		set sc = ..output(.displayValues)
	} catch e {
		write "Error: "_e.Name_"_"_e.Location, ..#NL
	}
	quit sc
]]></Implementation>
</Method>

<Method name="gather">
<ClassMethod>1</ClassMethod>
<FormalSpec>*values</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	
	// Get statistics for globals
	set sc = ..getGlobalStat(.values)
	
	// Get write daemon statistics
	set sc = ..getWDStat(.values)
	
	// Get journal writes
	set values("journal_writes") = ..getJournalWrites()
	
	// Get seizes statistics
	set sc = ..getSeizeStat(.values)
	
	// Get ECP statistics
	;set sc = ..getECPStat(.values)
	
	quit sc
]]></Implementation>
</Method>

<Method name="diff">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[delay:%Integer=2,&oldValues,&newValues,*displayValues]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	
	// Process metrics for globals
	set sc = ..loopGlobal("global", .oldValues, .newValues, delay, 1, .displayValues)
	
	set displayValues("read_ratio") = $select(
		displayValues("physical_reads") = 0: 0,
		1: $number(displayValues("logical_block_requests") / displayValues("physical_reads"),2)
	)
	set displayValues("global_remote_ratio") = $select(
		displayValues("remote_global_refs") = 0: 0,
		1: $number(displayValues("global_refs") / displayValues("remote_global_refs"),2)
	)
	
	// Process metrics for write daemon (not per second)
	set sc = ..loopGlobal("wd", .oldValues, .newValues, delay, 0, .displayValues)
	
	// Process journal writes
	set displayValues("journal_writes") = ..getDiff(oldValues("journal_writes"), newValues("journal_writes"), delay)
	
	// Process seize metrics
	set sc = ..loopGlobal("seize", .oldValues, .newValues, delay, 1, .displayValues)
	
	// Process ECP client metrics
	;set sc = ..loopGlobal("ecp", .oldValues, .newValues, delay, 1, .displayValues)
	;set displayValues("act_ecp") = newValues("act_ecp")
	
	quit sc
]]></Implementation>
</Method>

<Method name="getDiff">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldValue:%Integer,newValue:%Integer,delay:%Integer=2</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if (newValue < oldValue) {
		set diff = (..#MAXVALGLO - oldValue + newValue) \ delay
		if (diff > ..#MAXVALUE) set diff = newValue \ delay
	} else {
		set diff = (newValue - oldValue) \ delay
	}
	quit diff
]]></Implementation>
</Method>

<Method name="loopGlobal">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[subscript:%String,&oldValues,&newValues,delay:%Integer=2,perSecond:%Boolean=1,*displayValues]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	
	set i = ""
	for {
		set i = $order(newValues(subscript, i)) 
		quit:(i = "")
		if (perSecond = 1) {
			set displayValues(i) = ..getDiff(oldValues(subscript, i), newValues(subscript, i), delay)
		} else {
			set displayValues(i) = newValues(subscript, i)
		}
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="output">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&displayValues]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	set i = ""
	for {
		set i = $order(displayValues(i))
		quit:(i = "")
		write ..#PREFIX_i," ", displayValues(i),..#NL
	}
	write ..#NL
	quit sc
]]></Implementation>
</Method>

<Method name="getGlobalStat">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&values]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	
	set gloStatDesc = "routine_refs,remote_routine_refs,routine_loads_and_saves,"_
		"remote_routine_loads_and_saves,global_refs,remote_global_refs,"_
		"logical_block_requests,physical_reads,physical_writes,"_
		"global_updates,remote_global_updates,routine_commands,"_
		"wij_writes,routine_cache_misses,object_cache_hit,"_
		"object_cache_miss,object_cache_load,object_references_newed,"_
		"object_references_del,process_private_global_refs,process_private_global_updates"
		
	set gloStat = $zutil(190, 6, 1)
	
	for i = 1:1:$length(gloStat, ",") {
		set values("global", $piece(gloStatDesc, ",", i)) = $piece(gloStat, ",", i)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="getWDStat">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&values]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	
	set tempWdQueue = 0 
	for b = 1:1:..#NUMBUFF { 
		set tempWdQueue = tempWdQueue + $piece($zutil(190, 2, b), ",", 10) 
	}
	
	set wdInfo = $zutil(190, 13)
	set wdPass = $piece(wdInfo, ",")
	set wdQueueSize = $piece(wdInfo, ",", 2)
	set tempWdQueue = tempWdQueue - wdQueueSize 
	if (tempWdQueue < 0) set tempWdQueue = 0
	
	set misc = $zutil(190, 4)
	set ijuLock = $piece(misc, ",", 4)
	set ijuCount = $piece(misc, ",", 5)
	
	set wdPhase = 0 
	if (($view(..#WDWCHECK, -2, 4)) && (..#WDPHASEOFFSET)) {
		set wdPhase = $view(..#WDPHASEOFFSET, -2, 4)
	}
	
	set wdStatDesc = "write_daemon_queue_size,write_daemon_temp_queue,"_
		"write_daemon_pass,write_daemon_phase,iju_lock,iju_count"
	
	set wdStat = wdQueueSize_","_tempWdQueue_","_wdPass_","_wdPhase_","_ijuLock_","_ijuCount
	
	for i = 1:1:$length(wdStat, ",") {
		set values("wd", $piece(wdStatDesc, ",", i)) = $piece(wdStat, ",", i)
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="getJournalWrites">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $view(..#JOURNALBASE, -2, 4)
]]></Implementation>
</Method>

<Method name="getSeizeStat">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&values]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	
	set seizeStat = "", seizeStatDescList = ""
	set selectedNames = ..#SEIZENAMES
	
	set seizeNumbers = ..getSeizeNumbers(selectedNames)  // seize statistics
	set isSeizeGatherEnabled = ..#ISSEIZEGATHERED
	if (seizeNumbers = "") { 
		set SeizeCount = 0 
	} else { 
		set SeizeCount = isSeizeGatherEnabled * $length(seizeNumbers, ",") 
	}
	
	for i = 1:1:SeizeCount { 
		set resource = $piece(seizeNumbers, ",", i)
		set resourceName = ..getSeizeLowerCaseName($piece(selectedNames, ",", i))
		set resourceStat = $zutil(162, 3, resource)
		set seizeStat = seizeStat_$listbuild($piece(resourceStat, ","))
		set seizeStat = seizeStat_$listbuild($piece(resourceStat, ",", 2))
		set seizeStat = seizeStat_$listbuild($piece(resourceStat, ",", 3))
		set seizeStatDescList = seizeStatDescList_$listbuild(
			resourceName_"_seizes", resourceName_"_n_seizes", resourceName_"_a_seizes"
		)
	}
	set seizeStatDesc = $listtostring(seizeStatDescList, ",")
	
	set seizeStat = $listtostring(seizeStat, ",")
	
	if (seizeStat '= "") {
		for k = 1:1:$length(seizeStat, ",") {
			set values("seize", $piece(seizeStatDesc, ",", k)) = $piece(seizeStat, ",", k)
		}
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="getSeizeNumbers">
<ClassMethod>1</ClassMethod>
<FormalSpec>selectedNames:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/// USER>write $zu(162,0)
	// Pid,Routine,Lock,Global,Dirset,SatMap,Journal,Stat,GfileTab,Misc,LockDev,ObjClass...
	set allSeizeNames = $zutil(162,0)_"," //Returns all resources names
	
	set seizeNumbers = ""
	for i = 1:1:$length(selectedNames, ",") {
		set resourceName = $piece(selectedNames,",",i)
		continue:(resourceName = "")||(resourceName = "Unused")
		set resourceNumber = $length($extract(allSeizeNames, 1, $find(allSeizeNames, resourceName)), ",") - 1
		continue:(resourceNumber = 0)
		if (seizeNumbers = "") {
			set seizeNumbers = resourceNumber
		} else {
			set seizeNumbers = seizeNumbers_","_resourceNumber
		}
	}
	quit seizeNumbers
]]></Implementation>
</Method>

<Method name="getSeizeLowerCaseName">
<ClassMethod>1</ClassMethod>
<FormalSpec>seizeName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $tr($zcvt(seizeName, "l"), "-", "_")
]]></Implementation>
</Method>

<Method name="getECPStat">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&values]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	
	set ecpStat = ""
	
	if (..#MAXECPCONN '= 0) {
		set fullECPStat = $piece($system.ECP.GetProperty("ClientStats"), ",", 1, 21)
		set activeEcpConn = $system.ECP.NumClientConnections()
		set addBlocks = $piece(fullECPStat, ",", 2)
		set purgeBuffersByLocal = $piece(fullECPStat, ",", 6)
		set purgeBuffersByRemote = $piece(fullECPStat, ",", 7)
		set bytesSent = $piece(fullECPStat, ",", 19)
		set bytesReceived = $piece(fullECPStat, ",", 20)
	}
	set ecpStatDesc = "add_blocks,purge_buffers_local,"_
		"purge_server_remote,bytes_sent,bytes_received"
	
	set ecpStat = addBlocks_","_purgeBuffersByLocal_","_
		purgeBuffersByRemote_","_bytesSent_","_bytesReceived
		
	if (ecpStat '= "") {
		for l = 1:1:$length(ecpStat, ",") {
			set values("ecp", $piece(ecpStatDesc, ",", l)) = $piece(ecpStat, ",", l)
		}
		set values("act_ecp") = activeEcpConn
	}
	
	quit sc
]]></Implementation>
</Method>
</Class>


<Class name="App.Parameter">
<Description>
Параметры для панели администратора</Description>
<Super>%Persistent,App.Form</Super>
<TimeChanged>65084,77072.175147</TimeChanged>
<TimeCreated>64695,66336.883011</TimeCreated>

<Parameter name="AppORDERPROPERTY">
<Description>
Порядок свойств при выводе в форме</Description>
<Default>Namespace,ServerName,PATHCSPUI,TESTSERVER,EMAILSERVERIP,EMAILSERVERPORT,EMAILAUTH,EMAILAUTHPASS,EMAILSUPPORT,EMAILXLSPATH,DateStart,DateFinish</Default>
</Parameter>

<Property name="Namespace">
<Description>
Namespace $zu(5)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ServerName">
<Description>
ServerName $zu(110) </Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="PATHCSPUI">
<Description>
Путь к приложению jQuery-UI </Description>
<Type>%String</Type>
<InitialExpression>"/csp/log/jqueryui/"</InitialExpression>
<Parameter name="MAXLEN"/>
</Property>

<Property name="TESTSERVER">
<Description>
Имя тестового сервера (Для Админок проектов)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EMAILSERVERIP">
<Description>
Настройки почтового сервера IP (Для Админок проектов)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EMAILSERVERPORT">
<Description>
Порт почтового сервера (Для Админок проектов)</Description>
<Type>%String</Type>
<InitialExpression>25</InitialExpression>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EMAILAUTH">
<Description>
Авторизация в почтовом сервера User (Для Админок проектов)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EMAILAUTHPASS">
<Description>
Авторизация в почтовом сервера Password (Для Админок проектов)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EMAILSUPPORT">
<Description>
Адрес админа техподдержки (Для Админок проектов)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EMAILXLSPATH">
<Description>
Путь для временного XLS файла перед посылкой на почту  (Для Админок проектов)</Description>
<Type>%String</Type>
<InitialExpression>"/backup/temp/integ/"</InitialExpression>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DateStart">
<Description>
​​Дата выборки протокола с
{"displayname":"Дата выборки протокола с","title":"введите дату","inputtype":"date"}</Description>
<Type>%String</Type>
<InitialExpression>##class(App.type).GetYear($h)_"-01-01"</InitialExpression>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DateFinish">
<Description>
​​Дата выборки протокола по
{"displayname":"Дата выборки протокола по","title":"введите дату","inputtype":"date"}</Description>
<Type>%String</Type>
<InitialExpression>##class(App.type).GetYear($h)_"-12-31"</InitialExpression>
<Parameter name="MAXLEN"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^%App.ParameterD</DataLocation>
<DefaultData>ParameterDefaultData</DefaultData>
<IdLocation>^%App.ParameterD</IdLocation>
<IndexLocation>^%App.ParameterI</IndexLocation>
<StreamLocation>^%App.ParameterS</StreamLocation>
<Data name="ParameterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>name</Value>
</Value>
<Value name="3">
<Value>dob</Value>
</Value>
<Value name="4">
<Value>ts</Value>
</Value>
<Value name="5">
<Value>num</Value>
</Value>
<Value name="6">
<Value>Namespace</Value>
</Value>
<Value name="7">
<Value>TESTSERVER</Value>
</Value>
<Value name="8">
<Value>EMAILSERVERIP</Value>
</Value>
<Value name="9">
<Value>EMAILSERVERPORT</Value>
</Value>
<Value name="10">
<Value>EMAILAUTH</Value>
</Value>
<Value name="11">
<Value>EMAILAUTHPASS</Value>
</Value>
<Value name="12">
<Value>EMAILSUPPORT</Value>
</Value>
<Value name="13">
<Value>EMAILXLSPATH</Value>
</Value>
<Value name="14">
<Value>PATHCSPUI</Value>
</Value>
<Value name="15">
<Value>ServerName</Value>
</Value>
<Value name="16">
<Value>DateStart</Value>
</Value>
<Value name="17">
<Value>DateFinish</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="App.RestMetrics">
<IncludeCode>App.LogMacro</IncludeCode>
<Super>%CSP.REST</Super>
<TimeChanged>65073,42683.270826</TimeChanged>
<TimeCreated>64939,46779.170246</TimeCreated>

<Parameter name="ISCPREFIX">
<Default>isc_cache</Default>
</Parameter>

<Parameter name="DASHPREFIX">
<Expression>..#ISCPREFIX_"_dashboard"</Expression>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/jsonrpc" Method="POST" Call="jsonrpc"/>
<Route Url="/cache" Method="GET" Call="getMetrics"/>
<Route Url="/mgstat/:delay" Method="GET" Call="getMgstat"/>
<Route Url="/db" Method="GET" Call="getDBsize"/>
<Route Url="/dirsize/:path" Method="GET" Call="getDirSize"/>
<Route Url="/proj/:proj/:metrics/:mode" Method="GET" Call="getProj"/>
</Routes>
]]></Data>
</XData>

<UDLText name="T">
<Content><![CDATA[
/*{"jsonrpc": "2.0", "result": {"likes": 123}, "id": 1}
Если возникает ошибка — ответ об ошибке:
{"jsonrpc": "2.0", "error": {"code": 666, "message": "Post not found"}, "id": "1"}
И это всё!
Бонусом поддерживаются batch-операции:
Request:
[
  {"jsonrpc":"2.0","method":"server.shutdown","params":{"server":"42"},"id":1},
  {"jsonrpc":"2.0","method":"server.remove","params":{"server":"24"},"id":2}
]
Response:
[
  {"jsonrpc":"2.0","result":{"status":"down"},"id":1}
  {"jsonrpc":"2.0","error":{"code":1234,"message":"Server not found"},"id": 2}
]
*/
]]></Content>
</UDLText>

<Method name="jsonrpc">
<Description>
JSON-RPC 2.0 https://www.jsonrpc.org/specification</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	;w !,"{""test"":123}",!
	;s $$$AppL("MSW","jsonrpc-req")=$$$AppObJs(%request)
	if %request.Method = "POST" {
		if $isobject(%request.Content) { //POST
	 		set stream=%request.Content
			set sc=##class(App.files).Stream2String(stream,.json)
			if 'sc q sc
	 		if $g(json)["{" {
	 			set method={}.$$$jsonFromJSON(json).method
	 			set params={}.$$$jsonFromJSON(json).params
	 			set jsonrpc={}.$$$jsonFromJSON(json).jsonrpc
	 			set id={}.$$$jsonFromJSON(json).id
	 			if jsonrpc'="2.0" q ..jsonrpcError(2,"Version not supported "_jsonrpc)
	 			w params.$$$jsonToJSON() //write string json
	 			
	 		}
	 		;d ..ParseJson(.str,.appClass,.appMethod,.appPar) ;m appPar("%request.Content")=str  m appPar("%request")=$$$AppObJs(%request)
	 		m $$$AppL("MSW","Content")=str
 		}
	} else {
		 q ..jsonrpcError(2,"Method not supported "_%request.Method)
		;$$$ThrowStatus($$$ERROR($$$GeneralError, "Метод не POST")) 
	}
	try {
		;
	} catch ex {
		set sc = ex.AsStatus()
	}
	return sc
]]></Implementation>
</Method>

<Method name="jsonrpcError">
<Description>
JSON-RPC 2.0 https://www.jsonrpc.org/specification</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code,msg</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "{""jsonrpc"":""2.0"",""error"":{""code"":"""_code_""",""message"":"""_msg_"""}}",!
	q $$$OK
]]></Implementation>
</Method>

<Method name="getProj">
<Description>
Получить отсортированные размеры подокаталогов
w ##class(App.RestMetrics).getProj("/opt/isc/ensemble/mgr/")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>proj,metrics,mode</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	q ##class(App.MVK.Metrics).getProj(proj, metrics, mode)
]]></Implementation>
</Method>

<Method name="getDirSize">
<Description>
Получить отсортированные размеры подокаталогов для Linux
w ##class(App.RestMetrics).getDirSize("/opt/isc/ensemble/mgr/")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[path="",&res,minsize=10]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s gn = "^||tmpfile"
	d ##class(App.files).getPathcconsole(.dir,.logname)
	i $g(path)="" s path=dir ;место расположение баз данных по умолчанию
	i $zv'["Linux" q $$$OK  ;для других ОС не реализовано
	s st=$$$OK
	s curNs=$zu(5)
	zn "%sys"
	s prefix = ..#ISCPREFIX_"_dirsize"
	s tempfile=$SYSTEM.Util.InstallDirectory()_"mgr/Temp/dirsize.log"
	k @gn set nl = $c(10)
	try {
		s cmd="du -sm "_path_"*| sort -nr >"_tempfile
		set result = $zf(-1, cmd)
		if (result '= 0) { 
			w !,$System.Status.GetErrorText(result)
			$$$ThrowStatus($$$ERROR($$$GeneralError, "Ошибка кода возврата:" _ result_" для "_cmd)) 
		}
		else {
			s size=##class(App.files).File2Arr(tempfile,gn,"RSK\UTF8\")
			;w !,size,!			;zw ^tmpfile			w 222222
			f i=1:1 { q:'$d(@gn@(i))   ;пройдем циклом по всему отчету
				continue:$p(@gn@(i),$c(9))'>minsize ;исключим маленькие и пустые каталоги
				s str=$g(@gn@(i))
				i $d(res) s res(i)=$P(str,$c(9),2)_" "_$P(str,$c(9),1)
				else  w prefix_"_"_$P(str,$c(9),2)_" "_$P(str,$c(9),1)_nl
			}
		}
	} catch ex {
		set st = ex.AsStatus()
		;$$$TRACE($system.Status.GetErrorText(st))
	}
	zn curNs
	quit st
]]></Implementation>
</Method>

<Method name="getDBsize">
<Description>
Размер баз данных в Гигабайтах
d ##class(App.RestMetrics).getDBsize("dbsize",.list)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prefix=..#ISCPREFIX_"_dbsize",dbname,int=1,all=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set nl = $c(10)
	s curNs=$zu(5)
	zn "%sys"
	s st=##class(App.sys).SaveQuery("SYS.Database:FreeSpace","^||db")
	s r=$q(^||db("")) ;получить первую ссылку
	s r=$na(^||db($qs(r,1),$qs(r,2))) ;возьмем первые 2 индекса в ссылку
	s listDb=$$$DBCACHESizeMon
	i listDb="" s listDb=##class(App.sys).ListDB(.info,"NotPre,NotTemp")
	f i=1:1 { q:'$d(@r@(i))   ;пройдем циклом по всему отчету
		continue:$g(@r@(i,1))=""
		;по умолчанию приведем все размеры к Гигабайтам
		s free=$g(@r@(i,8))
		s dir=$g(@r@(i,2))
		s name=$g(@r@(i,1))
		i 'all,(","_listDb_",")'[(","_name_",") continue
		i 'all,(dir)[("secondary/")||((dir)[("temp/")) continue
		s size=$g(@r@(i,4))
		if size["MB" {s size=$j(size/(1024),"",3) ;если в мб то разделим
		}
		elseif size["TB" {s size=size*1024  ;если в тб то умножим
		}
		else {
			s size=+size  ;если в гб то переведем в число
		}
		s dbname(dir)=size
		s dbname(dir,"name")=name
		s dbname(dir,"free")=+free
		;i $p(dir,"/")'=""  s total($p(dir,"/"))=$g(total($p(dir,"/")))+size
		w:'int prefix_"_"_name_" "_size_nl
		w:'int prefix_"_"_name_"_DiskFreeSpace "_(+free)_nl
	}
	zn curNs
	write nl
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getMgstat">
<Description>
Метрики СУБД из Хабра...</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>delay:%Integer=2</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// By default, we use 2 second interval for averaging
	quit ##class(App.Metrics).getSamples(delay)
]]></Implementation>
</Method>

<Method name="getMetrics">
<Description>
Output should obey the Prometheus exposition formats. Docs:
https://prometheus.io/docs/instrumenting/exposition_formats/

The protocol is line-oriented. A line-feed character (\n) separates lines. 
The last line must end with a line-feed character. Empty lines are ignored.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set nl = $c(10)
	s curNs=$zu(5)
	zn "%sys"
	do ..getDashboardSample(.dashboard)
	do ..getClassProperties(dashboard.%ClassName(1), .propList, .descrList)
	
	for i=1:1:$ll(propList) {
		set descr = $lg(descrList,i)
		set propertyName = $lg(propList,i)
		set propertyValue = $property(dashboard, propertyName)
		
		// Prometheus supports time series database 
		// so if we get empty (for example, backup metrics) or non-digital metrics 
		// we just omit them.
		if ((propertyValue '= "") && ('$match(propertyValue, ".*[-A-Za-z ]+.*"))) {
			set metricsName = ..#DASHPREFIX_..camelCase2Underscore(propertyName)
			set metricsValue = propertyValue
			
			// Write description (help) for each metrics.
			// Format is that the Prometheus requires.
			// Multiline descriptions we have to join in one string.
			write "# HELP "_metricsName_" "_$replace(descr,nl," ")_nl
			write metricsName_" "_metricsValue_nl
		}
	}
	zn curNs
	write nl
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getDashboardSample">
<ClassMethod>1</ClassMethod>
<FormalSpec>*dashboard</FormalSpec>
<Implementation><![CDATA[
	new $namespace
	set $namespace = "%SYS"
	set dashboard = ##class(SYS.Stats.Dashboard).Sample()
]]></Implementation>
</Method>

<Method name="getClassProperties">
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,*propList:%List,*descrList:%List</FormalSpec>
<Implementation><![CDATA[
	new $namespace
	set $namespace = "%SYS"
	
	set propList = "", descrList = ""
	set properties = ##class(%Dictionary.ClassDefinition).%OpenId(className).Properties
	
	for i=1:1:properties.Count() {
		set property = properties.GetAt(i)
		set propList = propList_$lb(property.Name)
		set descrList = descrList_$lb(property.Description)
	}
]]></Implementation>
</Method>

<Method name="camelCase2Underscore">
<Description>
Converts metrics name in camel case to underscore name with lower case
Sample: input = WriteDaemon, output = _write_daemon</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>metrics:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result = metrics
	set regexp = "([A-Z])"
	set matcher = ##class(%Regex.Matcher).%New(regexp, metrics)
	while (matcher.Locate()) {
		set result = matcher.ReplaceAll("_"_"$1")
	}
	
	// To lower case
	set result = $zcvt(result, "l")
	
	// _e_c_p (_c_s_p) to _ecp (_csp)
	set result = $replace(result, "_e_c_p", "_ecp")
	set result = $replace(result, "_c_s_p", "_csp")
	
	quit result
]]></Implementation>
</Method>
</Class>


<Class name="App.TabsPanel">
<Description>
Шаблон GUI приложения с селектором и вкладками / Simple GUI Application Template</Description>
<ClassType/>
<IncludeCode>App.LogMacro</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>65071,33345.453343</TimeChanged>
<TimeCreated>65065,36454.902831</TimeCreated>

<Parameter name="HeaderText">
<Description>
Заголовок приложения / Application title</Description>
<Default>Tabs Application title</Default>
</Parameter>

<Parameter name="PrefixIdDIV">
<Description>
Префикс идентификатора контейнера</Description>
<Default>Exp</Default>
</Parameter>

<Method name="OnPage">
<Description>
Главный метод формирования содержимого страницы</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 s NSpace=$zu(5)
 // Сохраним в параметрах сессии режим отладки (подразумевает расширенное информирование)
 s %session.Data("debug")=%request.Get("debug")
 &html<
 <html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>#(..#HeaderText)#</title>
<script src="/csp/spgz/jqueryui/external/jquery/jquery.js"></script>
<script src="/csp/spgz/jqueryui/jquery-ui.js"></script>
<script src="/csp/spgz/jqueryui/jquery.blockui.js"></script>

<!-- Контрол Множественного выбора -->
<script src="/csp/spgz/jqueryui/selectize.js"></script>
<link rel="stylesheet" type="text/css" href="/csp/spgz/jqueryui/selectize.default.css"/>

<link rel="stylesheet" type="text/css" href="/csp/spgz/jqueryui/css/main.css"/>
<link href="/csp/spgz/jqueryui/jquery-ui.css" rel="stylesheet">
<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>
 <style type="text/css">

</style>
</head>
<body>
 <div id="MainBody">
  <nav style='background: #d7ebf9;' > 
    &nbsp;&nbsp;&nbsp;  
    	<img  title='заголовок' style='vertical-align: middle;' src="???.png" />  &nbsp;&nbsp;&nbsp; 
 	<div id="MainControlgroup" > </div>
 	<span id='status_nav'> Статус сессии </span>
 	<div id="logo" style='text-align: right;'>
 		<img  title='#(..GetSupportInfo())#' src="???.png" />
 	</div>
  </nav> 
 <div id="tabs"> </div>
</div>
>
 // Режим отладки 1
 q:..IsDebugMode(0) $$$OK
 $$$jsstart
 	;w $$$blockui("Загрузка...")
    // Загрузить доступные режимы меню
 	w "$('#MainControlgroup').load('App.Action.cls','appClass="_..%ClassName(1)_"&appMethod=DrawMenu&appNsp="_NSpace_"&appPar=');"
 	//Загрузить статус
 	w "$('#status_nav').load('App.Action.cls','appClass="_..%ClassName(1)_"&appMethod=DrawStatus&appNsp="_NSpace_"&appPar=');"
    //Загрузить табы
 	w "$('#tabs').load('App.Action.cls','appClass="_..%ClassName(1)_"&appMethod=DrawTabs&appNsp="_NSpace_"&appPar=');"
 $$$jsstop
 
 &html< 	
 <script language="javascript">
$( ".tip" ).tooltip();
</script>
<div id='MainHidden' style='display:none;'></div>
</body>
</html>
	>
 quit $$$OK
]]></Implementation>
</Method>

<Method name="GetSupportInfo">
<Description>
Получить информацию по техподдержке</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s msg=$$$aText("Software complex to debug. Try to log in later, or contact tech support:","Программный комплекс на отладке. Попробуйте войти попозже, или обратитесь тех.поддержку: ")
	q msg_"Support info mailto: sergey.mikhaylenko@gmail.com"
]]></Implementation>
</Method>

<Method name="IsDebugMode">
<Description>
Добавить на форму  js код если режим разработки</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mode=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 i mode,'%request.Get("debug") { 
	$$$jsstart
	  w $$$blockui(..GetSupportInfo())
	$$$jsstop
	w "</body></html>"
  q $$$OK
 }
	q 0
]]></Implementation>
</Method>

<Method name="DrawStatus">
<Description>
отрисовка меню</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;do ##class(App.Form).BlockUI(0)
	w $s(%request.Get("debug"):"<font color=red><b>Режим админа</b></font>",1:"")_" <span class='tip' title='"_$username_"-"_$j_"'>Пользователь: "_##class(App.MVK.EISinfo).GetFIO($username)_"</span>, "_$tr(##class(App.type).GetDateTime($h),"T"," ")
 	$$$jsstart
	w "$('.tip').tooltip();"
	$$$jsstop
 q $$$OK
]]></Implementation>
</Method>

<Method name="Permiss">
<Description>
какие доступны режимы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>opt</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;TODO права доступа к страницам
	;TODO сохранить в БД таблицы
	s key="zspr"
	s opt(key)="Справочники"
	s opt(key,"id")="Class"
	s opt(key,"TabName")="Справочники"
	s opt(key,"ClassName")="App.PatternSimpleApp"
	s opt(key,"Method")="ShowTabSample"
	s opt(key,"Disable")=0 ;разрабатывается

	s key="zspr2"
	s opt(key)="Справочники2"
	s opt(key,"id")="Class2"
	s opt(key,"TabName")="Справочники2"
	s opt(key,"ClassName")="App.PatternSimpleApp"
	s opt(key,"Method")="ShowTabSample"
	s opt(key,"Disable")=1 ;разрабатывается
	
	q $$$OK
]]></Implementation>
</Method>

<Method name="ShowTabSample">
<Description>
отрисовка Вкладки ранее переданных
Par - код пункта меню из ..Permiss</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ..Permiss(.opt) 
	i $g(opt(Par,"Disable")) w ..GetSupportInfo() q $$$OK
	w "Hello world! Parameter: "_Par
	w ..ButtonAgain()
]]></Implementation>
</Method>

<Method name="ShowTab">
<Description>
отрисовка Вкладки
Par - код пункта меню из ..Permiss</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ..Permiss(.opt) 
	s tabId="tabs-"_opt(Par,"id")
 	$$$jsstart
 		w "var a = $('#li-"_tabId_"'); a.show();" ; откроем вкладку
 		w "var index = $('#tabs a[href=""#"_tabId_"""]').parent().index();"
		w "$('#tabs').tabs({'active':index});" ;сделаем ее активной
 		;w "alert('"_tabId_"');"
 		if $g(opt(Par,"Url"))'="" w "$('#"_tabId_"').load('AsuPriz.MVK.Export.cls');"
 		else  w "$('#"_tabId_"').load('App.Action.cls','appClass="_$g(opt(Par,"ClassName"))_"&appMethod="_$g(opt(Par,"Method"))_"&appNsp="_$zu(5)_"&appPar="_Par_"');"
	$$$jsstop
]]></Implementation>
</Method>

<Method name="DrawMenu">
<Description>
отрисовка меню</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	d ..Permiss(.opt) 
	s onc="$('#MainHidden').load('App.Action.cls','appClass="_..%ClassName(1)_"&appMethod=ShowTab&appNsp="_$zu(5)_"&appPar='+this.options[this.selectedIndex].value);"
	w "<select id=""menu-spgz"" >"
	s i="" w "<option VALUE=0> </option>"
	f { s i=$o(opt(i)) q:i=""  
		w "<option VALUE="""_i_""">"_opt(i)_"</option>"
	}
 	w "</select>"
 	w ..ButtonExit("MainBody")
 	$$$jsstart
		w "$( ""#MainControlgroup"" ).controlgroup();"
 		w "$( ""#menu-spgz"" ).selectmenu({ change: function( event, data ) { "_onc_" }, width:600 }).selectmenu('menuWidget');"
	$$$jsstop
  q $$$OK
]]></Implementation>
</Method>

<Method name="DrawTabs">
<Description>
отрисовка табов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ..Permiss(.opt)
	w "<ul>"
	s i="" f { s i=$o(opt(i)) q:i=""  
		s tabs(i)="tabs-"_$g(opt(i,"id"))
		w "<li id=""li-"_tabs(i)_"""><a href=""#"_tabs(i)_""">"_opt(i,"TabName")_"</a></li>"
	}
 	w "</ul>"
 	s i="" f { s i=$o(tabs(i)) q:i=""  
 		w "<div id='"_tabs(i)_"' style='height: 85%' ></div>"
 	}
 	$$$jsstart
		w "$( ""#tabs"" ).tabs();"
		;Все табы сразу скроем после инициализации, будем их открывать по мере выбора
		s i="" f { s i=$o(tabs(i)) q:i=""  
			w "var a = $('#li-"_tabs(i)_"'); a.hide();"
		}
	$$$jsstop
	q $$$OK
]]></Implementation>
</Method>

<Method name="ButtonExit">
<Description>
Вывод кнопки выхода</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>formName</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set onclick="$('#"_formName_"').load('App.Action.cls','appClass="_..%ClassName(1)_"&appMethod=Logout&appNsp="_$zu(5)_"&appPar=Выход произведен');"
	q $$$appButton("appButtonExit","onclick="""_$g(onclick)_"""","Выход")
]]></Implementation>
</Method>

<Method name="AddToForm">
<Description>
Добавить на форму  js код</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	q $$$OK
]]></Implementation>
</Method>

<Method name="Logout">
<Description>
Возврат в одной строке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Par</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ##class(App.sys).logout()
	w $$$appMsg($g(Par)) w "<br>"
	d ##class(App.Form).ButtonRef("Вход")
  	q $$$OK
]]></Implementation>
</Method>

<Method name="ButtonAgain">
<Description>
Вывод кнопки Сначала для Вкладки TmcMainForm ShowTabTmc </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   	s formName=..#PrefixIdDIV_"MainContent"
	s Method="ShowTab"_..#PrefixIdDIV
	set onclick="$('#"_formName_"').load('App.Action.cls','"_..#PrefixIdDIV_"appClass="_..%ClassName(1)_"&"_..#PrefixIdDIV_"appMethod="_Method_"&"_..#PrefixIdDIV_"appNsp="_$zu(5)_"&"_..#PrefixIdDIV_"appPar=1');"
	q $$$appButton("appButtonExit","onclick="""_$g(onclick)_"""","Сначала")
]]></Implementation>
</Method>
</Class>


<Class name="App.Task.CustomListBackup">
<Description>
Backup task class</Description>
<IncludeCode>%occKeyword</IncludeCode>
<Modified>0</Modified>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>65032,53023.02821</TimeChanged>
<TimeCreated>64658,42115.283843</TimeCreated>
<LegacyInstanceContext>1</LegacyInstanceContext>

<Property name="AllDatabases">
<Description>
If ..AllDatabases=1, include all databases into the backup copy ..PrefixIncludeDB and ..IncludeDatabases are ignored</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IgnoreForAllDatabases">
<Description>
If ..AllDatabases=1, include all databases into the backup copy, excluding from ..IgnoreForAllDatabases (comma-delimited)</Description>
<Type>%String</Type>
<InitialExpression>"Not applied if AllDatabases=0 "</InitialExpression>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="IgnoreTempDatabases">
<Description>
If ..IgnoreTempDatabases=1, exclude temporary databases</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="IgnorePreparedDatabases">
<Description>
If ..IgnorePreparedDatabases=1, exclude pre-installed databases</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="PrefixIncludeDB">
<Description>
If ..AllDatabases=0 and PrefixIncludeDB is not empty, we will be backing up all databases starting with ..PrefixIncludeDB</Description>
<Type>%String</Type>
<SqlComputeCode>S {*}=..ListNS()</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="IncludeDatabases">
<Description>
If ..AllDatabases=0, back up all databases from ..IncludeDatabases (comma-delimited)</Description>
<Type>%String</Type>
<InitialExpression>"Not applied if AllDatabases=1"_..ListDB()</InitialExpression>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Parameter name="TaskName">
<Description>
Name of the task on the general list</Description>
<Default>CustomListBackup</Default>
</Parameter>

<Property name="DirBackup">
<Description>
Path for the backup file</Description>
<Type>%String</Type>
<InitialExpression>##class(%File).NormalizeDirectory("Backup")</InitialExpression>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="DirBackupLog">
<Description>
Path for the log</Description>
<Type>%String</Type>
<InitialExpression>##class(%File).NormalizeDirectory("Backup")</InitialExpression>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="TypeBackup">
<Description>
Backup type (Full, Incremental, Cumulative)</Description>
<Type>%String</Type>
<InitialExpression>"Full"</InitialExpression>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="DISPLAYLIST" value=",Full,Incremental,Cumulative"/>
<Parameter name="VALUELIST" value=",Full,Inc,Cum"/>
</Property>

<Property name="PrefixBackUpFile">
<Description>
Backup file name prefix</Description>
<Type>%String</Type>
<InitialExpression>"back"</InitialExpression>
</Property>

<Property name="MaxBackUpFiles">
<Description>
The maximum number of backup files, delete the oldest ones</Description>
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Method name="DeviceIsValid">
<ClassMethod>1</ClassMethod>
<FormalSpec>Directory:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '##class(%Library.File).DirectoryExists(Directory) quit $$$ERROR($$$GeneralError,"Directory does not exist")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckBackup">
<ClassMethod>1</ClassMethod>
<FormalSpec>Device,MaxBackUpFiles,del=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set path=##class(%File).NormalizeFilename(Device)
	quit:'##class(%File).DirectoryExists(path) $$$ERROR($$$GeneralError,"Folder "_path_" does not exist")
	set max=MaxBackUpFiles
	set result=##class(%ResultSet).%New("%File:FileSet")
	set st=result.Execute(path,"*.cbk",,1)
	while result.Next()
	{	If result.GetData(2)="F"	{
			continue:result.GetData(3)=0
			set ts=$tr(result.GetData(4),"-: ")
			set ts(ts)=$lb(result.GetData(1),result.GetData(3))			
		}
	}
	#; Let’s traverse all the files starting from the newest one
	set i="" for count=1:1 { set i=$order(ts(i),-1) quit:i=""
		#; Get the increase in bytes as a size difference with the previous backup
		if $data(size),'$data(delta) set delta=size-$lg(ts(i),2)
		#; Get the size of the most recent backup file in bytes
		if '$data(size) set size=$lg(ts(i),2)
		#; If the number of backup files is larger or equals to the upper limit, delete the oldest ones along with logs
		if count'<max {
			set cbk=$lg(ts(i),1)
			set log=$replace($lg(ts(i),1),".cbk",".log")
			if del { if ##CLASS(%File).Delete(cbk)
					if ##CLASS(%File).Delete(log)
			}
		}
	}
	do result.%Close()
	If $$$isUNIX quit $$$OK ##; Skip for Linux	
	#; Calculate the available disk space in bytes
	set drive=$e(path,1)
	do ##CLASS(%File).GetDirectorySpace(drive_":/",.free,.total,0)
	#; Return an error if the size of the new backup file is larger than the available disk space
	quit:($g(size)+$g(delta))>$g(free) $$$ERROR($$$GeneralError,"Estimated size of the new backup file is larger than the available disk space:("_$g(size)_"+"_$g(delta)_")>"_$g(free))
	quit $$$OK
]]></Implementation>
</Method>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do $zu(5,"%SYS")
	set list=""
	merge oldDBList=^SYS("BACKUPDB")
	kill ^SYS("BACKUPDB")
	#; Adding new properties for the backup task
	set status=$$$OK
	try {
		##; Check the number of database copies, delete the oldest one, if necessary
		##; Check the remaining disk space and estimate the size of the new file
		set status=..CheckBackup(..DirBackup,..MaxBackUpFiles,1)
		quit:$$$ISERR(status)
		#; All databases
		if ..AllDatabases {
			set vals=""
			set disp=""
			set rss=##class(%ResultSet).%New("Config.Databases:List")
			do rss.Execute()
			while rss.Next(.sc) {
				if ..IgnoreForAllDatabases'="",(","_..IgnoreForAllDatabases_",")[(","_$zconvert(rss.Data("Name"),"U")_",") continue
				if ..IgnoreTempDatabases continue:..IsTempDB(rss.Data("Name"))
				if ..IgnorePreparedDatabases continue:..IsPreparedDB(rss.Data("Name"))
				set ^SYS("BACKUPDB",rss.Data("Name"))=""
			}
		}
		else {
			#; if the PrefixIncludeDB property is not empty, we’ll back up all DB’s with names starting from ..PrefixIncludeDB
			if ..PrefixIncludeDB'="" {
					set rss=##class(%ResultSet).%New("Config.Databases:List")
					do rss.Execute(..PrefixIncludeDB_"*")
					while rss.Next(.sc) {
						if ..IgnoreTempDatabases continue:..IsTempDB(rss.Data("Name"))
						set ^SYS("BACKUPDB",rss.Data("Name"))=""
					}
			}
			#; Include particular databases into the list
			if ..IncludeDatabases'="" {
				set rss=##class(%ResultSet).%New("Config.Databases:List")
				do rss.Execute("*")
				while rss.Next(.sc) {
					if ..IgnoreTempDatabases continue:..IsTempDB(rss.Data("Name"))
					if (","_..IncludeDatabases_",")'[(","_$zconvert(rss.Data("Name"),"U")_",") continue
					set ^SYS("BACKUPDB",rss.Data("Name"))=""
				}
			}
		}
		do ..GetFileName(.backFile,.logFile)
		set typeB=$zconvert($e(..TypeBackup,1),"U")
		set:"FIC"'[typeB typeB="F"
		set res=$$BACKUP^DBACK("",typeB,"",backFile,"Y",logFile,"NOINPUT","Y","Y","","","")
		if 'res set status=$$$ERROR($$$GeneralError,"Error: "_res)
	} catch {	set status=$$$ERROR($$$GeneralError,"Error: "_$ze)
				set $ze=""
	 }
	kill ^SYS("BACKUPDB")
	merge ^SYS("BACKUPDB")=oldDBList
	quit status
]]></Implementation>
</Method>

<Method name="GetFileName">
<Description>
Get file names</Description>
<FormalSpec><![CDATA[aBackupFile,&aLogFile]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tmpName=..PrefixBackUpFile_"_"_..TypeBackup_"_"_$s(..AllDatabases:"All",1:"List")_"_"_$zd($h,8)_$tr($j($i(cnt),3)," ",0)
	do {
		s aBackupFile=##class(%File).NormalizeFilename(..DirBackup_"/"_tmpName_".cbk")
	} while ##class(%File).Exists(aBackupFile)
	set aLogFile=##class(%File).NormalizeFilename(..DirBackupLog_"/"_tmpName_".log")
	quit 1
]]></Implementation>
</Method>

<Method name="IsPreparedDB">
<Description>
Check if the database is pre-installed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name</FormalSpec>
<Implementation><![CDATA[
	if (",ENSDEMO,ENSEMBLE,ENSEMBLEENSTEMP,ENSEMBLESECONDARY,ENSLIB,CACHESYS,CACHELIB,CACHETEMP,CACHE,CACHEAUDIT,DOCBOOK,USER,SAMPLES,")[(","_$zconvert(name,"U")_",") quit 1
	quit 0
]]></Implementation>
</Method>

<Method name="IsTempDB">
<Description>
Check if the database is temporary</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name</FormalSpec>
<Implementation><![CDATA[
	quit:$zconvert(name,"U")["TEMP" 1
	quit:$zconvert(name,"U")["SECONDARY" 1
	quit 0
]]></Implementation>
</Method>

<Method name="ListDB">
<Description>
Get a comma-delimited list of databases</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set list=""
	set rss=##class(%ResultSet).%New("Config.Databases:List")
	do rss.Execute()
	while rss.Next(.sc) {
		set list=list_","_rss.Data("Name")
	}
	quit list
]]></Implementation>
</Method>

<Method name="ListNS">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[
	set disp=""
	set tRS = ##class(%ResultSet).%New("Config.Namespaces:List")
	set tSC = tRS.Execute()
	While tRS.Next() {	
				set disp=disp_","_tRS.GetData(1)
	}
	set %class=..%ClassName(1)
	$$$comSubMemberSet(%class,$$$cCLASSproperty,"PrefixIncludeDB",$$$cPROPparameter,"VALUELIST",disp)
	quit ""
]]></Implementation>
</Method>

<Method name="oncompile">
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<Implementation><![CDATA[
	$$$defMemberKeySet(%class,$$$cCLASSproperty,"PrefixIncludeDB",$$$cPROPtype,"%String")
	set updateClass=##class("%Dictionary.ClassDefinition").%OpenId(%class)
	set updateClass.Modified=0
	do updateClass.%Save()
	do updateClass.%Close()
]]></Implementation>
</Method>
</Class>


<Class name="App.Use">
<CompileAfter>App.Log</CompileAfter>
<IncludeCode>App.LogMacro</IncludeCode>
<TimeChanged>64747,80865.286496</TimeChanged>
<TimeCreated>63691,73040.917631</TimeCreated>

<Method name="Test">
<Description>
do ##class(App.Use).Test()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[a:%Integer=1,&b=2]]></FormalSpec>
<Implementation><![CDATA[	$$$LogWarn("User message") // just place this macro in user code you wish to log
]]></Implementation>
</Method>

<Method name="TestWithObjects">
<Description>
do ##class(App.Use).TestWithObjects()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>a:%Integer=1,b:%ZEN.proxyObject</FormalSpec>
<Implementation><![CDATA[	$$$LogWarn("User message")
]]></Implementation>
</Method>

<Method name="TestLogObjects">
<Description>
Пример сохранения в глобале объекта в формате JSON
zn "%SYS" 
do ##class(App.Use).TestLogObjects(4)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<Implementation><![CDATA[
	set object=##class(%SYS.Task).%OpenId(id)
	set $$$AppL("MSW","taskObjId")=$$$AppObJs(id)
 	set $$$AppL("MSW","taskObj")=$$$AppObJs(object)
]]></Implementation>
</Method>
</Class>


<Class name="App.files">
<Description>
Утилиты работы с файлами</Description>
<Abstract>1</Abstract>
<IncludeCode>App.LogMacro</IncludeCode>
<TimeChanged>65084,48196.632996</TimeChanged>
<TimeCreated>64765,51020.18498</TimeCreated>

<Method name="getSlash">
<Description>
Поучить слэшь</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $$$slash
]]></Implementation>
</Method>

<Method name="Stream2String">
<Description>
Поток перевести в строку
w ##class(App.files).Stream2String(resp,.str)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>resp:%Stream,StringValue:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	set StringValue=""
	i '$isobject(resp) q $$$ERROR($$$GeneralError,"Пустой поток")
	d resp.Rewind() 
	set StringValue=resp.Read($$$MaxStringLength) 
	while '(resp.AtEnd) { 
		s StringValue($i(i))=resp.Read($$$MaxStringLength) 
	}
	q st
]]></Implementation>
</Method>

<Method name="UnzipToDirectory">
<Description>
Распаковка архива в директорию
w ##class(App.files).UnzipToDirectory("/backup/eaist/imported/3a308a20ff8e271ae3e063231a8df1ad.zip","/backup/eaist/last")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String,*dirName:%String,cmd</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	try {
		set:$g(dirName)="" dirName = ##class(%File).NormalizeDirectory(##class(%File).TempFilename())
		$$$TOE(st, ##class(%File).CreateDirectoryChain(dirName))
		
		set cmd = ..GetUzipCommand(fileName, dirName)
		
		;$$$TRACE(cmd)
		set result = $zf(-1, cmd)
		if (result '= 0) { $$$ThrowStatus($$$ERROR($$$GeneralError, $$$aText("Return code error","Ошибка кода возврата")_":" _ result_" cmd="_cmd)) }
	} catch ex {
		set st = ex.AsStatus()
		;$$$TRACE($system.Status.GetErrorText(st))
	}
	quit st
]]></Implementation>
</Method>

<Method name="zipFile">
<Description><![CDATA[
Упаковка файла в архив
 Каталогу tempdir нужно присвоить права на запись cacheusr >sudo chmod ugo+w .]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dir,fileName:%String,newfileName:%String,tempdir:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	if tempdir="" set tempdir=dir
	try {
		if $zversion(1) { ;for Linux
			set cmd = "cd "_dir_"; zip -r "_tempdir_"/"_newfileName_" "_fileName_";"
			if dir'=tempdir s cmd=cmd_" cp -f "_tempdir_"/"_newfileName_" "_newfileName_";" 
		} else {
			;set cmd = "cd "_dir_"; zip -r "_tempdir_"/"_newfileName_" "_fileName_";"
			
		}
		set result = $zf(-1, cmd)
		if (result '= 0) { $$$ThrowStatus($$$ERROR($$$GeneralError, $$$aText("Return code error","Ошибка кода возврата")_":" _ result_" cmd="_cmd)) }
	} catch ex {
		set st = ex.AsStatus()
	}
	quit st
]]></Implementation>
</Method>

<Method name="GetList">
<Description>
Get all files in a directory without subdirectories
w ##class(App.files).GetList("D:\dev\app1\src\","*.xml",.List)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[directory:%String,ext:%String="*.*",&list]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	try {
		set directory = ##class(%File).NormalizeDirectory(directory)
		set rs = ##class(%ResultSet).%New("%File:FileSet")
		s sc=rs.Execute(directory, ext)
		while (rs.Next()) {
			set fName = rs.Get("Name")
			m list(fName)=rs.Data
		}
	} catch ex {
		set st = ex.AsStatus()
	}
	quit st
]]></Implementation>
</Method>

<Method name="RemoveFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFile:%String,pDir:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// TODO: сделать обработку ошибок удаления
	i pDir'="" do ##class(%File).RemoveDirectoryTree(pDir)
	do ##class(%File).Delete(pFile)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetUzipCommand">
<ClassMethod>1</ClassMethod>
<FormalSpec>file,dir</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $zversion(1)=3 quit "unzip -o " _ file _ " -d " _ dir
	quit "7z x " _ file _ " -o" _ dir
]]></Implementation>
</Method>

<Method name="Stream2Log">
<Description>
Метод выгружает поток aStream в файл в папку aLogFolder. 
aLogFolder - директория выгрузки /back/temp/
aFileName - Имя выгруженного файла
File - полный путь к файлу
w ##class(App.files).Stream2Log(HttpResponse.Data, TempDir, fileName,.File) s aDATA("pathfileName")=$g(path)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[aStream,aLogFolder,aFileName,&filename]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	quit:(aLogFolder="") sc
	
	s aLogFolder=##class(%File).NormalizeDirectory(aLogFolder)
	if '##class(%File).DirectoryExists(aLogFolder) {
		quit:'##class(%File).CreateDirectoryChain(aLogFolder) $$$ERROR($$$GeneralError,"Cann't create directory chain: "_aLogFolder)
	}
	#; Определяем префикc для имени файла и имя файла
	i (aFileName="") s filename = aLogFolder_"t"_$tr($zts,",.","")_".xml"
	e  s filename = aLogFolder_aFileName
	
	#; Выполняем копирование файла в поток
	s ext=$p(filename,".",$l(filename,"."))
	
	i aStream.%ClassName(1)="%Stream.FileCharacterGzip" {
		s gzfileName=aStream.Filename
		set f2 = ##class(%Stream.FileBinary).%New()
		set f1 = ##class(%Stream.FileBinaryGzip).%New()
		do f1.LinkToFile(gzfileName)
		do f2.LinkToFile(filename)
		s sc=f2.CopyFromAndSave(f1)
		d aStream.Rewind() 
		quit sc
	}
	i "xml,txt,html,aspx,"[ext {
		s File = ##class(%Stream.FileCharacter).%New()
		s File.TranslateTable="UTF8"
	}
	else {
		 s File = ##class(%Stream.FileBinary).%New()
	}
	
	s File.Filename=filename
	s sc=File.CopyFromAndSave(aStream)

	#; Возвращаем результат
	d aStream.Rewind() quit sc
]]></Implementation>
</Method>

<Method name="ReadFile2Arr">
<Description>
Открыть файл для записи 
w ##class(App.files).ReadFile2Arr("/backup/temp/snmp/os-cip.mvk.ruRunCmd2018-10-03_14:31:00.txt","RSK",,"%tmp")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>file,mode="RSK",code="UTF8",gn="tmp"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s io=$i
	Open file:(mode_"\"_code_"\"):1
	if $test {
		s $zt="endoffile"
		for i=1:1 use file read r s @gn@(i)=r
	}
	else {
		q $$$ERROR($$$GeneralError,"No open file "_file)
	}
endoffile u io close file
	q $$$OK
]]></Implementation>
</Method>

<Method name="OpenFile">
<Description>
Открыть файл для записи 
set fn="/backup/temp/log.txt" if ##class(App.files).OpenFile(fn) use fn write "test",! close fn</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>file,time=1,mode="WNSK",code="UTF8"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Open file:(mode_"\"_code_"\"):time
	quit $test
]]></Implementation>
</Method>

<Method name="File2Arr">
<Description>
Прочитать файл и записать в глобал 
w ##class(App.files).File2Arr("/backup/eaist/work/SPGZ.xml_2018-05-07_14.56.26.461","^tmpFile")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>file,Mas,Param="RSU"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 //ПРОЧИТАТЬ ИЗ ФАЙЛА И ПОЛОЖИТЬ В МАССИВ
 set f=##class(%File).%New(file)
 set ok=f.Open(Param)     if 'ok do f.%Close() Q ok
 set len=$zu(140,1,file)
 while 'f.AtEnd {
     set str = f.ReadLine()
     s @Mas@($i(@Mas))=str
  }
 do f.%Close()
 Q len_" byte"
]]></Implementation>
</Method>

<Method name="LoadXML">
<Description>
Загрузка XML в класс объектов  
d ##class(App.files).LoadXML("/backup/eaistprod/arhive/InfoObject.xml_2018-09-19_08.49.08.638","infoObject","Mvk.model.InfoObject") 
d ##class(App.files).LoadXML("d:\!\InfoObject.xml","infoObject","Mvk.model.InfoObject") </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fn,tag,class</FormalSpec>
<Implementation><![CDATA[
	Set tReader = ##class(%XML.Reader).%New()
	s sc=tReader.OpenFile(fn)
	If $$$ISERR(sc) Do $system.OBJ.DisplayError(sc) Quit  
	Do tReader.Correlate(tag,class)
	Set Count=0
	While tReader.Next(.Object, .sc) {
	    Write Object_" imported.",!
	    Set Count=Count+1
	}
	If $$$ISERR(sc) Do $system.OBJ.DisplayError(sc) Quit  
	Write !,Count
	Quit
]]></Implementation>
</Method>

<Method name="getPathcconsole">
<Description>
Получить путь к системному протоколу
w ##class(App.files).getPathcconsole()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&dir,&logname]]></FormalSpec>
<Implementation><![CDATA[
	s slash=$$$slash
	Set path=$p($zu(86),"*",1)
	s dir=$p(path,slash,1,$l(path,slash)-1)_slash_"mgr"_slash
	s logname=$s($zv["IRIS":"messages",1:"cconsole")
 quit dir_logname_".log"
]]></Implementation>
</Method>

<Method name="getDate">
<Description>
Поиск момента расширения базы данных</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Line,yyyy,mm,dd</FormalSpec>
<Implementation><![CDATA[
	Set mm=$p(Line,"/",1)
	;Set dd=$p(Line,"/",2)
	Set yyyy="20"_$p($p(Line,"/",3),"-")
	q mm'=""&&(yyyy'="")
]]></Implementation>
</Method>

<Method name="Alert">
<Description>
Поиск выжный событий</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Line,&bd]]></FormalSpec>
<Implementation><![CDATA[
	q:'..getDate(Line,.yyyy,.mm) $$$OK
	if Line["Shutdown complete"	{
		i $i(bd("Reboot",yyyy,mm))
	}
	elseif 0,Line["DELETE:",Line["journals"	{
		i $i(bd("DELETE journals",yyyy,mm))
	}
	elseif 0,Line["Automatic journal file roll"	{
		i $i(bd("Automatic journal file roll",yyyy,mm))
	}
	elseif Line["Paging Alert: Physical Memory is"	{
		i $i(bd("Paging Alert: Physical Memory is used",yyyy,mm))
	}
	elseif Line["Error reading from SNMP port"	{
		i $i(bd("Error reading from SNMP port",yyyy,mm))
	}
	elseif Line["Lock table full"	{
		i $i(bd("Lock table full",yyyy,mm))
	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="ExpansionDB">
<Description>
Поиск момента расширения базы данных</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Line,&bd]]></FormalSpec>
<Implementation><![CDATA[
	s context = "Expansion completed"
	if Line[context	{
		q:'..getDate(Line,.yyyy,.mm) $$$OK
		Set dbn=$p($p(Line,"database ",2),". Expanded",1)
		Set mb=$p($p(Line,"Expanded by ",2)," MB",1)
		;Set bd("total",yyyy,mm)=$g(bd("total",yyyy,mm))+mb
		;Set bd("total",yyyy)=$g(bd("total",yyyy))+mb
		Set bd(dbn,yyyy,mm)=$g(bd(dbn,yyyy,mm))+mb
		Set bd(dbn,yyyy)=$g(bd(dbn,yyyy))+mb
	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="getPeriod">
<Description>
Получить диапазон дат по количеству дней от текущего
w ##class(App.files).getPeriod(69,.FromDateTime,.ToDateTime,.df,.dt)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>days,FromDateTime,ToDateTime,df,dt</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s FromDateTime="CurrentDay-"_days
	s ToDateTime="CurrentDay"

	if $$InterpretCurrentDay("added?DateFrom="_FromDateTime_"&DateTo="_ToDateTime,.res,.df,.dt) {
		 Set:$g(df)'="" FromDateTime=$p(df,".",2)_"/"_$p(df,".",1)_"/"_$e($p(df,".",3),3,4)_"-00:00:00"
		 Set:$g(dt)'="" ToDateTime=$p(dt,".",2)_"/"_$p(dt,".",1)_"/"_$e($p(dt,".",3),3,4)_"-23:59:59"
	}
	i $g(dt) q df_" "_dt
	q ""
 /// Интерпретирует строку с текущей датой типа
 /// Str= DateFrom=(CurrentDay-2)&DateTo=(CurrentDay-1)
 /// Результат вычисленное значение выражения 
InterpretCurrentDay(Str, Result,df,dt) 
	#dim tSC As %Status = 1
	#dim e As %Exception.AbstractException
	
	Set exp=$p(Str,"?",2)
	quit:exp="" "0"
	Set exp="s "_$replace(exp,"CurrentDay",+$h)
	Set exp=$replace(exp,"&DateTo",",%tempTo")
	Set exp=$replace(exp,"DateFrom","%tempFrom")
	try {
		x exp
		Set df=$tr($zd(%tempFrom,4),"/",".")
		Set dt=$tr($zd(%tempTo,4),"/",".")
		Set Result=$p(Str,"?",1)_"?DateFrom="_df_"&DateTo="_dt
		kill %tempFrom,%tempTo
	} Catch e {
		Set tSC=e.AsStatus()
	}
  quit tSC
]]></Implementation>
</Method>

<Method name="FindContextInLog">
<Description>
Выполнить метод на каждой строкой прготокола</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>days,method,bd</FormalSpec>
<PublicList>tProductionName,inf</PublicList>
<Implementation><![CDATA[
	Set gn=$$$GNmessages
	KILL res
	d ##class(App.files).getPathcconsole(.dir,.logname) ;w !,dir
	d ##class(App.files).GetList(dir,logname_"*",.List) ;zw List
	s i="" f { s i=$o(List(i)) q:i="" 
		do ParseFile(gn,i)
	}
	
	s bd=##class(App.files).getPeriod(days,.FromDateTime,.ToDateTime,.df,.dt) ;df_" "_dt
	
	if FromDateTime="" Set HFromDateTime="1.1"
	else  Set HFromDateTime=$$DataTimeCConsole2H(FromDateTime)
	if ToDateTime="" Set HToDateTime="99999999"
	else  Set HToDateTime=$$DataTimeCConsole2H(ToDateTime)
	
	;w !,HFromDateTime_" "_HToDateTime
	
	s hdt=HFromDateTime
	s class=$p($p(method,"(",2),")"),method=$p($p(method,")",2),".",2)
	f { s hdt=$o(@gn@(hdt),1,Line) q:hdt=""  q:hdt>HToDateTime
		// Контекст поиска		
		d $classmethod(class,method,Line,.bd)
	}
	quit $$$OK


/// Функция разбора протокольного файла на дату требуемой глубины
/// Сканироровать cconsole.log и результат положить 
ParseFile(gnTemp,InFile)
	if $g(@gnTemp)[InFile,InFile'["cconsole.log" q 1 ;уже архив разбирали
	;w !,InFile
	Set File2 = ##class(%File).%New(InFile)
	Do File2.Open("RSK\UTF8\")
	Do {
		Set Line = File2.ReadLine()
		s H=$$DataTimeCConsole2H($p(Line,":",1,3))
		i H="",$g(zts)'="" {
			i $l($g(@gnTemp@(zts)))>32000 continue
			;i $i(@gnTemp@(0))
			s @gnTemp@(zts)=$g(@gnTemp@(zts))_" "_Line ;склеим с предыдущей
			continue
		}
		s zts=H_","_$p($p(Line,":",4)," ")
		i $g(@gnTemp@(zts))'="",$g(@gnTemp@(zts))'=Line {
			 i $l($g(@gnTemp@(zts)))>32000 continue
			 ;i $i(@gnTemp@(0))
			 s @gnTemp@(zts)=$g(@gnTemp@(zts))_" "_Line  
			 continue
		}
		;i $i(@gnTemp@(0)) ;i '(@gnTemp@(0)#1000) w "."
		s @gnTemp@(zts)=Line
		} While 'File2.AtEnd
	Do File2.Close()
	s:$g(@gnTemp)'[InFile @gnTemp=$g(@gnTemp)_"*"_InFile ;добавим имя в заколовок для исключений в следующий разбор
 quit $g(@gnTemp)

/// Трансформировать дату 09/01/17-10:31:15 в $Horolog.
DataTimeCConsole2H(DT) 
		s dc=""
		Set Date1=$p(DT,"-")
		Set Time1=$p(DT,"-",2)
		try {
			Set dh=$zdh($p(Date1,"/",1,2)_"/20"_$p(Date1,"/",3),1)
			Set th=$zth(Time1,1)
			Set dc=dh_"."_th
		} catch {}
 quit $g(dc)


/// Проверка вхождения Date1=MM/DD/YY, Time1=HH:MM:SS в диапазон df,dt
IncludDataTime(DateTime1,df,dt,stop)
	Set z="0"
	try {
		Set dc=$$DataTimeCConsole2H(DateTime1)
		i dc>df,dc<dt s z=1
	} catch {
		Set z=$ze w !,$g(DateTime1)_","_$g(df)_","_$g(dt)_" "_$ze
	}
 quit z
]]></Implementation>
</Method>

<Method name="OneJournalCount">
<Description>
Посчитать в одном журнале какие глобалы как модифицируются
k ^tmpJRN d ##class(App.files).OneJournalCount("/sdb/journals/20181225.003","^tmpJRN")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>journal="",tempGlob=##class(App.LogInfoPane).#TEMPJRNL</FormalSpec>
<Implementation><![CDATA[
	s TmpGN="^||log" k @TmpGN
	i '$isobject(journal) s journal=##class(%SYS.Journal.File).%OpenId(journal)	q:'$isobject(journal)
	w !," Обрабатываем "_journal.Name_" "_$zdt($h,4)_" записываем в "_tempGlob,! 
	d JournalCount(journal)
	m @tempGlob@($P($zu(86),"*",2))=@TmpGN
    q
JournalCount(journal)
	  #dim record As %SYS.Journal.Record
	  set quit=0
	  i $isobject(journal) {
	    #; первый и последний адрес, для расчета прогресса обработки в процентах
	    set firstPos=journal.FirstRecord.Address
	    set lastPos=journal.LastRecord.Address
	    set opr=""
	    #; начнем с конца файла
	    set record=journal.LastRecord
	    for {
	      if '(record.Address#500000) {
	      	#; отображение прогресса обработки
	      	set proc=$j((lastPos-record.Address)/(lastPos-firstPos)*100,5,1)
	      	if proc'=opr set opr=proc write $c(13),?10,proc,"%  "
	      }
	      s TimeStamp=$tr(record.TimeStampGet(),"-")
	      s date=$p(TimeStamp," ")
	      s hour=$p($p(TimeStamp," ",2),":",1)
	      #; Запись об изменении данных
	      if record.%IsA("%SYS.Journal.SetKillRecord") {
	        ;set gref=record.GlobalReference
	    	s (OV,NV)=""
	    	i record.TypeName="SET" {
	    		s OV=record.OldValue
	    		s NV=record.NewValue
	    	}
	    	elseif record.TypeName="BitSET" {
		    	s NV=1
	    	}
	        d Count(record.TypeName,$l(OV),$l(NV),record.DatabaseName,record.GlobalNode)
	      }
	      #; перейдем к предыдущей записи в файле журнала
	      set record=record.Prev
	      quit:'$isobject(record)
	    }
	  }
	q  	
Count(TypeOp,OV,NV,base,gref)
	;q:$qs(gref,0)["CacheAuditD"
	;q:$qs(gref,0)["Ens."
	;s base=$qs(gref,-1)
	if $qs(gref,0)["SYS",$ql(gref)>0 {
		s gref=$na(@$qs(gref,0)@($qs(gref,1))) ;$qs(gref,2)))
	}
	elseif $e($qs(gref,0),*)="D"||($e($qs(gref,0),*)="I")||($e($qs(gref,0),*)="S") { //записи объектов
		s gref=$na(@$qs(gref,0))
	}
	elseif $qs(gref,0)["log"||($qs(gref,0)["tmp") { //протоколы
		s gref=$na(@$qs(gref,0))
	}
	else {
		s gref=$na(@$qs(gref,0)) ;имя массива
	}
	;s Log($lb(base,gref))=$g(Log($lb(base,gref)))+1
	i $i(@TmpGN@(date,hour,base,TypeOp,gref,"Counts"))
	;будем считать количество новых бы
	s @TmpGN@(date,hour,base,TypeOp,gref,"OldValue")=$g(@TmpGN@(date,hour,base,TypeOp,gref,"OldValue"))+OV
	s @TmpGN@(date,hour,base,TypeOp,gref,"NewValue")=$g(@TmpGN@(date,hour,base,TypeOp,gref,"NewValue"))+NV
 q
]]></Implementation>
</Method>

<Method name="OneDayJournalCount">
<Description>
Посчитать в журналах какие глобалы как модифицируются за конкретную дату
 d ##class(App.files).OneDayJournalCount("/opt/isc/ensemble/mgr/journal/20181225","^tmpJRN")
 d ##class(App.files).OneDayJournalCount("/sdb/journals/20181225","^tmpJRN")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileYYYYMMDD="",tempGlob=##class(App.LogInfoPane).#TEMPJRNL</FormalSpec>
<Implementation><![CDATA[
 i $g(@tempGlob)'="" w !,"Насчет уже идет "_$g(@tempGlob) q
 s @tempGlob=$zts ;начало формирования

 s slash=$$$slash
 if fileYYYYMMDD="" { 
	w !,"Будем считать за предыдущий день"
	s file=##class(%SYS.Journal.System).GetCurrentFile()
	s fileYYYYMMDD=$p(file.Name,slash,1,*-1)_slash_$tr($zd($h-1,3),"-")
 }
 ;дата за которую считаем
 s date=$p($p(fileYYYYMMDD,slash,$l(fileYYYYMMDD,slash)),".")
 for j=1:1:999 {
	  s suf=$s($l(j)=1:"00",$l(j)=2:"0",1:"")_j
	  s jname=fileYYYYMMDD_"."_suf 
	  w !,jname
	  #dim journ As %SYS.Journal.File = ##class(%SYS.Journal.File).%OpenId(jname)
	  i $isobject(journ) {	  
		 d ..OneJournalCount(journ,tempGlob)
	  }
	  else { QUIT
	  }
 }
 s @tempGlob="" ;флаг окончания насчета
 q
]]></Implementation>
</Method>

<Method name="Export2CSV">
<Description>
Экспорт в файл формата CSV
d ##class(App.files).Export2CSV("/backup/temp/JrnCount*.csv","^tmpJRN2")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>aFileName=$$$EMAILXLSPATH_"JrnCount*.csv",tmpGN=##class(App.LogInfoPane).#TEMPJRNL,aCharset="CP1251"</FormalSpec>
<Implementation><![CDATA[
	s:aFileName["*" aFileName=$replace(aFileName,"*",$tr($zd($h,3)_$zt($p($h,",",2),-1),":- "))
	#dim FileStream As %FileCharacterStream = ##class(%FileCharacterStream).%New()
	s FileStream.Filename=aFileName
	s:(aCharset'="") FileStream.TranslateTable=aCharset
	d FileStream.WriteLine("Instance;Date;Hour;Drive;Base;TypeOperation;GlobalRef;Counts;ByteOldValue;ByteNewValue")
	s (c4,o4,n4)=0
		s s1="" f { s s1=$o(@tmpGN@(s1)) q:s1=""
			s s2="" f { s s2=$o(@tmpGN@(s1,s2)) q:s2=""      ; Date
				s s3="" f { s s3=$o(@tmpGN@(s1,s2,s3)) q:s3=""	; Hour
					s s4="" f { s s4=$o(@tmpGN@(s1,s2,s3,s4)) q:s4="" ; Base
						s (c4,o4,n4)=0
						s s5="" f { s s5=$o(@tmpGN@(s1,s2,s3,s4,s5)) q:s5="" ; TypeOperation
							s s6="" f { s s6=$o(@tmpGN@(s1,s2,s3,s4,s5,s6)) q:s6="" ; Ref
								continue:s6="^"
								s Count=$g(@tmpGN@(s1,s2,s3,s4,s5,s6,"Counts"))
								s Old=$g(@tmpGN@(s1,s2,s3,s4,s5,s6,"OldValue"))
								s New=$g(@tmpGN@(s1,s2,s3,s4,s5,s6,"NewValue"))
								s gref=s6
								#dim line As %String = $lb(s1,s2,s3,$p($p(s4,":"),"^^",2)_":",s4,s5,s6,Count,Old,New)
								d FileStream.WriteLine($lts(line,";"))
							}
						}
					}
				}
			}
		}
	
	s sc=FileStream.SaveStream()
	WRITE !,"Записано в файл "_aFileName,!
	KILL FileStream quit sc
	q
]]></Implementation>
</Method>

<Method name="GetAllDir">
<Description>
Get all files in a directory and subdirectories
d ##class(App.files).GetAllDir("d:\dev\app1\src\",,.a)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[dir,ext="",&out]]></FormalSpec>
<Implementation><![CDATA[
	set dir = ##class(%File).NormalizeDirectory(dir)
	set rs = ##class(%ResultSet).%New("%File:FileSet")
	s sc=rs.Execute(dir, ext)
	while (rs.Next()) {
		;w !,rs.Get("Name")
		set out($i(out)) = $lb(rs.Get("Name"),rs.Get("Type"),rs.Get("Size"),rs.Get("ItemName"),rs.Get("DateCreated"),rs.Get("DateModified"))
		i rs.Get("Type")="D" d ##class(App.files).GetAllDir($lg(out(out),1),ext,.out)
	}
	q $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="App.net">
<Description>
Утилита работ с %Net.HttpRequest и %Net.SMTP</Description>
<Abstract>1</Abstract>
<IncludeCode>App.LogMacro</IncludeCode>
<TimeChanged>65084,34347.312559</TimeChanged>
<TimeCreated>64758,54536.238116</TimeCreated>

<Method name="SendFilesToEmail">
<Description>
Zip files and Send to email
w ##class(App.net).SendFilesToEmail()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>subj,text,files,zip=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;send files to email
	s slash=##class(App.files).getSlash()
	zw files
	;s path=$p(exportXLSfile,slash,1,*-1)
	;s sc=##class(App.files).zipFile(path,$p(exportXLSfile,slash,*),$p(exportXLSfile,slash,*)_".zip",path)
	;if sc s exportXLSfile=exportXLSfile_".zip"
	;i 'sc s $$$AppL("APP","CloseXLSfile-zipFile")=$System.Status.GetErrorText(sc) 
	//TODO prepare file to send e-mail
	q 1
	;i exportXLSfileEmail'="" {
	;	s sc=##class(App.LogInfo).SendEmail(exportXLSfileEmail, $$$aText("Send file","Отправление файла")_" "_exportXLSfile, $g(msg)_"<br> "_$$$aText("Namespace","Область")_" :"_$zu(5)_"<br> "_$$$aText("Query","Запрос")_": "_SQL, exportXLSfile)
	;	i 'sc s $$$AppL("APP","CloseXLSfile-SendEmail")=$System.Status.GetErrorText(sc) 
	;	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="SendMail">
<Description>
Послать электронное письмо
subscrible - список через запятую, кому направлять письмо
subj - тема
text - текст письма
attach - массив файлов по ссылке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>server,port,ssl,UseSTARTTLS,timezone,username,psw,from,subscrible,subj,text,attach</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #dim smtp As %Net.SMTP
 #; Определяем SMTP-сервер для отправки
 set smtp=##class(%Net.SMTP).%New()
 set smtp.smtpserver=server
 set:port smtp.port=port
 set:ssl||(port=465) smtp.SSLConfiguration=..CheckSSLCertificate("SSL4SMTP")
 set:UseSTARTTLS smtp.UseSTARTTLS=1
 set smtp.timezone=timezone
 if username'="" {
	set auth=##class(%Net.Authenticator).%New()
	set auth.UserName=username
	set auth.Password=psw
	set smtp.authenticator=auth
 }
 set smtp.timezone=$g(timezone,"0300")  ;Timezone by Grinwitch  +3 russia
 set mail=##class(%Net.MailMessage).%New() 
 set mail.From=$G(from)        ##; From 
 ##; List of emails to send this mail
 for i=1:1 {
	 q:$p(subscrible,",",i,i+1)=""  
	 set to=$p(subscrible,",",i) 
	 if to'="" do mail.To.Insert(to)
 }
 set mail.Subject=$s($g(subj)="":$g(Subj),1:$g(subj))     ; Subject - тема
 set mail.Charset="windows-1251"
 set mail.IsHTML=$s(text["<html":1,1:0)
 set mail.IsMultiPart=1
 set mail.MultiPartType="related" 
 do mail.TextData.Write(text)
 set sc=$$$OK
 ; Если файл один и передается по тексту в формате $lb
 if $g(attach)'="" {
	 set attach(1)=$lg(attach,2)
	 set attach(1,"path")=$lg(attach,1)
	 set:$lg(attach,3)'="" attach(1,"content-type")=$lg(attach,3) ;image/jpeg
 }
 ; Файлов много
 if $d(attach)>1 {
	set rec="" 
	for { s rec=$o(attach(rec),1,file) quit:rec=""
	 set sc=mail.AttachFile($g(attach(rec,"path")),file) ;  C:\!\","utl.zip")
	 if $$$ISERR(sc) q
	 set part=mail.Parts.GetAt(rec)
	 do part.Headers.SetAt(file,"Content-ID")
	 do part.Headers.SetAt($g(attach(rec,"content-type")),"Content-Type")
	}
 }
 if $$$ISERR(sc) quit sc ;##class(%Library.Status).LogicalToOdbc(sc)
 set sc=smtp.Send(mail) 
 if $$$ISERR(sc) quit sc ;##class(%Library.Status).LogicalToOdbc(sc)
 quit $$$OK
]]></Implementation>
</Method>

<Method name="LoadFileHttp">
<Description>
Загрузить файл и положить на сервер добавив к имени метку даты и времени
w ##class(App.net).LoadFileHttp("http://kisu-apps.mvk.ru:8000/OA_HTML/XxkWebServ/download?fileId=5215954",.out,"/backup/temp/",1)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>aURL="",aDATA,TempDir="",fileName</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s st=##class(App.net).GetHttp(aURL,.aDATA)
	i 'st q st
	i $g(aDATA("status"))'=200 q $$$ERROR($$$GeneralError,"Status HTTP "_$g(aDATA("status")))
	s sc=1
	i TempDir'="" s sc=##class(App.files).Stream2Log(aDATA("content"), TempDir, fileName,.path) s aDATA("pathfileName")=$g(path)
	q sc
]]></Implementation>
</Method>

<Method name="GetHttp">
<Description>
Получить от сервер  данные по URL
Если TempDir определен, то файл запишется туда 
w ##class(App.net).GetHttp("https://opendatabot.com/c/19358827",.out,"c:\!\","^temp")
w ##class(App.net).GetHttp("http://www.cbr.ru/mcirabis/PluginInterface/GetBicCatalog.aspx",.out,"/backup/temp/")
w ##class(App.net).GetHttp("http://www.cbr.ru/mcirabis/BIK/bik_db_13102017.zip",.out2,"/backup/temp/")
w ##class(App.net).GetHttp("https://codeload.github.com/SergeyMi37/cache-iris-app-tools/zip/master",.out2,"D:\temp\")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>aURL="",aDATA,TempDir="",tmpGN=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set part1=$p(aURL,"/",3),part2=$p(aURL,"/",4,$l(aURL,"/")),params=$p(aURL,"?",2)
	#; Сервер
	set server=$p(part1,":",1) quit:(server="") $$$ERROR($$$GeneralError,"0: отсутствует сервер")
	#; Порт
	set port=$p(part1,":",2)
	#; Адрес
	set location=$p(part2,"?",1) quit:(location="") $$$ERROR($$$GeneralError,"0: отсутствует адрес - "_location)
	set location=$zcvt(location,"O","URL")
	;i location="" s location="/"
	
	#; Создание HTTP-запроса для загрузки файла
	set HttpRequest=##class(%Net.HttpRequest).%New()
	set HttpRequest.Server=server
	if $f($zcvt(aURL,"L"),"https://") {
		set:(port="") port=443
		set HttpRequest.Https=1
		;set HttpRequest.FollowRedirect = 1
		set HttpRequest.SSLConfiguration=..CheckSSLCertificate("DefaultSSL")
	
	#; Запрос по HTTP
	} else {
		s:(port="") port=80
	}
	;w !,server,!,location
	set HttpRequest.Port=port
	
	#; Заполняем параметры
	for i=1:1:$l(params,"&") { s pair=$p(params,"&",i),name=$p(pair,"=",1),value=$p(pair,"=",2)
		continue:(name="")	
		;Конвертация, чтобы предотвратить двойной конвертации
		s value=$zcvt(value,"I","URL") 
		d HttpRequest.SetParam(name,value)
	} ; /for i
	
	#; Выполняем запрос
	Try { d HttpRequest.Get(location) } Catch Error { s err=Error.AsSystemError() }
	quit:($g(err)'="") $$$ERROR($$$GeneralError,err)
	#; Обрабатываем полученный ответ
	set HttpResponse=HttpRequest.HttpResponse 
	quit:('$isobject(HttpResponse)) $$$ERROR($$$GeneralError,"сервер не вернул ответ")
	quit:(HttpResponse.StatusCode'=200) $$$ERROR($$$GeneralError,HttpResponse.ReasonPhrase)
	s aDATA("status")=HttpResponse.StatusCode
	#; Разбираем ответ сервера, сохраняя в структуру aDATA
	set aDATA("contentType")=HttpResponse.ContentType
	#; Имя файла получаем через "content-disposition" в виде "attachment;filename="name.ext";"
	s fileName=HttpResponse.GetHeader("content-disposition")
	s aDATA("content-disposition")=fileName
	if ($l(fileName,"*=utf-8''")>1) {
		s fileName=$p(fileName,"*=utf-8''",2)
		s fileName=##CLASS(%CSP.Page).UnescapeURL(fileName)
		s fileName=$zcvt(fileName,"I","UTF8")
	} else { s fileName=$p(fileName,"filename=",2),fileName=$tr($p(fileName,";",1),"""'","") }
	
	#; Если имя файла не задано, то используем в качестве имени кусок адреса ссылки
	s:(fileName="") fileName=$p(location,"/",$l(location,"/"))
	s aDATA("content")=HttpResponse.Data
	s aDATA("fileName")=$zcvt(fileName,"I","URL")
	i tmpGN'="" M @tmpGN=aDATA
	s sc=1
	i TempDir'="" s sc=##class(App.files).Stream2Log(HttpResponse.Data, TempDir, fileName,.path) s aDATA("pathfileName")=$g(path)
	quit sc
]]></Implementation>
</Method>

<Method name="CheckSSLCertificate">
<Description>
Метод проверяет существование настроенной SSL конфигурации
и создает пустую конфигурацию с таким именем если такого пока нет
для подключения к https серверу, этого достаточно</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set curNS=$zu(5)
	try {
		zn "%SYS"
		quit:(##class(Security.SSLConfigs).Get(name))
		d ##class(Security.SSLConfigs).Create(name)
	} catch {
	}
	zn curNS
	quit name
]]></Implementation>
</Method>

<Method name="CopyFileBinaryGzip">
<Description>
fix by Eduard Lebedyuk 
w ##class(App.net).CopyFileBinaryGzip()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	w !,$zv
	set HttpRequest=##class(%Net.HttpRequest).%New()
	set HttpRequest.Server="www.cbr.ru"
	set HttpRequest.Port=80
	Try { d HttpRequest.Get("mcirabis/PluginInterface/GetBicCatalog.aspx") } Catch Error { s err=Error.AsSystemError() }
	if ($g(err)'="") w !,"ERROR1:",$system.Status.GetOneErrorText(err) Quit
	
	set HttpResponse=HttpRequest.HttpResponse 
	if ('$isobject(HttpResponse)) w !,"ERROR2"
	
	s newFilename="/backup/GetBicCatalog4.xml"
	d HttpResponse.Data.Rewind()
	
	w !,HttpResponse.Data.%ClassName(1)
	w !,HttpResponse.Data.Filename
		s gzipfileName=HttpResponse.Data.Filename
		set f2 = ##class(%Stream.FileBinary).%New()
		set f1 = ##class(%Stream.FileBinaryGzip).%New()
		do f1.LinkToFile(gzipfileName)
		do f2.LinkToFile(newFilename)
		s sc=f2.CopyFromAndSave(f1)

	if $$$ISERR(sc) w !,"ERROR3:",$system.Status.GetOneErrorText(sc) Quit
	s sc=f2.%Save()
	if $$$ISERR(sc) w !,"ERROR4:",$system.Status.GetOneErrorText(sc) Quit
	q sc
]]></Implementation>
</Method>

<Method name="ListFtp">
<Description>
Чтение файлов из фтп сервера
w ##class(App.net).ListFtp()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;ftp://fz223free:fz223free@ftp.zakupki.gov.ru/out/
 #dim ftp As %Net.FtpSession
 Set ftp=##class(%Net.FtpSession).%New()
 //ftp.Connect("nameserver","name","pass","port")
 s st=ftp.Connect("ftp.zakupki.gov.ru","fz223free","fz223free",21) 
 i 'st Write "Not connected "_$System.Status.GetErrorText(st),! Quit
 Write "Ftp server messsage: ",ftp.ReturnMessage,!
 
 If 'ftp.System() W "No answer System" G FTPSTOP
 Write "Ftp server messsage: ",ftp.ReturnMessage,!
 
 If 'ftp.Binary() Write "Can not swap to binary mode",! G FTPSTOP
 Write "Mode now: ",ftp.Type,!

 // ПРОЧИТАТЬ ДИРЕКТОРИЮ
 Set stream=##class(%GlobalCharacterStream).%New()
 W ! 
 s st=ftp.List("/out/published/undefined/purchaseNoticeEP/daily",.stream) 
 i 'st W !,"Error List "_$System.Status.GetErrorText(st) G FTPSTOP
 IF stream.Size>0 {
 Write "-------- Length of file received: ",stream.Size," ------",!
 ;for  set len=32763,line=stream.Read(.len) write line  quit:stream.AtEnd
 for  {
	 s line=stream.ReadLine() s ^logFTT(1,$i(^logFTT),"F")=$lb(line) 
	 w !,line
	 quit:stream.AtEnd
 }
 Write !," -------- End of stream -----",!
 }
 D stream.%Close() 
 
 /*/ ПРОЧИТАТЬ ДИРЕКТОРИЮ
 Set stream=##class(%GlobalCharacterStream).%New()
 W ! IF 'ftp.List("CLIeNT\*.F*",.stream) W !,"Error List" G FTPSTOP
 IF stream.Size>0 D
 .Write "-------- Length of file received: ",stream.Size," ------",!
 . new len,line
 . for  set len=32763,line=stream.Read(.len) do  quit:stream.AtEnd
 .. write line
 .Write !," -------- End of stream -----",!
 D stream.%Close() ;*/
 
 /*/ДОБАВИТЬ ФАЙЛ
 Set stream=##class(%GlobalCharacterStream).%New()
 for I=1:1:100 D stream.WriteLine(I_" ASASAS")
 If 'ftp.Append("CLIENT\AAA.TXT",stream) Write "Failed to PUT file",! G FTPSTOP
 D stream.%Close() ;*/
 
 /*/ВОЗВРАТИТЬ ФАЙЛ
 Set stream=##class(%GlobalCharacterStream).%New()
 If 'ftp.Retrieve("CLIENT\mAIN.FRM",stream) Write "Failed to get file",! G FTPSTOP
 IF stream.Size>0 D
 .Write "-------- Length of file received: ",stream.Size," ------",!
 . new len,line
 . for  set len=32763,line=stream.Read(.len) do  quit:stream.AtEnd
 .. write line
 .Write !," -------- End of stream -----",!!!!
 D stream.%Close() ;*/
FTPSTOP If 'ftp.Logout() S ER="Failed to logout"
 Do ftp.%Close()
 Q
]]></Implementation>
</Method>

<Method name="GetListIP">
<Description>
Получить IP адрес
w ##class(App.net).GetIP()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set lsIface=##class(%SYSTEM.INetInfo).GetListOfConfiguredInterfaces()
 for iface=1:1:$ll(lsIface) { 
   s IPv4=$lg($lg(lsIface,iface),2)
   if $l(IPv4,":")>2 {set IPv4=$lg($lg(lsIface,iface),3) if $l(IPv4,":")>2 {set IPv4=""}}
   write IPv4,!
 }
]]></Implementation>
</Method>

<Method name="GetIP">
<Description>
Получить IP адрес
w ##class(App.net).GetIP()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $P($ZU(54,13,$zu(54,0)),",",1)
]]></Implementation>
</Method>

<Method name="PostHttp">
<Description>
Получить ответ на Post Http запрос
w ##class(App.net).PostHttp("cip-test.mvk.ru:57772", "/apptoolsrest/jsonrpc","msw" ,"S37@asu3" ,"{""jsonrpc"":""2.0"",""method"":""server.shutdown"",""params"":{""server"":""42""},""id"":1}",.out)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ServerPort,method,user,pass,&body,&out]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set ht = ##class(%Net.HttpRequest).%New()
	set ht.Server = $p(ServerPort,":")
	if user'="" {
		set ht.Username=user
		set ht.Password=pass
	}
	s ht.ContentType="text/html;  charset=UTF-8"
	;s ht.ContentType="application/json; charset=UTF-8"
	i $p(ServerPort,":",2)'="" set ht.Port = $p(ServerPort,":",2)
	Do ht.EntityBody.Write($g(body))
	if $d(body)>1 s i="" f  s i=$o(body(i)) q:i=""  Do ht.EntityBody.Write(body(i))
	
	Do ht.Post(method)
	;Do ht.HttpResponse.OutputToDevice()
	S out=ht.HttpResponse.StatusLine
	;s ^z1=ht.HttpResponse.ContentLength
    set i="" for  S i=ht.HttpResponse.GetNextHeader(i) Q:i=""  S out("Header",i)=ht.HttpResponse.GetHeader(i)
    if ht.HttpResponse.Data.Size>0 {
	    set sc=##class(App.files).Stream2String(ht.HttpResponse.Data,.json)
	    m out("Data")=json
	}
 	do ht.%Close()
 	q $g(out)
]]></Implementation>
</Method>

<Method name="RunPage">
<Description>
d ##class(App.net).RunPage()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Url:%String="http://intersystems.ru"</FormalSpec>
<Implementation><![CDATA[
    #Include %occOptions
    Set Browser = $s($$$isWINDOWS:"start", $$$isUNIX:"x-www-browser", 1:"x-www-browser")
    Set Command = Browser _ " " _ Url
    Do $ZF(-1, Command)
]]></Implementation>
</Method>

<Method name="ImportCSPFromGitHub">
<Description>
Import CSP-file from GitHub repository for 7z utility 
s repo="cache-iris-app-tools" d ##class(App.net).ImportCSPFromGitHub("https://codeload.github.com/SergeyMi37/"_repo_"/zip/master",repo,"d:\!\csptest")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>url,repo,target</FormalSpec>
<Implementation><![CDATA[
	s tempdir=##class(%File).TempFilename("zip")
	s st=##class(%File).CreateDirectory(tempdir)
	i 'st q st
 	s st=##class(App.net).GetHttp(url,.out,tempdir)
 	w !,tempdir
	s unzip=##class(%File).TempFilename("unzip")
	s st=##class(%File).CreateDirectory(unzip)
	i 'st q st
	s cmd="7z x "_tempdir_$$$slash_repo_"-master.zip -y -o"_unzip ;_" >d:\!\log.log"
	s st=$ZF(-1,cmd)
	w !,cmd 
	s source=unzip_$$$slash_repo_"-master"_$$$slash_"src"_$$$slash_"csp"
	w !,source_" copy to "_target,!
	s st=##class(%File).CopyDir(source,target,1,1,1)
	i 'st w !,st
	d ##class(%File).Delete(tempdir)
	d ##class(%File).Delete(unzip)
	q $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="App.security">
<Abstract>1</Abstract>
<IncludeCode>App.LogMacro</IncludeCode>
<TimeChanged>65071,38858.848943</TimeChanged>
<TimeCreated>64734,80043.870644</TimeCreated>

<Method name="LockDown">
<Description>
Повышение безопасности системы
Основные настройки системы как в LockDown, кроме InactiveLimit=90
Метод отключает "лишние" сервисы и приложения. Удаляет области "DOCBOOK","ENSDEMO","SAMPLES","USER"
Метод включает аудит и настраивает регистрацию в портале всех событий кроме переключения журнала
 и модификацию системных свойств
Всем предустановленным пользователям сменим пароль и поменяем свойства как в LockDown
	newPassword - новый единый пароль вместо SYS. Для уровня безопасности LockDown он имеет шаблон 8.32ANP
	CSPAppName -  имя CSP приложения, для которых не устанавливается авторизация по паролю.
        По умолчанию совпадает с именем области
		Если в системе несколько приложений (областей), то через запятую 
		sBindings =1 Сервис %service_bindings включить
	sCachedirect =1 Сервис %service_cachedirect включить
	sECP =1 Сервис %service_ecp включить
	sBindingsIP - список ip адресов через точку с запятой для которых разрешить подключение CacheStudio.
		Для ECP конфигураций нужно добавить адреса всех серверов и клиентов для разрешения подключения по %Net.RemoteConnection для снятия "брошенных" заданий
	sCachedirectIP - список ip адресов через точку с запятой для которых разрешить подключение CIMModeler.
	sECPIP - список ip адресов через точку с запятой для которых разрешить подключение к серверу ECP.
    AuthLDAP=1 Включить дополнительно к парольному еще и LDAP аутотентификацию
 Пример применения: 
	d ##class(App.security).LockDown("qwe123!@#",,.msg,1,1,0,"127.0.0.1","127.0.0.1")
	d ##class(App.security).LockDown("qwe123!@#","AppTools",.msg,1,1,0,"127.0.0.1","127.0.0.1",,1)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newPassword="",CSPAppName={$zconvert($zu(5),"L")},Warn,sBindings="",sCachedirect="",sECP="",sBindingsIP="",sCachedirectIP="",sECPIP="",AuthLDAP=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s CSPAppName=$zconvert(CSPAppName,"L")
	I newPassword'?8.32ANP s text="Пароль не удовлетворяет шаблону 8.32ANP" w !,text QUIT $$$ERROR(text)
	s ons = $zu(5) ;текущая область
	#; По другому найдем статик-приложение s virtualstatic=$$$GetSetting("VirtalStaticApplication")
	f i=1:1:$l(CSPAppName,",") {
		continue:$p(CSPAppName,",",i)=""
		;s virtualstatic("/"_$p(CSPAppName,",",i)_"static")=1
		;s appcsp("/"_$p(CSPAppName,",",i))=1
		;s appcspmgr("/csp/"_$p(CSPAppName,",",i))=1
	}
	w !,"Для приложений и служб будет установлена аутентификация по "_$s('AuthLDAP:"паролю",1:"паролю и LDAP")
	s AutheEnabled=$s(AuthLDAP:2080,1:32) ;с паролем = 32, паролем и LDAP =2080
	zn "%sys"
	w !,"Происходит смена пароля предустановленным пользователям"
	s result=##CLASS(%ResultSet).%New("%DynamicQuery:SQL")
	s tSC=result.Prepare("select NameLowerCase FROM Security.Users")
	s:tSC tSC=result.Execute()
	i '$$$ISOK(tSC) {
		s text="Ошибка настройки пользователей :"_$SYSTEM.Status.GetErrorText(tSC) w !,text
		QUIT $$$ERROR(text)
	}
	else {
		while result.Next() {
			s name=result.Data("NameLowerCase")
			k prop
			s prop("Password")=newPassword
			i name="_system" s prop("Enabled")=0 ; отключим
			i name="unknownuser" s prop("Roles")="" ; удалим все роли
			s tSC=##class(Security.Users).Modify(name,.prop)
			i '$$$ISOK(tSC) w !,name_": Error="_$SYSTEM.Status.GetErrorText(tSC)
		}
	}
	w !,"Происходит модификация свойств сервисов:"
	s result=##CLASS(%ResultSet).%New("%DynamicQuery:SQL")
	s tSC=result.Prepare("select NameLowerCase,ClientSystems FROM Security.Services")
	s:tSC tSC=result.Execute()
	i '$$$ISOK(tSC) {
		s text="Ошибка настройки сервисов :"_$SYSTEM.Status.GetErrorText(tSC) w !,text
		QUIT $$$ERROR(text)
	}
	else {
		while result.Next() {
			s name=result.Data("NameLowerCase")
			#;пропускаем сетевые сервисы
			continue:(name="%service_mirror")||(name="%service_shadow")||(name="%service_datacheck")
			k prop
			s prop("Enabled")=0 ;все остальные выключим
			i name="%service_csp"||(name="%service_console")||(name="%service_login") {
				s prop("Enabled")=1 ; включим
				i name'="%service_csp" s prop("AutheEnabled")=AutheEnabled ##; MSW4951b ;вход парольный
				e  s prop("AutheEnabled")=96 ;вход беспарольный и с паролем
			}
			i $G(sBindings),name="%service_bindings" {
				s prop("Enabled")=1 ; включим
				s prop("AutheEnabled")=AutheEnabled ;вход парольный
				s Warn($i(Warn))="Если на текущей системе не предполагается разработка или редактирование исходного кода в CacheStudio, то лучше выключить сервис "_name
				s prop("ClientSystems")=sBindingsIP
			}
			i $G(sCachedirect),name="%service_cachedirect" {
				s prop("Enabled")=1 ; включим
				s prop("AutheEnabled")=96 ;вход беспарольный и с паролем
				s Warn($i(Warn))="Если на текущей системе не предполагается редактирование шаблонов трансформации утилитой CIMModeler, то лучше выключить сервис "_name
				s prop("ClientSystems")=sCachedirectIP
			}
			i $G(sECP),name="%service_ecp" {
				s prop("Enabled")=1 ; включим
				s Warn($i(Warn))="Если на текущей системе не включена ECP конфигурация, то лучше выключить сервис "_name
				s:$g(sECPIP)="" Warn($i(Warn))="Если ECP конфигурация включена, то лучше ограничить подключение ECP-клиетов к ECP-серверу"
				s prop("ClientSystems")=sECPIP
			}
			;k pro d ##class(Security.Services).Get("%service_console",.pro)	zw pro
			s tSC=##class(Security.Services).Modify(name,.prop)
			i '$$$ISOK(tSC) w !,name_": Error="_$SYSTEM.Status.GetErrorText(tSC)
		}
	}

	w !,"Проиcходит создание новой роли для CSPAppName"
	s nameR=$p(CSPAppName,","),desc="Роль для основного приложения CSPAppName" 
	s pResources="%DB_%DEFAULT:RW,%DB_CACHE:RW,%DB_CACHELIB:RW,%DB_CACHESYS:RW,%DB_CACHETEMP:RW,%Service_CSP:U,%Service_SQL:U,%Service_CacheDirect:U" 
	s pRolesGranted="%All" ;TODO  Пока нет решения для динамического назначения грантов SQL 
	Set tExists = ##class(Security.Roles).Exists(nameR)
	if 'tExists {
		Set tSC = ##class(Security.Roles).Create(nameR,desc,pResources,pRolesGranted)
		i '$$$ISOK(tSC) {
			s text="Ошибка создании роли "_nameR_" :"_$SYSTEM.Status.GetErrorText(tSC)  w !,text QUIT $$$ERROR(text)
		}
	}
	else {
		k prop s prop("Description")=desc
		s prop("GrantedRoles")=pRolesGranted
		s prop("Resources")=pResources
		Set tSC=##class(Security.Roles).Modify(nameR,.prop)
		i '$$$ISOK(tSC) {
			s text="Ошибка модификации роли "_nameR_" :"_$SYSTEM.Status.GetErrorText(tSC)  w !,text QUIT $$$ERROR(text)
		}
	}
	
	w !,"Проиcходит создание парольного входа всем CSP приложениям, кроме CSPAppName"
	s result=##CLASS(%ResultSet).%New("%DynamicQuery:SQL")
	s tSC=result.Prepare("select Name FROM Security.Applications")
	s:tSC tSC=result.Execute()
	i '$$$ISOK(tSC) {
		s text="Ошибка настройки приложений :"_$SYSTEM.Status.GetErrorText(tSC)  w !,text QUIT $$$ERROR(text)
	}
	else {
		#; Список отключаемых приложений
		s appDisabled("/csp/ensdemo")=1
		s appDisabled("/csp/samples")=1
		s appDisabled("/csp/user")=1
		s appDisabled("/isc/studio/usertemplates")=1
		;s appDisabled("/csp/docbook")=1  
		s appDisabled("/csp/documatic")=1
		s appDisabled("/isc/studio/rules")=1
		s appDisabled("/isc/studio/templates")=1
		while result.Next() {
			s CSP=result.Data("Name")
			s csp=$zconvert(CSP,"L")
			k prop
			;w !,csp,"-----" d ##class(Security.Applications).Get(csp,.prop)	zw prop
			#; Основное приложение CSPAppName
			if $g(appcsp(csp)) {
				s prop("AutheEnabled")=64 ;без пароля
				#; Включение делегирование ролей пользователю самим приложеним
				;s prop("MatchRoles")=":%DB_%DEFAULT:%DB_CACHE:%DB_CACHELIB:%DB_CACHESYS:%DB_CACHETEMP:%SQL"
				w !,"Назначение приложению роли "_nameR
				s prop("MatchRoles")=":"_nameR
			}
			#; Портал управления CSPAppName
			elseif $g(appcspmgr(csp)) {
				s prop("AutheEnabled")=AutheEnabled ##; MSW4951b ;с паролем = 32, паролем и LDAP =2080
				s prop("Resource")="%Development"
			}
			else {
				i $g(appDisabled(csp)) s prop("Enabled")=0
				e  s prop("Enabled")=1
				i $g(virtualstatic(csp)) s prop("AutheEnabled")=64,prop("MatchRoles")=":"_nameR w !,"Для приложения "_csp_" присвоим безпарольный вход и роль "_nameR ##; MSW4951
				e  s prop("AutheEnabled")=AutheEnabled ##; MSW4951b ;с паролем
							
			}
			s tSC=##class(Security.Applications).Modify(CSP,.prop) ; MSW4343d
			i '$$$ISOK(tSC) w !,csp_" : Error="_$SYSTEM.Status.GetErrorText(tSC)
		}
	}
	WRITE !,"Происходит удаление демо областей"
	for name="ENSDEMO","SAMPLES","USER" {
		#; Удаление Ensemble-области
		d:##class(%Dictionary.CompiledClass).%ExistsId("%Library.EnsembleMgr")
		
		#; Удаление области
		s tSC = ##class(Config.Namespaces).Delete(name)
		if $$$ISERR(tSC) s text="Ошибка удаления "_name_" :"_$system.Status.GetErrorText(tSC) w !,text
		if $$$ISOK(tSC) w !,"Удалили "_name
	}
	WRITE !,"Происходит модификация основных настроек системы"
	#dim ss As Security.System  = ##class(Security.System).%OpenId("SYSTEM")
	#;Изменение шаблона пароля
	s ss.PasswordPattern="8.32ANP"
	#;Включение аудита
	s ss.AuditEnabled=1
	#;количество дней простоя после которой система выключит основных пользователей и их нужно будет включать в аварийном режиме
	s ss.InactiveLimit=0
	#;Сохраним настройки
	s tSC=ss.%Save()
	i '$$$ISOK(tSC) s text="Ошибка настройки основых параметров безопасности :"_$SYSTEM.Status.GetErrorText(tSC)  w !,text QUIT $$$ERROR(text)
	w !,"Настройка событий AUDITa :"
	Set rs = ##class(%ResultSet).%New("Security.Events:ListActivate")
	Set tSC = rs.Execute()
	If $$$ISERR(tSC) s text="Ошибка настройки событий AUDIT:"_$system.Status.GetErrorText(tSC) w !,text QUIT $$$ERROR(text)
	#; Список событий ктр должны быть переключены
	s On("%Ensemble/%Message/ViewContents")=1
	s On("%System/%DirectMode/DirectMode")=1
	s On("%System/%Login/Login")=1
	s On("%System/%Login/LoginFailure")=1
	s On("%System/%Login/Logout")=1
	s On("%System/%Login/Terminate")=1
	s On("%System/%Security/ApplicationChange")=1
	s On("%System/%Security/AuditChange")=1
	s On("%System/%Security/AuditReport")=1
	s On("%System/%Security/DBEncChange")=1
	s On("%System/%Security/DomainChange")=1
	s On("%System/%Security/LoginRuleChange")=1
	s On("%System/%Security/Protect")=1
	s On("%System/%Security/ResourceChange")=1
	s On("%System/%Security/RoleChange")=1
	s On("%System/%Security/ServiceChange")=1
	s On("%System/%Security/SSLConfigChange")=1
	s On("%System/%Security/SystemChange")=1
	s On("%System/%Security/UserChange")=1
	s On("%System/%System/AuditRecordLost")=1
	s On("%System/%System/ConfigurationChange")=1
	s On("%System/%System/JournalChange")=0 ;выключим аудит переключения журнала
	s On("%System/%System/RoutineChange")=1
	s On("%System/%System/Start")=1
	s On("%System/%System/Stop")=1
	s On("%System/%System/SuspendResume")=1
	s On("%System/%System/UserEventOverflow")=1
	While rs.Next() {
		Set name = $G(rs.Data("Source"))_"/"_$G(rs.Data("Type"))_"/"_$G(rs.Data("Name"))
		;w !,name d ##class(Security.Events).Get($g(rs.Data("Source")),$G(rs.Data("Type")),$G(rs.Data("Name")),.pro) w " = ",pro("Description"),!!
		If $DATA(On(name)) {
			k pro
			d ##class(Security.Events).Get($g(rs.Data("Source")),$G(rs.Data("Type")),$G(rs.Data("Name")),.pro)
			i $d(pro) {
				if pro("Enabled")'=(+$G(On(name))) {
					;s Status=##class(Security.Events).Set($g(rs.Data("Source")),$G(rs.Data("Type")),$G(rs.Data("Name")),+$G(On(name)))
					;s Status=##class(Security.Events).Modify($g(rs.Data("Source")),$G(rs.Data("Type")),$G(rs.Data("Name")),.pro)
					i ##Class(Security.Events).Exists(name,,,.Event,.Status) {
						s Event.Enabled=+$G(On(name))
						s tSC=Event.%Save()
						i '$$$ISOK(tSC) w !,name_": Error="_$SYSTEM.Status.GetErrorText(tSC)
						e  w !,name_" изменили"
					}
				}
			}

		}
	}
	d rs.Close()
	zn ons ; вернемся в исходную область
	q $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="App.sys">
<Abstract>1</Abstract>
<IncludeCode>App.LogMacro</IncludeCode>
<TimeChanged>65072,28915</TimeChanged>
<TimeCreated>64734,80043.870644</TimeCreated>

<Method name="CreateTaskPurge">
<Description>
Create a task to clean the messages of the ensemble
for ns="AISGSASUMS","MVK112","SPGZ","RDID","RDIDPROD" try {zn ns w !,ns," ",##class(App.sys).CreateTaskPurge("Ensemble message cleaning",ns,90)}catch{}</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Name="",ns,days=90</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Task=##Class(%SYSTEM.Task).%New()
	Set Task.Name=Name
	Set Task.Type=0
	Set Task.Description="task to clean the messages of the ensemble"
	Set Task.TaskClass="Ens.Util.Tasks.Purge"
	#;Every day at 1:00 am
	Set Task.DailyStartTime=3600
	;Do Task.idSet(Number)
	Set Task.RunAsUser="SuperUser"
	Set Task.MirrorStatus=3
	Set t=##class(Ens.Util.Tasks.Purge).%New()
	Set t.KeepIntegrity=0
	Set t.NumberOfDaysToKeep=days
	Set t.BodiesToo=1
	Set t.TypesToPurge="all"
	Set Task.Settings=t.GetSettings()
	Set Task.NameSpace=ns
	quit Task.%Save()
]]></Implementation>
</Method>

<Method name="GetSysUserProp">
<Description>
Get system user properties
w ##class(App.sys).GetSysUserProp("Login",.Prop)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Name,Prop</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	$$$NspGoto(curNs,"%SYS")
	set Status=##Class(Security.Users).Get(Name,.Prop)
	$$$NspReturn(curNs)
	quit Status
]]></Implementation>
</Method>

<Method name="IsPreparedDB">
<Description>
Check whether the database is prepared
w ##class(App.sys).IsPreparedDB("ENSDEMO")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name</FormalSpec>
<Implementation><![CDATA[
	i (",ENSDEMO,ENSEMBLE,ENSEMBLEENSTEMP,ENSEMBLESECONDARY,ENSLIB,CACHESYS,CACHELIB,CACHETEMP,CACHE,CACHEAUDIT,DOCBOOK,USER,SAMPLES,")[(","_$zconvert(name,"U")_",") q 1
	Q 0
]]></Implementation>
</Method>

<Method name="getEnsProd">
<Description>
Get a list of products in namespace
w ##class(App.sys).getEnsProd("ENSDEMO",.info)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name,info</FormalSpec>
<Implementation><![CDATA[
	s sc=$$$OK
	try {
		$$$NspGoto(curNs,name) KILL info
		DO ##CLASS(Ens.Director).GetProductionSummary(.info,name)
	}
	catch e { s sc=$$$ERROR($$$GeneralError,$ze)}
	$$$NspReturn(curNs)
	Q sc
]]></Implementation>
</Method>

<Method name="IsPreparedNS">
<Description>
Check whether the namespace is prepared
w ##class(App.sys).IsPreparedNS("%SYS")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name</FormalSpec>
<Implementation><![CDATA[
	i (",%SYS,%ALL,DOCBOOK,ENSDEMO,ENSEMBLE,SAMPLES,USER,")[(","_$zconvert(name,"U")_",") q 1
	Q 0
]]></Implementation>
</Method>

<Method name="getCSPapps">
<Description>
//get csp apps 
w ##class(App.sys).getCSPapps("/apptools","Path")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>csppapp,prop</FormalSpec>
<Implementation><![CDATA[
		
 $$$NspGoto(curNs,"%SYS")
	s result=##CLASS(%ResultSet).%New("%DynamicQuery:SQL")
	s tSC=result.Prepare("select * FROM Security.Applications where Name=?")
	s:tSC tSC=result.Execute(csppapp)
	i '$$$ISOK(tSC) {
		 QUIT tSC
	}
	else {
		while result.Next() {
			set res=result.Data(prop)
		}
	}
	d result.Close()
	$$$NspReturn(curNs)	
	Q $g(res)
]]></Implementation>
</Method>

<Method name="ListDB">
<Description>
Get a list of database names separated by commas
w ##class(App.sys).ListDB(.info,"NotPre")
Flag = "NotPre" - exclude prepared
Flag = "NotTemp" - exclude tempory</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>info,Flag=""</FormalSpec>
<Implementation><![CDATA[
	$$$NspGoto(curNs,"%SYS")	
	s list=""
	s rss=##class(%ResultSet).%New("Config.Databases:List")
	d rss.Execute()
	while rss.Next(.sc) { 
		s name=rss.Data("Name")
		if Flag["NotPre" continue:##class(App.sys).IsPreparedDB(name)
		if Flag["NotTemp" continue:(name_",")["SECONDARY,"||((name_",")["TEMP,")
		s list=list_","_name 
		m info(name)=rss.Data
	}
	
	d rss.Close()
	$$$NspReturn(curNs)	
	Q $g(list)
]]></Implementation>
</Method>

<Method name="ListNS">
<Description>
Get a list of domain namespaces separated by commas
w ##class(App.sys).ListNS(.info,"NotPre")
Flag = "Ens" - only where the ensemble is installed
Flag = "NotPre" - exclude prepared</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>info,Flag=""</FormalSpec>
<Implementation><![CDATA[
	s disp=""
	$$$NspGoto(curNs,"%SYS")	
	set tRS = ##class(%ResultSet).%New("Config.Namespaces:List")
	if '$isobject(tRS) q ""
	set tSC = tRS.Execute()
	While tRS.Next() {	
		s name=tRS.GetData(1) KILL ens
		if Flag["NotPre" continue:##class(App.sys).IsPreparedNS(name)
		if Flag["Ens",##class(App.sys).getEnsProd(name,.ens) k info("Ens") m info(name,"Ens")=ens
		s disp=disp_","_name
		m info(name)=tRS.Data
	}
	d tRS.Close()
	$$$NspReturn(curNs)	
	Q $g(disp)
]]></Implementation>
</Method>

<Method name="RunCmd">
<Description><![CDATA[
Function to call the OS command in the result output
%SYS>d ##class(App.sys).RunCmd("sudo du -sm /opt/isc/ensemble/mgr/*| sort -nr",$na(^%App.Cmd("mgr",$zd($h,3))),1,"/backup/temp/snmp/")]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cmdOs="free",gn="^TaskGN",AddDateTime=0,dir="/backup/temp/"</FormalSpec>
<Implementation><![CDATA[
	s gnTask=gn
	set filename=dir_"RunCmd.log"
	if AddDateTime set datetime=$tr($$$AppDT($h)," ","_") set gnTask=$na(@gn@(datetime)),filename=dir_"RunCmd"_datetime_".log"
	if cmdOs'="",$zf(-1,cmdOs_" > "_filename)
	if ##class(App.files).ReadFile2Arr(filename,"RSK",,"^||tmpFile") MERGE @gnTask=^||tmpFile
	q $$$OK
]]></Implementation>
</Method>

<Method name="RunTask">
<Description><![CDATA[
Function to call from a regular task
%SYS>d ##class(App.sys).RunTask("snmpwalk -v 1 cip.mvk.ru -c public 1.3.6.1.4.1.16563.1.1.1.1.10","^%App.TaskLic","%SYSTEM.License:Counts","/backup/temp/snmp/")]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cmdOs="free",gn="^TaskGN",query="%SYSTEM.License:Counts",dir="/backup/temp/"</FormalSpec>
<Implementation><![CDATA[
	set datetime=$tr($$$AppDT($h)," ","_")
	set gnTask=$na(@gn@(datetime))
	set filename=dir_"RunTask"_datetime_".txt"
	if cmdOs'="",$zf(-1,cmdOs_" > "_filename)
	if query'="" d ##class(App.sys).SaveQuery(query,gn,datetime)
	q $$$OK
]]></Implementation>
</Method>

<Method name="getSQLConnection">
<Description>
  w ##class(App.sys).getSQLConnection(.list)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&List:%String=""]]></FormalSpec>
<Implementation><![CDATA[
	set res=""
	$$$NspGoto(curNs,"%SYS")	
	Set result=##CLASS(%ResultSet).%New("%DynamicQuery:SQL")
	Set tSC=result.Prepare("select Connection_Name,isJDBC,DSN from %Library.sys_SQLConnection") ; where isJDBC=1")
	Set:tSC tSC=result.Execute()
	
	if '(tSC) {
		s text=$$$aText("Application Setup Error","Ошибка настройки приложений")_" :"_$SYSTEM.Status.GetErrorText(tSC)  w !,text QUIT $$Error^%apiOBJ(text)
	}
	else {
		while result.Next() {
			if result.Data("Connection_Name")'="" {
				set List(result.Data("Connection_Name"))=$s('result.Data("isJDBC"):result.Data("DSN"),1:"")
				set res=res_result.Data("Connection_Name")_","
			}
		}
	}
	$$$NspReturn(curNs)	
	Q $g(res)
]]></Implementation>
</Method>

<Method name="GetValueGN">
<Description>
Get the value of a field by its name from GN or a list of values
В формате $listbuild
w a=##class(App.sys).GetValueGN(gn,2,"QUANTITY,PRIMARY_UNIT_OF_MEASURE")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gn,row,NameFields</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	i NameFields'["," q $lb(..GetValue(gn,row,NameFields))
	set ret=""
	for i=1:1:$l(NameFields,",") { continue:$p(NameFields,",",i)=""
		set ret=ret_$lb(..GetValue(gn,row,$p(NameFields,",",i)))
	}
	q ret
]]></Implementation>
</Method>

<Method name="GetValue">
<Description>
Get one field value by its name from GN
w a=##class(App.sys).GetValue(gn,2,"QUANTITY")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gn,row,NameField</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 i $g(@gn@(-1,NameField))="" q "" ;undefined field: "_NameField
 i '$d(@gn@(row)) q "undefined row: "_row
 q $lg(@gn@(row),@gn@(-1,NameField))
]]></Implementation>
</Method>

<Method name="SaveQuery">
<Description><![CDATA[
Procedure for calling from a regular job and storing reports in the global
%SYS>d ##class(App.sys).SaveQuery("SYS.Database:FreeSpace")
%SYS>d ##class(App.sys).SaveQuery("%SYSTEM.License:Counts")]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>query="%SYSTEM.License:Counts",gn="^%App.Task",datetime=""</FormalSpec>
<Implementation><![CDATA[
	set:datetime="" datetime=$$$AppDT($h)
	set gnTask=$na(@gn@(query,datetime))
	Set rset=##class(%Library.ResultSet).%New($p(query," ",1))
	If rset="" s @gnTask@("Create Query failed")= $System.Status.DisplayError(%objlasterror) q %objlasterror
	if $p(query," ",3)'=""	{Set status=rset.Execute($p(query," ",2),$p(query," ",3))}
	elseif $p(query," ",2)'=""	{Set status=rset.Execute($p(query," ",2))}
	else { Set status=rset.Execute()}
	If $$$ISERR(status) s @gnTask@("Execute Query failed:")= $System.Status.DisplayError(status) q status
	Set colcnt=rset.GetColumnCount()
	For i=1:1:colcnt s @gnTask@(0,i)=rset.GetColumnName(i)
	while rset.Next() {	if $I(row)
	   For i=1:1:colcnt s @gnTask@(row,i)=rset.GetData(i)
	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="SaveSQL">
<Description><![CDATA[
/*! \brief Procedure query executing and storing reports in the global
<br>\ingroup query
<br>\param ext=1 add saving column and row positions
<br>\return count rows
<br>\example d ##class(App.sys).SaveSQL("select * from Ens.MessageHeader where id=1461","^logMSW2") */]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SQL,gn="^mtempSQLGN",ext=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s st=$$$OK,hr=$h,ts=$$$AppDT(hr)
	s myQuery = ##CLASS(%ResultSet).%New("%DynamicQuery:SQL")
	s st=myQuery.Prepare(SQL)
	i 'st q st
	s st=myQuery.Execute()
	i 'st q st
	s (count)=0
	k @gn
	s ColCount=myQuery.GetColumnCount()
	F i=1:1:ColCount {	s @gn@(0)=$g(@gn@(0))_$lb(myQuery.GetColumnName(i))	
		s @gn@(-1,$ZStrip(myQuery.GetColumnName(i),"<>WCP"))=i //Name = Number
	}
	while (myQuery.Next())	{
		s count=count+1
		if ext s @gn@(-2,$ZStrip(myQuery.Get("Name"),"<>WCP"))=count  ; w "<li>"_myQuery.Get("Name")_" "_count_" "_$zr
		f ii=1:1:ColCount {
			s @gn@(count)=$g(@gn@(count))_$lb(myQuery.GetData(ii))
			}
	}
	s @gn@(-3,"sql")=$lb(SQL)
	s @gn@(-3,"timestamp")=$lb(ts,$$$AppDT($h),##class(App.type).GetCountSec($h)-##class(App.type).GetCountSec(hr))
	q count
]]></Implementation>
</Method>

<Method name="ClassExist">
<Description>
Is there such a class
w ##class(App.sys).ClassExist("Spgz.model.spgz")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>class</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	q:class="" ""
	q $d($$$comClassRaw(class))
]]></Implementation>
</Method>

<Method name="AddLangMsg">
<Description>
Add two languages to global translation
Samples ##Expression(##class(App.sys).AddLangMsg(%en,%ru))</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>en,ru</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s @$$$GNLang@($$$GNLangDOMAIN) = "ru"
	s @$$$GNLang@($$$GNLangDOMAIN,"en",$zcrc(en,7)) = en
	s @$$$GNLang@($$$GNLangDOMAIN,"ru",$zcrc(en,7)) = ru
	q "$g("_$$$GNLang_"("""_$$$GNLangDOMAIN_""",$get("_$$$GNEnsConf_"(""Language""),$mvv(58)),"_$zcrc(en,7)_"),"""_en_""")"
]]></Implementation>
</Method>

<Method name="logout">
<Description>
Sign Out
d ##Expression(##class(App.sys).logout()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim %session As %CSP.Session
    set st = %session.Logout(1)
    set %session.EndSession = 1
    return st
]]></Implementation>
</Method>

<Method name="GlobalList">
<Description>
Global list
d ##class(App.sys).GlobalList("SAMPLES",.L)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ns,&list,SystemGlobals=0,Mapped=1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
/// Returns a list of the Globals in a Cache NameSpace (used for GUI display)<br>
/// <br>
/// <b>Parameters:</b> <br>
/// NameSpace - a Cache namespace. Default is current namespace. <br>
/// Mask - a mask, or comma-separated list of masks, to select globals. Default is "*" for all.<br>
/// SystemGlobals - boolean flag to include system globals in the results. Default is "0".<br>
/// UnavailableDatabases - a returned local array of any databases not currently accessible, i.e. array(name)=status.<br>
/// Index - Internal use only.<br>
/// IgnoreHasData - For faster list of Globals set this to 1 and the HasData column will always be FALSE.<br>
/// Mapped - Return all mapped global nodes when set to 1, the default value of this parameter is 1.
/// <br>
/// Valid masks are as follows:
/// <br>
/// ABC* - All strings starting with ABC<br>
/// A:D - All strings between A and D<br>
/// A:D,Y* - All strings between A and D, and all strings starting with Y<br>
/// A:D,'C* - All strings between A and D, except those starting with C
/// Query NameSpaceList(  NameSpace As %String,  Mask As %String,  SystemGlobals As %Boolean,  ByRef UnavailableDatabases As %String,  Index As %Integer,  IgnoreHasData As %Boolean = 0,  Mapped As %Boolean = 1) As %Query(ROWSPEC = "Name:%String,Location:%String,ResourceName:%String,Permission:%String,Empty:%String,Keep:%String,Collation:%String,PointerBlock:%String,GrowthBlock:%String,HasData:%Boolean,Journal:%String,LockLocation:%String,HasSubscripts:%Boolean") [ SqlProc ]
 set s = ##class(%SQL.Statement).%New()
 do s.%PrepareClassQuery("%SYS.GlobalQuery", "NameSpaceList")
 set r = s.%Execute(ns, "*",SystemGlobals,,,,Mapped)
 ;set $namespace = ns
 while r.%Next() { 
	;w !,r.%Get("Name")
	s list(r.%Get("Name"))=""
 }
]]></Implementation>
</Method>

<Method name="GlobalSize">
<Description>
Global list
d ##class(App.sys).GlobalList("SAMPLES",.L)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[dir,&list,SystemGlobals=0,FastFlag=1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
/// Size(Directory As %String, System As %String = "", Mask As %String, SystemGlobals As %Boolean, Index As %Integer, FastFlag As %Boolean)
/// Selects Name As %String, Allocated MB As %Float, Used MB As %Float
 set s = ##class(%SQL.Statement).%New()
 do s.%PrepareClassQuery("%SYS.GlobalQuery", "Size")
 set r = s.%Execute(dir,,"*",SystemGlobals,,FastFlag )
 ;set $namespace = ns
 while r.%Next() { 
	;w !,r.%Get("Name")
	s list(r.%Get("Name"))=""
 }
]]></Implementation>
</Method>

<Method name="GetObj">
<Description>
s a=##class(App.sys).GetObj("select top 1 * from Mvk_model.SPGZ where IdSPGZ=3620277 and deletedDate is null order by importDate desc") zw a</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Query</FormalSpec>
<Implementation><![CDATA[
	#dim sql As %ResultSet.SQL = ##class(%ResultSet.SQL).%Prepare(Query)
	s obj=$$$NULLOREF
	while sql.%Next() {
		s obj=sql
		q
	}
	q obj
]]></Implementation>
</Method>

<Method name="SqlToDSN">
<Description>
Get a DSN request
w $System.Status.GetErrorText(##class(App.sys).SqlToDSN("SELECT * FROM xxmv.xxmvk_t359_pzn","OEBS-Daily","^tmMSWq"))</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql,DSN,result,top=100000</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %JDBCGateway As %Net.Remote.Java.JDBCGateway
	s hr=$h,ts=$$$AppDT(hr)
	set conn = $system.SQLGateway.GetJDBCConnection(DSN)
	if (conn = "") quit 0
	set st = %JDBCGateway.prepareStatement(conn, sql)
	set %JDBCGateway.StatementCache(conn) = st
	set query = %JDBCGateway.execQuery(st)
	
	if (query = -1)
	{
		set sc = $$$ERROR($$$GeneralError, %JDBCGateway.getErrorText())
		do %JDBCGateway.removeStatement(conn)
		;if $isObject($g(%JDBCGateway)) do %JDBCGateway.closeAll()
		quit sc
	}
	i $g(result)'="" s gn=result k @gn
	e  s gn="result" 
	
	set columns = %JDBCGateway.getColumnCount(st)
	
	;set pos = 0
	for i=1:1:columns 
	{
	  set name = $ZStrip(%JDBCGateway.getColumnName(st,i),"<>WCP")
	  set size = %JDBCGateway.getColumnDisplaySize(st,i)
	  set Type= %JDBCGateway.getColumnType(st,i)
	  set TypeName= %JDBCGateway.getColumnTypeName(st,i)
	  s @gn@(0,i)=$lb(name,size,Type,TypeName)
	  set @gn@(-1,name)=i //	  ;s @gn@(-1)=$g(@gn@(-1))_$lb($lb(size,Type,TypeName))
	  ;set pos(i) = pos
	  ;set pos = pos + size + 1
	  ;w name,!
	}

	set cnt = 1
	while %JDBCGateway.next(st)
	{
		;write !
		for i=1:1:columns {
			;write "!",%JDBCGateway.getString(st, i) 
			s @gn@(cnt)=$g(@gn@(cnt))_$lb(%JDBCGateway.getString(st, i))
		}
		set cnt = cnt + 1
		q:cnt>top
	}
	;w !,cnt,!
	;if $isObject($g(%JDBCGateway)) do %JDBCGateway.closeAll()
	do %JDBCGateway.removeStatement(conn)
	s @gn=cnt-1
	s @gn@(-3,"sql")=$lb(sql,DSN,top)
	s @gn@(-3,"timestamp")=$lb(ts,$$$AppDT($h),##class(App.type).GetCountSec($h)-##class(App.type).GetCountSec(hr))
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SaveGateway">
<Description>
s a=##class(App.sys).SaveGateway("select * from Sample.Person","Ensemble Samples","_system","") zw a
TODO save to gn</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql,pDSN,usr,pwd,result,top=100000</FormalSpec>
<Implementation><![CDATA[
 #include %occInclude
 	s hr=$h,ts=$$$AppDT(hr)
 	//Create new Gateway connection object
 	set gc=##class(%SQLGatewayConnection).%New()
 	If gc=$$$NULLOREF quit $$$ERROR($$$GeneralError,"Cannot create %SQLGatewayConnection.")
 		  
 	//Make connection to target DSN
 	set sc=gc.Connect(pDSN,usr,pwd,0) 
 	If $$$ISERR(sc) quit sc
 	if gc.ConnectionHandle="" quit $$$ERROR($$$GeneralError,"Connection failed")
 		  
 	set sc=gc.AllocateStatement(.hstmt) 
 	if $$$ISERR(sc) quit sc
		  
 	//Prepare statement for execution
 	set sc=gc.Prepare(hstmt,sql) 
 	if $$$ISERR(sc) quit sc
 	//Execute statement
 	set sc=gc.Execute(hstmt)
 	if $$$ISERR(sc) quit sc
 	//Get list of columns returned by query
 	set sc=gc.DescribeColumns(hstmt, .columnlist) 
 	if $$$ISERR(sc) quit sc
 	
 	i $g(result)'="" s gn=result k @gn
	e  s gn="result" 
 	//display column headers delimited by ":"
 	set numcols=$listlength(columnlist)-1  //get number of columns
 	for colnum=2:1:numcols+1 {
 		    ;Write $listget($listget(columnlist,colnum),1),":"
 		    s name=$listget($listget(columnlist,colnum),1)
 		    s @gn@(0,colnum-1)=$lb(name)
	  		set @gn@(-1,name)=colnum-1 
 	  		}
 	;write !
 	 
 	//Return first 200 rows	  
 	set sc=gc.Fetch(hstmt)
 	if $$$ISERR(sc) quit sc
 	s rownum=1
 	while((gc.sqlcode'=100) && (rownum<=top)) {
 	      	for ii=1:1:numcols {
 		      	s sc=gc.GetData(hstmt, ii, 1, .val)
 		      	;w " "_val
 		      	s @gn@(rownum)=$g(@gn@(rownum))_$lb(val)
 		      	if $$$ISERR(sc) break
 	      	}
 	      	s rownum=rownum+1
 	 		;write !
 	 		set sc=gc.Fetch(hstmt)
 			if $$$ISERR(sc) break
 
 	  		}
 	    
 	  //Close cursor and then disconnect
 	set sc=gc.CloseCursor(hstmt)
 	if $$$ISERR(sc) quit sc
 	set sc=gc.Disconnect()
	s @gn=rownum-1
	s @gn@(-3,"sql")=$lb(sql,pDSN,top,usr,pwd)
	s @gn@(-3,"timestamp")=$lb(ts,$$$AppDT($h),##class(App.type).GetCountSec($h)-##class(App.type).GetCountSec(hr))
 	Quit sc
]]></Implementation>
</Method>
</Class>


<Class name="App.type">
<Description>
Утилиты работы с типами</Description>
<Abstract>1</Abstract>
<IncludeCode>App.LogMacro</IncludeCode>
<TimeChanged>65069,48965.59222</TimeChanged>
<TimeCreated>64735,32446.061315</TimeCreated>

<Method name="GetCountSec">
<Description>
Посчитать количество секунд в ГГГГ-ММ-ДД ЧЧ:ММ:СС или в $HOROLOG
w ##class(App.type).GetCountSec("2018-07-06 08:14:47")
w ##class(App.type).GetCountSec($h)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>h</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	i h["-" s h=..GetHorYYYYMMDD(h)
	i h'["," q ""
	q $p(h,",",1)*86400+$p(h,",",2)
]]></Implementation>
</Method>

<Method name="GetTextMonth">
<Description>
w ##class(App.type).GetTextMonth("05")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mm</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $s(+mm="1":"январь",+mm="2":"февраль",+mm="3":"март",+mm="4":"апрель",+mm="5":"май",+mm="6":"июнь",+mm="7":"июль",+mm="8":"август",+mm="9":"сентябрь",+mm="10":"октябрь",+mm="11":"ноябрь",1:"декабрь")
]]></Implementation>
</Method>

<Method name="GetHorYYYYMMDD">
<Description>
Перевести ГГГГ-ММ-ДД ЧЧ:ММ:СС в $HOROLOG
w ##class(App.type).GetHorYYYYMMDD("2018-07-06 08:14:47")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>dt</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try{ 
		s d=$zdh($p(dt," "),3)
		s c=$zth($p(dt," ",2),1)
		s res=d_","_c
	}
	catch e { s res="" }
	q $g(res)
]]></Implementation>
</Method>

<Method name="GetValidZD">
<Description>
Проверить на валидность и вывести дату
w ##class(App.type).GetValidZD(+$h)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hr</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try{ s res=$tr($zd(hr,4),"/",".") }
	catch e { s res="" }
	;$$$LogError("Дополнительное сообщение1")
	q res
]]></Implementation>
</Method>

<Method name="GetYear">
<Description>
Получить год в формате 2018
w ##class(App.type).GetYear($h)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>h</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $p($zd(h,3),"-",1)
]]></Implementation>
</Method>

<Method name="GetDateTime">
<Description>
Получить дату в формате 2018-04-03T16:40:30
w ##class(App.type).GetDateTime($h)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>h</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $zd(h,3)_"T"_##class(App.type).GetValidZT(h)
]]></Implementation>
</Method>

<Method name="GetValidZT">
<Description>
Проверить на валидность и вывести время
w ##class(App.type).GetValidZT($h)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hr</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try{ s res=$zt(+$p(hr,",",2),1) }
	catch e { s res="" }
	;$$$LogError("Дополнительное сообщение "_hr)
	q res
]]></Implementation>
</Method>

<Method name="getDDMMYY">
<Description>
Переведем дату к формату DD.MM.YY
w ##class(App.type).getDDMMYY("2016-05-05")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStringDate:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try {
		i pStringDate?1n.n s pStringDate=$zd(pStringDate,3)
		i pStringDate["." s date=pStringDate s:$p(date,".",3)?4n date=$p(date,".",1,2)_"."_$e($p(date,".",3),3,4)
		i pStringDate["-" s date=$p(pStringDate,"-",3)_"."_$p(pStringDate,"-",2)_"."_$e($p(pStringDate,"-",1),3,4)
		i pStringDate["/" s date=$p(pStringDate,"/",2)_"."_$p(pStringDate,"/",1)_"."_$e($p(pStringDate,"/",3),3,4)
	} catch e {}
	q $g(date)
]]></Implementation>
</Method>

<Method name="getDDMMYYYY">
<Description>
Переведем дату к формату DD.MM.YYYY
w ##class(App.type).getDDMMYYYY("2016-05-05")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStringDate:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try {
		i pStringDate?1n.n s pStringDate=$zd(pStringDate,3)
		i pStringDate["." s date=pStringDate
		i pStringDate["-" s date=$p(pStringDate,"-",3)_"."_$p(pStringDate,"-",2)_"."_$p(pStringDate,"-",1)
		i pStringDate["/" s date=$p(pStringDate,"/",2)_"."_$p(pStringDate,"/",1)_"."_$p(pStringDate,"/",3)
	} catch e {}
	q $g(date)
]]></Implementation>
</Method>

<Method name="GetInpretDate">
<Description>
Переведем дату к формату YYYY-MM-DD  FORMAT=3 передав формулу типа "CurrentDay+1"
w ##class(App.type).GetInpretDate("CurrentDay+1","12:00")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStringDate:%String,time=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try {
		i pStringDate["CurrentDay" s pStringDate=$replace(pStringDate,"CurrentDay","$h")
		i pStringDate["$h"||(pStringDate["$H") {
			s %Date=""
			x "s %Date="_pStringDate
			s pStringDate=%Date
		}
		i pStringDate?1n.n s date=$zd(pStringDate,3) q
		i pStringDate["." s date=$p(pStringDate,".",3)_"-"_$p(pStringDate,".",2)_"-"_$p(pStringDate,".",1)
		i pStringDate["-" s date=pStringDate q
		i pStringDate["/" s date=$p(pStringDate,"/",3)_"-"_$p(pStringDate,"/",1)_"-"_$p(pStringDate,"/",2)
	} catch e {}
	q $g(date)_$s($g(date)'=""&&(time'=""):" "_time,1:"")
]]></Implementation>
</Method>

<Method name="getYYYYMMDD">
<Description>
Переведем дату к формату YYYY-MM-DD  FORMAT=3
w ##class(App.type).getYYYYMMDD(+$h)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStringDate:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try {
		i pStringDate?1n.n s date=$zd(pStringDate,3) q
		i pStringDate["." s date=$p(pStringDate,".",3)_"-"_$p(pStringDate,".",2)_"-"_$p(pStringDate,".",1)
		i pStringDate["-" s date=pStringDate q
		i pStringDate["/" s date=$p(pStringDate,"/",3)_"-"_$p(pStringDate,"/",1)_"-"_$p(pStringDate,"/",2)
	} catch e {}
	q $g(date)
]]></Implementation>
</Method>

<Method name="InterpretCurrentDay">
<Description><![CDATA[
Интерпретирует строку с текущей датой типа
Str= DateFrom=(CurrentDay-2)&DateTo=(CurrentDay-1)
Результат вычисленное значение выражения  "added?DateFrom=06.06.2018&DateTo=07.06.2018"
w ##class(App.type).InterpretCurrentDay("added?DateFrom=(CurrentDay-2)&DateTo=(CurrentDay-1)",.res)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Str:%String,Result:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	
	s exp=$p(Str,"?",2)
	q:exp="" "0"
	s exp="s "_$replace(exp,"CurrentDay",+$h)
	s exp=$replace(exp,"&DateTo",",%tempTo")
	s exp=$replace(exp,"DateFrom","%tempFrom")
	try {
		x exp
		s Result=$p(Str,"?",1)_"?DateFrom="_$tr($zd(%tempFrom,4),"/",".")_"&DateTo="_$tr($zd(%tempTo,4),"/",".")
		k %tempFrom,%tempTo
	} Catch e {
		Set tSC=e.AsStatus()
	}
	q tSC
]]></Implementation>
</Method>

<Method name="Transliteration">
<Description>
w ##class(App.type).Transliteration("sfdsdsdfываыавапв")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Str:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	q $tr(Str,"ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ","eicukengsszxyfyvaproldzezccmitybyEICUKEHGSSZXYFYBAPROLDZEYCCMITYBY")
]]></Implementation>
</Method>

<Method name="ParseURL">
<Description><![CDATA[
Разобрать строку по CGI переменным 
w ##class(App.type).ParseURL("aaa=sfdsds&bbb=dfываыавапв")]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[str:%String,&out,del="&"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	f i=1:1:$l(str,del) {
		continue:$p(str,del,i)=""
		continue:$p($p(str,del,i),"=")=""
		s out($p($p(str,del,i),"="))=$p($p(str,del,i),"=",2)
	}
]]></Implementation>
</Method>
</Class>
</Export>
